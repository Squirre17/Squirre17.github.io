{
    "version": "https://jsonfeed.org/version/1",
    "title": "Squirre17 Blog • All posts by \"static analysis\" category",
    "description": "introvert",
    "home_page_url": "https://Squirre17.github.io",
    "items": [
        {
            "id": "https://squirre17.github.io/2022/10/31/symbolic-execution-pry/",
            "url": "https://squirre17.github.io/2022/10/31/symbolic-execution-pry/",
            "title": "symbolic-execution-pry",
            "date_published": "2022-10-31T15:00:08.000Z",
            "content_html": "<h1 id=\"principle\"><a class=\"markdownIt-Anchor\" href=\"#principle\">#</a> principle</h1>\n<p>全局维护两个变量，符号状态<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span> 和符号化路径约束 PC.<br>\n 通过触发 error 的路径约束，来对符号的值的求解技术就是符号执行。<br>\n和模糊测试不同的一点是，模糊测试是用大量的不明觉厉的数据对程序狠狠注入，以期触发一条 error 路径，而符号执行是对每个路径进行约束分析，求得可达到这个路径的符号的值的集合。</p>\n<blockquote>\n<p>In fact, exactly the set of runs whose concrete values satisfy the path condition</p>\n</blockquote>\n<p><img src=\"/2022/10/31/symbolic-execution-pry/1.png\" alt><br>\n符号状态就是一个符号到具体值的映射，执行到某一句的时候就进行这个映射关系。<br>\n到达条件语句时，就会产生另外一个实例，也就是出了两种情况，满足条件要求和不满足条件要求的实例，左边的<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi></mrow><annotation encoding=\"application/x-tex\">\\sigma</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span></span></span></span> 不一样 PC 也不一样。<br>\n<img src=\"/2022/10/31/symbolic-execution-pry/2.png\" alt><br>\n这里有两个分支，所以有三个实例 (一个实例经过一个分支变成两个实例).<br>\n<img src=\"/2022/10/31/symbolic-execution-pry/3.png\" alt></p>\n<h1 id=\"problem\"><a class=\"markdownIt-Anchor\" href=\"#problem\">#</a> problem</h1>\n<p>在静态符号执行中（静态就是不会真的执行，而是通过读取 bin 去生成实例）<br>\n<img src=\"/2022/10/31/symbolic-execution-pry/4.png\" alt><br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">{</mo><mtext> </mtext><mi>N</mi><mo>→</mo><msub><mi>N</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><mi>s</mi><mi>u</mi><mi>m</mi><mo>→</mo><mn>0</mn><mtext> </mtext><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\sigma \\{\\ N \\rightarrow N_0,\\ sum\\rightarrow 0\\ \\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">{</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mspace\"> </span><span class=\"mclose\">}</span></span></span></span> 的符号状态遇到 while 的判断的时候会生成</p>\n<ul>\n<li>instance1: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">{</mo><mtext> </mtext><mi>N</mi><mo>→</mo><msub><mi>N</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><mi>s</mi><mi>u</mi><mi>m</mi><mo>→</mo><msub><mi>N</mi><mn>0</mn></msub><mtext> </mtext><mo stretchy=\"false\">}</mo><mspace width=\"1em\"><mi>P</mi><mi>C</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>N</mi><mn>0</mn></msub><mo>&gt;</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mspace></mrow><annotation encoding=\"application/x-tex\">\\sigma \\{\\ N \\rightarrow N_1,\\ sum\\rightarrow N_0\\ \\}\\quad PC=(N_0&gt;0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">{</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></li>\n<li>instance2: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>σ</mi><mo stretchy=\"false\">{</mo><mtext> </mtext><mi>N</mi><mo>→</mo><msub><mi>N</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><mtext> </mtext><mi>s</mi><mi>u</mi><mi>m</mi><mo>→</mo><mn>0</mn><mtext> </mtext><mo stretchy=\"false\">}</mo><mspace width=\"1em\"><mi>P</mi><mi>C</mi><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi>N</mi><mn>0</mn></msub><mo>≤</mo><mn>0</mn><mo stretchy=\"false\">)</mo></mspace></mrow><annotation encoding=\"application/x-tex\">\\sigma \\{\\ N \\rightarrow N_0,\\ sum\\rightarrow 0\\ \\}\\quad PC=(N_0\\leq 0)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">σ</span><span class=\"mopen\">{</span><span class=\"mspace\"> </span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">→</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mspace\"> </span><span class=\"mclose\">}</span><span class=\"mspace\" style=\"margin-right:1em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span></li>\n</ul>\n<p>对于 ins1，会继续判断 while，此时的 N 的符号为<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>N</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">N_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> (和原来不一样) 就会再次生成两个实例，从而无限递归。</p>\n<p>另外对于平方求余问题没法高效求解（平方求余问题只能一个个去试，而不能直接用算术表达式求值）<br>\n比如我<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><msup><mi>y</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">x = y^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 这个没求余的算术表达式在给定了 x 为 1 就能迅速求出 y=±1。</p>\n<h1 id=\"dynamic-symbolic-execution\"><a class=\"markdownIt-Anchor\" href=\"#dynamic-symbolic-execution\">#</a> dynamic symbolic execution</h1>\n<p>给定输入在执行的时候动态对约束反转求得另外一条分支的可行解来遍历所有路径的方法。<br>\n<img src=\"/2022/10/31/symbolic-execution-pry/5.png\" alt></p>\n<ul>\n<li>当 x0 = 22, y1 = 7 的时候会走向分支 1，此时就是真实的运行程序了</li>\n<li>然后通过约束条件取反 构造一个新的 x2 y2 (2 ,1) 就能走到右边那个分支\n<ul>\n<li>得到约束条件<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo>=</mo><mn>2</mn><mtext> </mtext><msub><mi>y</mi><mn>0</mn></msub><mo stretchy=\"false\">)</mo><mo>∧</mo><mo stretchy=\"false\">(</mo><msub><mi>x</mi><mn>0</mn></msub><mo>&gt;</mo><msub><mi>y</mi><mn>0</mn></msub><mo>+</mo><mn>10</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(x_0=2\\ y_0)\\wedge (x_0&gt;y_0+10)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mspace\"> </span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∧</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> 然后此时不满足第二个约束\n<ul>\n<li>反转第二个约束 构造输入继续走到分支 3</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>那么对于构造输入就能用到模糊测试手段了，如果 mutator 能够自己定义的话就能实现 fuzz+se 了 (afl++)</p>\n<h1 id=\"hybrid-fuzzing\"><a class=\"markdownIt-Anchor\" href=\"#hybrid-fuzzing\">#</a> hybrid fuzzing</h1>\n<p>基于以上的问题，就有了 fuzz+se<br>\n 用符号执行引擎去代替 mutator，作为每一个核上 fuzzer 的输入。<br>\n那么问题就在于，分配输入给每个 fuzzer 的问题，肯定是要尽可能的将不同的约束路径均匀的分配给每一个 fuzzer。<br>\n<a href=\"https://github.com/sslab-gatech/qsym\">GitHub - sslab-gatech/qsym: QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing</a></p>\n<p>dotsu 爷还提到了不同的解决思路，之后分析。</p>\n",
            "tags": [
                "symbolic execution"
            ]
        },
        {
            "id": "https://squirre17.github.io/2022/10/26/Ghidra-INDIRECT-explanation/",
            "url": "https://squirre17.github.io/2022/10/26/Ghidra-INDIRECT-explanation/",
            "title": "Ghidra-INDIRECT-explanation",
            "date_published": "2022-10-26T10:05:02.000Z",
            "content_html": "<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">undefined4 <span class=\"title function_\">FUN_000114b8</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  undefined4 in_r3;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s(%d)\\n&quot;</span>,<span class=\"string\">&quot;part_data_end&quot;</span>,<span class=\"number\">0x7d</span>,in_r3,in_r3);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>output result as following (pcode-refined)</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(ram, 0x114d4, 4) INDIRECT (ram, 0x114d4, 4) , (const, 0x15, 4)</span><br><span class=\"line\">(ram, 0x114d8, 4) INDIRECT (ram, 0x114d8, 4) , (const, 0x15, 4)</span><br><span class=\"line\"> ---  CALL (ram, 0x10ba4, 8) , (ram, 0x114d8, 4) , (ram, 0x114d4, 4) , (const, 0x7d, 4) , (register, 0x2c, 4) , (register, 0x2c, 4)</span><br><span class=\"line\"></span><br><span class=\"line\">(register, 0x20, 4) COPY (const, 0x0, 4)</span><br><span class=\"line\">(ram, 0x114d4, 4) COPY (ram, 0x114d4, 4)</span><br><span class=\"line\">(ram, 0x114d8, 4) COPY (ram, 0x114d8, 4)</span><br><span class=\"line\"></span><br><span class=\"line\"> ---  RETURN (const, 0x0, 4) , (register, 0x20, 4)</span><br></pre></td></tr></table></figure>\n<p>M4rsuri’s explanation(<a href=\"https://github.com/NationalSecurityAgency/ghidra/issues/2744\">INDIRECT pcode op, input1 misunderstood · Issue #2744 · NationalSecurityAgency/ghidra · GitHub</a>)</p>\n<pre><code>I think that INDIRECT just indicates the varnode in output can be affected by the pcode indicated by it's input1.So it's impossible for a varnode to be affected when it's both not the output of an instruction and it's not associated with the instruction through an INDIRECT.\nIn other words, the varnodes being the output of all INDIRECTs associated with an instruction is the over-approximation of all varnodes that may be affected by the execution of this instruction. Only CALL/CALLIND instructions can have side affects because we need to take the execution of their corresponding subroutines into consideration. So INDIRECT instructions only appear before CALL/CALLIND instructions.\nI wonder if my understanding is proper.\nThank you.\n</code></pre>\n<p>INDIRECT pass input0 to output, but output be affected by some pcode indicated by input1 possibly.<br>\nAffect means “be changed” and so on in a narrow sense.<br>\nbecause we don’t know what the subroutine indicated by subsequent CALL pcode that take out our parameter’s address will do .Isn’t it? Maybe it can modify the content in the corresponding address. So it’s value is indirected when machine is executed to the next COPY pcode and pass it to other varnode.(so INDIRECT meaning - varnode passed through other subroutine before reaching its destination)<br>\n <code>A special address space indicates input1's use as an internal reference encoding</code>  simply means the Seqnum which indicates the sequence number of anyone pcode.</p>\n<p>if u print out above CALL pcode’s seqnum, u will find it exactly is  <code>0x15</code>  (const, 0x15, 4).</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(ram, <span class=\"number\">0x114c8</span>, <span class=\"number\">67</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">(ram, <span class=\"number\">0x114d4</span>, <span class=\"number\">4</span>) INDIRECT (ram, <span class=\"number\">0x114d4</span>, <span class=\"number\">4</span>) , (<span class=\"type\">const</span>, <span class=\"number\">0x15</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">(ram, <span class=\"number\">0x114c8</span>, <span class=\"number\">69</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">(ram, <span class=\"number\">0x114d8</span>, <span class=\"number\">4</span>) INDIRECT (ram, <span class=\"number\">0x114d8</span>, <span class=\"number\">4</span>) , (<span class=\"type\">const</span>, <span class=\"number\">0x15</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">(ram, <span class=\"number\">0x114c8</span>, <span class=\"number\">21</span>, <span class=\"number\">2</span>)                                             &lt;&lt;- <span class=\"number\">21</span> = <span class=\"number\">0x15</span></span><br><span class=\"line\"> ---  CALL (ram, <span class=\"number\">0x10ba4</span>, <span class=\"number\">8</span>) , (ram, <span class=\"number\">0x114d8</span>, <span class=\"number\">4</span>) , (ram, <span class=\"number\">0x114d4</span>, <span class=\"number\">4</span>) , (<span class=\"type\">const</span>, <span class=\"number\">0x7d</span>, <span class=\"number\">4</span>) , (<span class=\"keyword\">register</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">4</span>) , (<span class=\"keyword\">register</span>, <span class=\"number\">0x2c</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">(ram, <span class=\"number\">0x114cc</span>, <span class=\"number\">29</span>, <span class=\"number\">3</span>) </span><br><span class=\"line\">(<span class=\"keyword\">register</span>, <span class=\"number\">0x20</span>, <span class=\"number\">4</span>) COPY (<span class=\"type\">const</span>, <span class=\"number\">0x0</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">(ram, <span class=\"number\">0x114d0</span>, <span class=\"number\">68</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">(ram, <span class=\"number\">0x114d4</span>, <span class=\"number\">4</span>) COPY (ram, <span class=\"number\">0x114d4</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">(ram, <span class=\"number\">0x114d0</span>, <span class=\"number\">70</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">(ram, <span class=\"number\">0x114d8</span>, <span class=\"number\">4</span>) COPY (ram, <span class=\"number\">0x114d8</span>, <span class=\"number\">4</span>)</span><br><span class=\"line\">(ram, <span class=\"number\">0x114d0</span>, <span class=\"number\">44</span>, <span class=\"number\">6</span>)</span><br><span class=\"line\"> ---  RETURN (<span class=\"type\">const</span>, <span class=\"number\">0x0</span>, <span class=\"number\">4</span>) , (<span class=\"keyword\">register</span>, <span class=\"number\">0x20</span>, <span class=\"number\">4</span>)</span><br></pre></td></tr></table></figure>\n<p>Thanks M4tsuri for his help.</p>\n",
            "tags": [
                "Ghidra"
            ]
        },
        {
            "id": "https://squirre17.github.io/2022/10/18/llvm-init/",
            "url": "https://squirre17.github.io/2022/10/18/llvm-init/",
            "title": "llvm-init",
            "date_published": "2022-10-18T02:27:10.000Z",
            "content_html": "<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install lld-12</span><br><span class=\"line\">sudo ln -s /lib/llvm-9/bin/llc /bin/llc</span><br><span class=\"line\">sudo ln -s /lib/llvm-9/bin/opt /bin/opt</span><br></pre></td></tr></table></figure>\n<p>官方文档：<a href=\"https://llvm.org/docs/LangRef.html\">LLVM Language Reference Manual — LLVM 16.0.0git documentation</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang -Xclang -ast-dump -fsyntax-only test.c</span><br></pre></td></tr></table></figure>\n<p>生成 AST</p>\n<ul>\n<li>-S                      Only run preprocess and compilation steps</li>\n<li>-emit-llvm         Use the LLVM representation for assembler and object files</li>\n<li>-c                      Only run preprocess, compile, and assemble steps （生成字节码的 bc 文件）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang -S -emit-llvm test.c </span><br></pre></td></tr></table></figure>\n<p>生成的 ir 中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define dso_local i32 @main() #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  %<span class=\"number\">1</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 <span class=\"number\">0</span>, i32* %<span class=\"number\">1</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  ret i32 <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果开启优化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang -S -emit-llvm -O3 test.c</span><br></pre></td></tr></table></figure>\n<p>会直接变成</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define dso_local i32 @main() local_unnamed_addr #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  ret i32 <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后用 llc 生成汇编</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">llc test.ll</span><br></pre></td></tr></table></figure>\n<p>ll 到 bc 文件可以用 llvm-as<br>\n 反过来用 llvm-dis<br>\n 注意，ll 和 bc 和内存中的形式是等价的。</p>\n<p><code>dso_local</code>  是一个 Runtime Preemption 说明符，表明该函数会在同一个链接单元（即该函数所在的文件以及包含的头文件）内解析符号。</p>\n<p>对于</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.c</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">foo</span><span class=\"params\">(<span class=\"type\">int</span> first, <span class=\"type\">int</span> second)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> first + second;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo(a, b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成</p>\n<ul>\n<li>alloca 就是在栈中分配空间</li>\n<li>先把传入的值放入栈中再拿出来（嫩麻烦</li>\n<li>nsw : no signed wrap</li>\n<li>所有的全局变量都以 @ 为前缀</li>\n<li>这里 <code>#0</code>  与之后的 <code>attributes #0</code>  相对应</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; ModuleID = <span class=\"string\">&#x27;main.c&#x27;</span></span><br><span class=\"line\">source_filename = <span class=\"string\">&quot;main.c&quot;</span></span><br><span class=\"line\">target datalayout = <span class=\"string\">&quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;</span></span><br><span class=\"line\">target triple = <span class=\"string\">&quot;x86_64-pc-linux-gnu&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">@a = dso_local global i32 <span class=\"number\">5</span>, align <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class=\"line\">define dso_local i32 @foo(i32, i32) #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  %<span class=\"number\">3</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">4</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 %<span class=\"number\">0</span>, i32* %<span class=\"number\">3</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 %<span class=\"number\">1</span>, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">5</span> = load i32, i32* %<span class=\"number\">3</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">6</span> = load i32, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">7</span> = add nsw i32 %<span class=\"number\">5</span>, %<span class=\"number\">6</span></span><br><span class=\"line\">  ret i32 %<span class=\"number\">7</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class=\"line\">define dso_local i32 @main() #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  %<span class=\"number\">1</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">2</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 <span class=\"number\">0</span>, i32* %<span class=\"number\">1</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 <span class=\"number\">4</span>, i32* %<span class=\"number\">2</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">3</span> = load i32, i32* @a, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">4</span> = load i32, i32* %<span class=\"number\">2</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">5</span> = call i32 @foo(i32 %<span class=\"number\">3</span>, i32 %<span class=\"number\">4</span>)</span><br><span class=\"line\">  ret i32 %<span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">attributes #<span class=\"number\">0</span> = &#123; noinline nounwind optnone uwtable <span class=\"string\">&quot;correctly-rounded-divide-sqrt-fp-math&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;disable-tail-calls&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;less-precise-fpmad&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;min-legal-vector-width&quot;</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"string\">&quot;no-frame-pointer-elim&quot;</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"string\">&quot;no-frame-pointer-elim-non-leaf&quot;</span> <span class=\"string\">&quot;no-infs-fp-math&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;no-jump-tables&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;no-nans-fp-math&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;no-signed-zeros-fp-math&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;no-trapping-math&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;stack-protector-buffer-size&quot;</span>=<span class=\"string\">&quot;8&quot;</span> <span class=\"string\">&quot;target-cpu&quot;</span>=<span class=\"string\">&quot;x86-64&quot;</span> <span class=\"string\">&quot;target-features&quot;</span>=<span class=\"string\">&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot;</span> <span class=\"string\">&quot;unsafe-fp-math&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;use-soft-float&quot;</span>=<span class=\"string\">&quot;false&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">!llvm.module.flags = !&#123;!<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">!llvm.ident = !&#123;!<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">!<span class=\"number\">0</span> = !&#123;i32 <span class=\"number\">1</span>, !<span class=\"string\">&quot;wchar_size&quot;</span>, i32 <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">!<span class=\"number\">1</span> = !&#123;!<span class=\"string\">&quot;clang version 9.0.1-12 &quot;</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对于库外函数 要使用就需要 declare 这个函数的签名</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare i32 @getint()</span><br></pre></td></tr></table></figure>\n<h2 id=\"条件分支\"><a class=\"markdownIt-Anchor\" href=\"#条件分支\">#</a> 条件分支</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//if.c</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = getint();</span><br><span class=\"line\">    <span class=\"type\">int</span> b = getint();</span><br><span class=\"line\">    <span class=\"type\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == b) &#123;</span><br><span class=\"line\">        c = <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        c = <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    putint(c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define dso_local i32 @main() #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  %<span class=\"number\">1</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">2</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">3</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">4</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 <span class=\"number\">0</span>, i32* %<span class=\"number\">1</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">5</span> = call i32 (...) @getint()</span><br><span class=\"line\">  store i32 %<span class=\"number\">5</span>, i32* %<span class=\"number\">2</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">6</span> = call i32 (...) @getint()</span><br><span class=\"line\">  store i32 %<span class=\"number\">6</span>, i32* %<span class=\"number\">3</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 <span class=\"number\">0</span>, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">7</span> = load i32, i32* %<span class=\"number\">2</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">8</span> = load i32, i32* %<span class=\"number\">3</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">9</span> = icmp eq i32 %<span class=\"number\">7</span>, %<span class=\"number\">8</span></span><br><span class=\"line\">  br i1 %<span class=\"number\">9</span>, label %<span class=\"number\">10</span>, label %<span class=\"number\">11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span>:                                               ; preds = %<span class=\"number\">0</span></span><br><span class=\"line\">  store i32 <span class=\"number\">5</span>, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  br label %<span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11</span>:                                               ; preds = %<span class=\"number\">0</span></span><br><span class=\"line\">  store i32 <span class=\"number\">10</span>, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  br label %<span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12</span>:                                               ; preds = %<span class=\"number\">11</span>, %<span class=\"number\">10</span></span><br><span class=\"line\">  %<span class=\"number\">13</span> = load i32, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">14</span> = call i32 (i32, ...) bitcast (i32 (...)* @putint to i32 (i32, ...)*)(i32 %<span class=\"number\">13</span>)</span><br><span class=\"line\">  ret i32 <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>语法 <code>br + 标志位 + truelabel + falselabel</code></p>\n<h1 id=\"cfg图\"><a class=\"markdownIt-Anchor\" href=\"#cfg图\">#</a> cfg 图</h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>opt -dot-cfg test.ll</code>  生成</p>\n<p>为了可视化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y graphviz-doc libgraphviz-dev graphviz</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dot .max.dot  -Tpng -o max.png</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/10/18/llvm-init/image-20221018103046162.png\" alt=\"image-20221018103046162\"><br>\n 如果在 clang 的时候用 O3 编译<br>\n这里就变成了选择函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define dso_local i32 @max(i32, i32) local_unnamed_addr #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  %<span class=\"number\">3</span> = icmp sgt i32 %<span class=\"number\">0</span>, %<span class=\"number\">1</span></span><br><span class=\"line\">  %<span class=\"number\">4</span> = select i1 %<span class=\"number\">3</span>, i32 %<span class=\"number\">0</span>, i32 %<span class=\"number\">1</span></span><br><span class=\"line\">  ret i32 %<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>sgt: signed greater than (<a href=\"https://releases.llvm.org/2.7/docs/LangRef.html\">LLVM Assembly Language Reference Manual</a>)</li>\n<li>The ‘select’ instruction is used to choose one value based on a condition, without branching.</li>\n</ul>\n<h1 id=\"ssa-phi-node\"><a class=\"markdownIt-Anchor\" href=\"#ssa-phi-node\">#</a> SSA &amp; phi node</h1>\n<p>这个概念在 ghidra，南大静态分析，各种文章里都看过了。。<br>\nSSA form enables and simplifies a vast number of compiler optimizations, and is the de-facto standard for intermediate representations in compilers of imperative programming languages.<br>\n 看这个就行 <a href=\"https://carstein.github.io/2020/10/22/ssa-explained.html\">SSA Explained</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define i32 @max(i32 %a, i32 %b) &#123;</span><br><span class=\"line\">entry:</span><br><span class=\"line\">  %<span class=\"number\">0</span> = icmp sgt i32 %a, %b</span><br><span class=\"line\">  br i1 %<span class=\"number\">0</span>, label %btrue, label %bfalse</span><br><span class=\"line\"></span><br><span class=\"line\">btrue:                                      ; preds = %<span class=\"number\">2</span></span><br><span class=\"line\">  br label %end</span><br><span class=\"line\"></span><br><span class=\"line\">bfalse:                                     ; preds = %<span class=\"number\">2</span></span><br><span class=\"line\">  br label %end</span><br><span class=\"line\"></span><br><span class=\"line\">end:                                     ; preds = %btrue, %bfalse</span><br><span class=\"line\">  %retval = phi i32 [%a, %btrue], [%b, %bfalse]</span><br><span class=\"line\">  ret i32 %retval</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>依据控制流分支选择变量。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">llc -O0 -filetype=asm test.ll</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># %bb<span class=\"number\">.0</span>:                                # %entry</span><br><span class=\"line\">\tcmpl\t%esi, %edi</span><br><span class=\"line\">\tmovl\t%edi, <span class=\"number\">-4</span>(%rsp)          # <span class=\"number\">4</span>-byte Spill</span><br><span class=\"line\">\tmovl\t%esi, <span class=\"number\">-8</span>(%rsp)          # <span class=\"number\">4</span>-byte Spill</span><br><span class=\"line\">\tjle\t.LBB0_2</span><br><span class=\"line\"># %bb<span class=\"number\">.1</span>:                                # %btrue</span><br><span class=\"line\">\tmovl\t<span class=\"number\">-4</span>(%rsp), %eax          # <span class=\"number\">4</span>-byte Reload</span><br><span class=\"line\">\tmovl\t%eax, <span class=\"number\">-12</span>(%rsp)         # <span class=\"number\">4</span>-byte Spill</span><br><span class=\"line\">\tjmp\t.LBB0_3</span><br><span class=\"line\">.LBB0_2:                                # %bfalse</span><br><span class=\"line\">\tmovl\t<span class=\"number\">-8</span>(%rsp), %eax          # <span class=\"number\">4</span>-byte Reload</span><br><span class=\"line\">\tmovl\t%eax, <span class=\"number\">-12</span>(%rsp)         # <span class=\"number\">4</span>-byte Spill</span><br><span class=\"line\">\tjmp\t.LBB0_3</span><br><span class=\"line\">.LBB0_3:                                # %end</span><br><span class=\"line\">\tmovl\t<span class=\"number\">-12</span>(%rsp), %eax         # <span class=\"number\">4</span>-byte Reload</span><br><span class=\"line\">\tretq</span><br></pre></td></tr></table></figure>\n<p>汇编里是实现就是每一条分支都往 <code>-12(%rsp)</code>  上放置数据，然后 end 分支读取。</p>\n",
            "tags": [
                "llvm"
            ]
        }
    ]
}