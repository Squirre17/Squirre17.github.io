{
    "version": "https://jsonfeed.org/version/1",
    "title": "Squirre17 Blog • All posts by \"static analysis\" category",
    "description": "Ler2sq@gmail.com",
    "home_page_url": "https://Squirre17.github.io",
    "items": [
        {
            "id": "https://squirre17.github.io/2022/10/18/llvm-init/",
            "url": "https://squirre17.github.io/2022/10/18/llvm-init/",
            "title": "llvm-init",
            "date_published": "2022-10-18T02:27:10.000Z",
            "content_html": "<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install lld-12</span><br><span class=\"line\">sudo ln -s /lib/llvm-9/bin/llc /bin/llc</span><br><span class=\"line\">sudo ln -s /lib/llvm-9/bin/opt /bin/opt</span><br></pre></td></tr></table></figure>\n<p>官方文档：<a href=\"https://llvm.org/docs/LangRef.html\">LLVM Language Reference Manual — LLVM 16.0.0git documentation</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang -Xclang -ast-dump -fsyntax-only test.c</span><br></pre></td></tr></table></figure>\n<p>生成 AST</p>\n<ul>\n<li>-S                      Only run preprocess and compilation steps</li>\n<li>-emit-llvm         Use the LLVM representation for assembler and object files</li>\n<li>-c                      Only run preprocess, compile, and assemble steps （生成字节码的 bc 文件）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang -S -emit-llvm test.c </span><br></pre></td></tr></table></figure>\n<p>生成的 ir 中</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define dso_local i32 @main() #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  %<span class=\"number\">1</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 <span class=\"number\">0</span>, i32* %<span class=\"number\">1</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  ret i32 <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果开启优化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clang -S -emit-llvm -O3 test.c</span><br></pre></td></tr></table></figure>\n<p>会直接变成</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define dso_local i32 @main() local_unnamed_addr #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  ret i32 <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后用 llc 生成汇编</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">llc test.ll</span><br></pre></td></tr></table></figure>\n<p>ll 到 bc 文件可以用 llvm-as<br>\n 反过来用 llvm-dis<br>\n 注意，ll 和 bc 和内存中的形式是等价的。</p>\n<p><code>dso_local</code>  是一个 Runtime Preemption 说明符，表明该函数会在同一个链接单元（即该函数所在的文件以及包含的头文件）内解析符号。</p>\n<p>对于</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// main.c</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">foo</span><span class=\"params\">(<span class=\"type\">int</span> first, <span class=\"type\">int</span> second)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> first + second;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> a = <span class=\"number\">5</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> b = <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> foo(a, b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>生成</p>\n<ul>\n<li>alloca 就是在栈中分配空间</li>\n<li>先把传入的值放入栈中再拿出来（嫩麻烦</li>\n<li>nsw : no signed wrap</li>\n<li>所有的全局变量都以 @ 为前缀</li>\n<li>这里 <code>#0</code>  与之后的 <code>attributes #0</code>  相对应</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">; ModuleID = <span class=\"string\">&#x27;main.c&#x27;</span></span><br><span class=\"line\">source_filename = <span class=\"string\">&quot;main.c&quot;</span></span><br><span class=\"line\">target datalayout = <span class=\"string\">&quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&quot;</span></span><br><span class=\"line\">target triple = <span class=\"string\">&quot;x86_64-pc-linux-gnu&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">@a = dso_local global i32 <span class=\"number\">5</span>, align <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class=\"line\">define dso_local i32 @foo(i32, i32) #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  %<span class=\"number\">3</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">4</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 %<span class=\"number\">0</span>, i32* %<span class=\"number\">3</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 %<span class=\"number\">1</span>, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">5</span> = load i32, i32* %<span class=\"number\">3</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">6</span> = load i32, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">7</span> = add nsw i32 %<span class=\"number\">5</span>, %<span class=\"number\">6</span></span><br><span class=\"line\">  ret i32 %<span class=\"number\">7</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">; Function Attrs: noinline nounwind optnone uwtable</span><br><span class=\"line\">define dso_local i32 @main() #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  %<span class=\"number\">1</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">2</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 <span class=\"number\">0</span>, i32* %<span class=\"number\">1</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 <span class=\"number\">4</span>, i32* %<span class=\"number\">2</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">3</span> = load i32, i32* @a, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">4</span> = load i32, i32* %<span class=\"number\">2</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">5</span> = call i32 @foo(i32 %<span class=\"number\">3</span>, i32 %<span class=\"number\">4</span>)</span><br><span class=\"line\">  ret i32 %<span class=\"number\">5</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">attributes #<span class=\"number\">0</span> = &#123; noinline nounwind optnone uwtable <span class=\"string\">&quot;correctly-rounded-divide-sqrt-fp-math&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;disable-tail-calls&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;less-precise-fpmad&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;min-legal-vector-width&quot;</span>=<span class=\"string\">&quot;0&quot;</span> <span class=\"string\">&quot;no-frame-pointer-elim&quot;</span>=<span class=\"string\">&quot;true&quot;</span> <span class=\"string\">&quot;no-frame-pointer-elim-non-leaf&quot;</span> <span class=\"string\">&quot;no-infs-fp-math&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;no-jump-tables&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;no-nans-fp-math&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;no-signed-zeros-fp-math&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;no-trapping-math&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;stack-protector-buffer-size&quot;</span>=<span class=\"string\">&quot;8&quot;</span> <span class=\"string\">&quot;target-cpu&quot;</span>=<span class=\"string\">&quot;x86-64&quot;</span> <span class=\"string\">&quot;target-features&quot;</span>=<span class=\"string\">&quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&quot;</span> <span class=\"string\">&quot;unsafe-fp-math&quot;</span>=<span class=\"string\">&quot;false&quot;</span> <span class=\"string\">&quot;use-soft-float&quot;</span>=<span class=\"string\">&quot;false&quot;</span> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">!llvm.module.flags = !&#123;!<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">!llvm.ident = !&#123;!<span class=\"number\">1</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">!<span class=\"number\">0</span> = !&#123;i32 <span class=\"number\">1</span>, !<span class=\"string\">&quot;wchar_size&quot;</span>, i32 <span class=\"number\">4</span>&#125;</span><br><span class=\"line\">!<span class=\"number\">1</span> = !&#123;!<span class=\"string\">&quot;clang version 9.0.1-12 &quot;</span>&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对于库外函数 要使用就需要 declare 这个函数的签名</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare i32 @getint()</span><br></pre></td></tr></table></figure>\n<h2 id=\"条件分支\"><a class=\"markdownIt-Anchor\" href=\"#条件分支\">#</a> 条件分支</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//if.c</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = getint();</span><br><span class=\"line\">    <span class=\"type\">int</span> b = getint();</span><br><span class=\"line\">    <span class=\"type\">int</span> c = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (a == b) &#123;</span><br><span class=\"line\">        c = <span class=\"number\">5</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        c = <span class=\"number\">10</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    putint(c);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define dso_local i32 @main() #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  %<span class=\"number\">1</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">2</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">3</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">4</span> = alloca i32, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 <span class=\"number\">0</span>, i32* %<span class=\"number\">1</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">5</span> = call i32 (...) @getint()</span><br><span class=\"line\">  store i32 %<span class=\"number\">5</span>, i32* %<span class=\"number\">2</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">6</span> = call i32 (...) @getint()</span><br><span class=\"line\">  store i32 %<span class=\"number\">6</span>, i32* %<span class=\"number\">3</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  store i32 <span class=\"number\">0</span>, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">7</span> = load i32, i32* %<span class=\"number\">2</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">8</span> = load i32, i32* %<span class=\"number\">3</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">9</span> = icmp eq i32 %<span class=\"number\">7</span>, %<span class=\"number\">8</span></span><br><span class=\"line\">  br i1 %<span class=\"number\">9</span>, label %<span class=\"number\">10</span>, label %<span class=\"number\">11</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">10</span>:                                               ; preds = %<span class=\"number\">0</span></span><br><span class=\"line\">  store i32 <span class=\"number\">5</span>, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  br label %<span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">11</span>:                                               ; preds = %<span class=\"number\">0</span></span><br><span class=\"line\">  store i32 <span class=\"number\">10</span>, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  br label %<span class=\"number\">12</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">12</span>:                                               ; preds = %<span class=\"number\">11</span>, %<span class=\"number\">10</span></span><br><span class=\"line\">  %<span class=\"number\">13</span> = load i32, i32* %<span class=\"number\">4</span>, align <span class=\"number\">4</span></span><br><span class=\"line\">  %<span class=\"number\">14</span> = call i32 (i32, ...) bitcast (i32 (...)* @putint to i32 (i32, ...)*)(i32 %<span class=\"number\">13</span>)</span><br><span class=\"line\">  ret i32 <span class=\"number\">0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>语法 <code>br + 标志位 + truelabel + falselabel</code></p>\n<h1 id=\"cfg图\"><a class=\"markdownIt-Anchor\" href=\"#cfg图\">#</a> cfg 图</h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">max</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (a &gt; b) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> max(<span class=\"number\">1</span>,<span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>opt -dot-cfg test.ll</code>  生成</p>\n<p>为了可视化</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y graphviz-doc libgraphviz-dev graphviz</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dot .max.dot  -Tpng -o max.png</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/10/18/llvm-init/image-20221018103046162.png\" alt=\"image-20221018103046162\"><br>\n 如果在 clang 的时候用 O3 编译<br>\n这里就变成了选择函数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define dso_local i32 @max(i32, i32) local_unnamed_addr #<span class=\"number\">0</span> &#123;</span><br><span class=\"line\">  %<span class=\"number\">3</span> = icmp sgt i32 %<span class=\"number\">0</span>, %<span class=\"number\">1</span></span><br><span class=\"line\">  %<span class=\"number\">4</span> = select i1 %<span class=\"number\">3</span>, i32 %<span class=\"number\">0</span>, i32 %<span class=\"number\">1</span></span><br><span class=\"line\">  ret i32 %<span class=\"number\">4</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>sgt: signed greater than (<a href=\"https://releases.llvm.org/2.7/docs/LangRef.html\">LLVM Assembly Language Reference Manual</a>)</li>\n<li>The ‘select’ instruction is used to choose one value based on a condition, without branching.</li>\n</ul>\n<h1 id=\"ssa-phi-node\"><a class=\"markdownIt-Anchor\" href=\"#ssa-phi-node\">#</a> SSA &amp; phi node</h1>\n<p>这个概念在 ghidra，南大静态分析，各种文章里都看过了。。<br>\nSSA form enables and simplifies a vast number of compiler optimizations, and is the de-facto standard for intermediate representations in compilers of imperative programming languages.<br>\n 看这个就行 <a href=\"https://carstein.github.io/2020/10/22/ssa-explained.html\">SSA Explained</a></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define i32 @max(i32 %a, i32 %b) &#123;</span><br><span class=\"line\">entry:</span><br><span class=\"line\">  %<span class=\"number\">0</span> = icmp sgt i32 %a, %b</span><br><span class=\"line\">  br i1 %<span class=\"number\">0</span>, label %btrue, label %bfalse</span><br><span class=\"line\"></span><br><span class=\"line\">btrue:                                      ; preds = %<span class=\"number\">2</span></span><br><span class=\"line\">  br label %end</span><br><span class=\"line\"></span><br><span class=\"line\">bfalse:                                     ; preds = %<span class=\"number\">2</span></span><br><span class=\"line\">  br label %end</span><br><span class=\"line\"></span><br><span class=\"line\">end:                                     ; preds = %btrue, %bfalse</span><br><span class=\"line\">  %retval = phi i32 [%a, %btrue], [%b, %bfalse]</span><br><span class=\"line\">  ret i32 %retval</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>依据控制流分支选择变量。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">llc -O0 -filetype=asm test.ll</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># %bb<span class=\"number\">.0</span>:                                # %entry</span><br><span class=\"line\">\tcmpl\t%esi, %edi</span><br><span class=\"line\">\tmovl\t%edi, <span class=\"number\">-4</span>(%rsp)          # <span class=\"number\">4</span>-byte Spill</span><br><span class=\"line\">\tmovl\t%esi, <span class=\"number\">-8</span>(%rsp)          # <span class=\"number\">4</span>-byte Spill</span><br><span class=\"line\">\tjle\t.LBB0_2</span><br><span class=\"line\"># %bb<span class=\"number\">.1</span>:                                # %btrue</span><br><span class=\"line\">\tmovl\t<span class=\"number\">-4</span>(%rsp), %eax          # <span class=\"number\">4</span>-byte Reload</span><br><span class=\"line\">\tmovl\t%eax, <span class=\"number\">-12</span>(%rsp)         # <span class=\"number\">4</span>-byte Spill</span><br><span class=\"line\">\tjmp\t.LBB0_3</span><br><span class=\"line\">.LBB0_2:                                # %bfalse</span><br><span class=\"line\">\tmovl\t<span class=\"number\">-8</span>(%rsp), %eax          # <span class=\"number\">4</span>-byte Reload</span><br><span class=\"line\">\tmovl\t%eax, <span class=\"number\">-12</span>(%rsp)         # <span class=\"number\">4</span>-byte Spill</span><br><span class=\"line\">\tjmp\t.LBB0_3</span><br><span class=\"line\">.LBB0_3:                                # %end</span><br><span class=\"line\">\tmovl\t<span class=\"number\">-12</span>(%rsp), %eax         # <span class=\"number\">4</span>-byte Reload</span><br><span class=\"line\">\tretq</span><br></pre></td></tr></table></figure>\n<p>汇编里是实现就是每一条分支都往 <code>-12(%rsp)</code>  上放置数据，然后 end 分支读取。</p>\n",
            "tags": [
                "llvm"
            ]
        }
    ]
}