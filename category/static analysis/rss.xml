<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Squirre17 Blog • Posts by &#34;static analysis&#34; category</title>
        <link>https://Squirre17.github.io</link>
        <description>introvert</description>
        <language>en</language>
        <pubDate>Thu, 03 Nov 2022 19:12:15 +0800</pubDate>
        <lastBuildDate>Thu, 03 Nov 2022 19:12:15 +0800</lastBuildDate>
        <category>pwn</category>
        <category>llvm</category>
        <category>Linux</category>
        <category>writeup</category>
        <category>Blockchain</category>
        <category>User state</category>
        <category>IoT</category>
        <category>Kernel</category>
        <category>Ghidra</category>
        <category>virtualization</category>
        <category>afl</category>
        <category>debugger</category>
        <category>Kernel state</category>
        <category>Tips</category>
        <item>
            <guid isPermalink="true">https://squirre17.github.io/2022/11/03/afl-forkserver-maneuver/</guid>
            <title>afl-forkserver-maneuver</title>
            <link>https://squirre17.github.io/2022/11/03/afl-forkserver-maneuver/</link>
            <category>afl</category>
            <pubDate>Thu, 03 Nov 2022 19:12:15 +0800</pubDate>
            <description><![CDATA[ &lt;h1 id=&#34;forkserver的目的&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#forkserver的目的&#34;&gt;#&lt;/a&gt; forkserver 的目的&lt;/h1&gt;
&lt;p&gt;参见 &lt;a href=&#34;https://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html&#34;&gt;lcamtuf.blogspot&lt;/a&gt;&lt;br&gt;
 如果每次由 fuzzer 来进行 fork-execve 那么每次目标程序都得进装载器链接器和动态加载库打一套 十分浪费时间。&lt;br&gt;
但是 如果我们劫持了目标程序的_start 让目标程序一开始执行我们写入的 forkserver 代码，这样就能在装载之后通过 COW 实现低成本的 fork。&lt;br&gt;
也就是 forkserver 本身就注入到目标程序里面去了，作为目标程序的起始点不断的进行 fork。&lt;br&gt;
&lt;img src=&#34;/2022/11/03/afl-forkserver-maneuver/mechanism.png&#34; alt&gt;&lt;/p&gt;
&lt;h1 id=&#34;trampoline&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#trampoline&#34;&gt;#&lt;/a&gt; trampoline&lt;/h1&gt;
&lt;p&gt;这个被插桩到每个基本块之前&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;type&#34;&gt;const&lt;/span&gt; u8* trampoline_fmt_64 =&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;/* --- AFL TRAMPOLINE (64-BIT) --- */\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;.align 4\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;leaq -(128+24)(%%rsp), %%rsp\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;movq %%rdx,  0(%%rsp)\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;movq %%rcx,  8(%%rsp)\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;movq %%rax, 16(%%rsp)\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;movq $0x%08x, %%rcx\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;call __afl_maybe_log\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;movq 16(%%rsp), %%rax\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;movq  8(%%rsp), %%rcx\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;movq  0(%%rsp), %%rdx\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;leaq (128+24)(%%rsp), %%rsp\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;/* --- END --- */\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;string&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;将当前 rsp 下降 (128+24)&lt;/li&gt;
&lt;li&gt;rdx rcx rax 分别保存在 rsp 上面一丢丢&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;R(MAP_SIZE)&lt;/code&gt;  这个随机数 (0-65535) 给到 rcx 调用__afl_maybe_log (这个随机数是基本块标号，编译时确定)&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;main_payload_64&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#main_payload_64&#34;&gt;#&lt;/a&gt; main_payload_64&lt;/h1&gt;
&lt;p&gt;这个主要是注入大量函数逻辑&lt;/p&gt;
&lt;h2 id=&#34;__afl_maybe_log&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#__afl_maybe_log&#34;&gt;#&lt;/a&gt; __afl_maybe_log&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;__afl_maybe_log:\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  lahf\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  seto  %al\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq  __afl_area_ptr(%rip), %rdx\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  testq %rdx, %rdx\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  je    __afl_setup\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;__afl_store:\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;lahf : load to ah from eflags&lt;/li&gt;
&lt;li&gt;seto : set to 1 if target byte overflow&lt;/li&gt;
&lt;li&gt;如果 &lt;code&gt;__afl_area_ptr&lt;/code&gt;  里没有东西 就跳转到 &lt;code&gt;__afl_setup&lt;/code&gt;  (setup 属于共享内存没被初始化的情况，第一次 if 才会走到里面去)&lt;/li&gt;
&lt;li&gt;否则就进行 &lt;code&gt;__afl_store&lt;/code&gt; &lt;br&gt;
 其中 &lt;code&gt;__afl_area_ptr&lt;/code&gt;  是共享内存的指针 attach 上 fuzzer 创建的。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;__afl_store&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#__afl_store&#34;&gt;#&lt;/a&gt; __afl_store&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;__afl_store:\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  xorq __afl_prev_loc(%rip), %rcx\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  xorq %rcx, __afl_prev_loc(%rip)\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  shrq $1, __afl_prev_loc(%rip)\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  incb (%rdx, %rcx, 1)\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;__afl_return:\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  addb $127, %al\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  sahf\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  ret\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;为了验证这个原理，上 gdb 调试一下，随便编译一个函数 打断点在 log 那 然后由于通信建立不起来 需要改 prev loc 的内存&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;gef➤  set &amp;#123;int&amp;#125;&amp;amp;__afl_area_ptr=1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gef➤  x/4gx &amp;amp;__afl_area_ptr&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x4040a0 &amp;lt;__afl_area_ptr&amp;gt;:      0x0000000000000001      0x0000000000000001&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;0x4040b0 &amp;lt;__afl_fork_pid&amp;gt;:      0x0000000000000000      0x0000000000000001&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;→   0x4017a0 &amp;lt;__afl_store+0&amp;gt;  xor    rcx, QWORD PTR [rip+0x2901]        # 0x4040a8 &amp;lt;__afl_prev_loc&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    0x4017a7 &amp;lt;__afl_store+7&amp;gt;  xor    QWORD PTR [rip+0x28fa], rcx        # 0x4040a8 &amp;lt;__afl_prev_loc&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    0x4017ae &amp;lt;__afl_store+14&amp;gt; shr    QWORD PTR [rip+0x28f3], 1        # 0x4040a8 &amp;lt;__afl_prev_loc&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    0x4017b5 &amp;lt;__afl_store+21&amp;gt; inc    BYTE PTR [rdx+rcx*1]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实就是  &lt;code&gt;__afl_prev_loc = __afl_prev_loc ^ rcx ^ __afl_prev_loc = rcx&lt;/code&gt;  就是一个赋值的 trick&lt;br&gt;
rcx 是这一块地址的标号 在操作之后变成了 上一块地址标号 ^ 当前本块地址标号、&lt;br&gt;
上一块地址标号变成了 本块地址标号 &amp;gt;&amp;gt; 1。&lt;br&gt;
rdx  &lt;code&gt;__afl_area_ptr(%rip), %rdx&lt;/code&gt;  就是共享内存指针了。&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;cur_location = &amp;lt;COMPILE_TIME_RANDOM&amp;gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;shared_mem[cur_location ^ prev_location]++; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;prev_location = cur_location &amp;gt;&amp;gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;右移是为了区分 A -&amp;gt; B or B -&amp;gt; A or X -&amp;gt; X.&lt;/p&gt;
&lt;h2 id=&#34;__afl_setup&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#__afl_setup&#34;&gt;#&lt;/a&gt; __afl_setup&lt;/h2&gt;
&lt;p&gt;最重要的部分就是这个 shmat 的调用，attach 到 fuzzer 里 setup 的 shm&lt;br&gt;
 共享内存指针保存在 &lt;code&gt;__afl_area_ptr&lt;/code&gt;  中&lt;/p&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  xorq %rdx, %rdx   /* shmat flags    */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  xorq %rsi, %rsi   /* requested addr */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq %rax, %rdi   /* SHM ID         */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CALL_L64(&amp;quot;shmat&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  cmpq $-1, %rax\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  je   __afl_setup_abort\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  /* Store the address of the SHM region. */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq %rax, %rdx\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq %rax, __afl_area_ptr(%rip)\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;__afl_forkserver&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#__afl_forkserver&#34;&gt;#&lt;/a&gt; __afl_forkserver&lt;/h2&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;__afl_forkserver:\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  pushq %rdx\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  pushq %rdx\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq $4, %rdx               /* length    */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  leaq __afl_temp(%rip), %rsi /* data      */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq $&amp;quot; STRINGIFY((FORKSRV_FD + 1)) &amp;quot;, %rdi       /* file desc */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CALL_L64(&amp;quot;write&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  cmpq $4, %rax\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  jne  __afl_fork_resume\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;__afl_fork_wait_loop:\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq $4, %rdx               /* length    */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  leaq __afl_temp(%rip), %rsi /* data      */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq $&amp;quot; STRINGIFY(FORKSRV_FD) &amp;quot;, %rdi             /* file desc */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CALL_L64(&amp;quot;read&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  cmpq $4, %rax\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  jne  __afl_die\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;存入两次 &lt;code&gt;__afl_area_ptr&lt;/code&gt;  的指针&lt;/li&gt;
&lt;li&gt;STRINGIFY ((FORKSRV_FD + 1)) 就是 # stringify&lt;/li&gt;
&lt;li&gt;先写信息给 fuzzer 中去（写什么应该关系不大 就代表着来信息了）&lt;/li&gt;
&lt;li&gt;然后从 forkserver 中读取 fuzzer 传输来的控制信息到 &lt;code&gt;__afl_temp&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&#34;highlight plaintext&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;CALL_L64(&amp;quot;fork&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  cmpq $0, %rax\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  jl   __afl_die\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  je   __afl_fork_resume\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movl %eax, __afl_fork_pid(%rip)\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq $4, %rdx                   /* length    */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  leaq __afl_fork_pid(%rip), %rsi /* data      */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq $&amp;quot; STRINGIFY((FORKSRV_FD + 1)) &amp;quot;, %rdi             /* file desc */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CALL_L64(&amp;quot;write&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq $0, %rdx                   /* no flags  */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  leaq __afl_temp(%rip), %rsi     /* status    */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq __afl_fork_pid(%rip), %rdi /* PID       */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CALL_L64(&amp;quot;waitpid&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  cmpq $0, %rax\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  jle  __afl_die\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq $4, %rdx               /* length    */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  leaq __afl_temp(%rip), %rsi /* data      */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  movq $&amp;quot; STRINGIFY((FORKSRV_FD + 1)) &amp;quot;, %rdi         /* file desc */\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;CALL_L64(&amp;quot;write&amp;quot;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;quot;  jmp  __afl_fork_wait_loop\n&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;fork 出目标程序的子进程 跳转到 &lt;code&gt;__afl_fork_resume&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;对于 forkserver 本 f，保存子进程 pid 到 &lt;code&gt;__afl_fork_pid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;然后写给 fuzzer&lt;/li&gt;
&lt;li&gt;waitpid 等待子进程结束&lt;/li&gt;
&lt;li&gt;结束后吧 status 写回给 fuzzer，跳转回 &lt;code&gt;__afl_fork_wait_loop&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;__afl_fork_resume&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#__afl_fork_resume&#34;&gt;#&lt;/a&gt; __afl_fork_resume&lt;/h2&gt;
&lt;p&gt;这里主要是 由 forkserver fork 出来的 child 是要执行目标进程的，就需要恢复由于执行 forkserver 而压入的上下文以及关掉两个通信的文件描述符。&lt;br&gt;
所以这里就是简单的恢复上下文，关闭，执行正常逻辑代码。&lt;/p&gt;
&lt;h1 id=&#34;summary&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#summary&#34;&gt;#&lt;/a&gt; summary&lt;/h1&gt;
&lt;p&gt;个人画的总结图，还可以吧？&lt;br&gt;
&lt;img src=&#34;/2022/11/03/afl-forkserver-maneuver/mydraw.png&#34; alt&gt;&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://squirre17.github.io/2022/10/26/Ghidra-INDIRECT-explanation/</guid>
            <title>Ghidra-INDIRECT-explanation</title>
            <link>https://squirre17.github.io/2022/10/26/Ghidra-INDIRECT-explanation/</link>
            <category>Ghidra</category>
            <pubDate>Wed, 26 Oct 2022 18:05:02 +0800</pubDate>
            <description><![CDATA[ &lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;undefined4 &lt;span class=&#34;title function_&#34;&gt;FUN_000114b8&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;void&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  undefined4 in_r3;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;built_in&#34;&gt;printf&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s(%d)\n&amp;quot;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;quot;part_data_end&amp;quot;&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0x7d&lt;/span&gt;,in_r3,in_r3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;output result as following (pcode-refined)&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(ram, 0x114d4, 4) INDIRECT (ram, 0x114d4, 4) , (const, 0x15, 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, 0x114d8, 4) INDIRECT (ram, 0x114d8, 4) , (const, 0x15, 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ---  CALL (ram, 0x10ba4, 8) , (ram, 0x114d8, 4) , (ram, 0x114d4, 4) , (const, 0x7d, 4) , (register, 0x2c, 4) , (register, 0x2c, 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(register, 0x20, 4) COPY (const, 0x0, 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, 0x114d4, 4) COPY (ram, 0x114d4, 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, 0x114d8, 4) COPY (ram, 0x114d8, 4)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ---  RETURN (const, 0x0, 4) , (register, 0x20, 4)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;M4rsuri’s explanation(&lt;a href=&#34;https://github.com/NationalSecurityAgency/ghidra/issues/2744&#34;&gt;INDIRECT pcode op, input1 misunderstood · Issue #2744 · NationalSecurityAgency/ghidra · GitHub&lt;/a&gt;)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;I think that INDIRECT just indicates the varnode in output can be affected by the pcode indicated by it&#39;s input1.So it&#39;s impossible for a varnode to be affected when it&#39;s both not the output of an instruction and it&#39;s not associated with the instruction through an INDIRECT.
In other words, the varnodes being the output of all INDIRECTs associated with an instruction is the over-approximation of all varnodes that may be affected by the execution of this instruction. Only CALL/CALLIND instructions can have side affects because we need to take the execution of their corresponding subroutines into consideration. So INDIRECT instructions only appear before CALL/CALLIND instructions.
I wonder if my understanding is proper.
Thank you.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;INDIRECT pass input0 to output, but output be affected by some pcode indicated by input1 possibly.&lt;br&gt;
Affect means “be changed” and so on in a narrow sense.&lt;br&gt;
because we don’t know what the subroutine indicated by subsequent CALL pcode that take out our parameter’s address will do .Isn’t it? Maybe it can modify the content in the corresponding address. So it’s value is indirected when machine is executed to the next COPY pcode and pass it to other varnode.(so INDIRECT meaning - varnode passed through other subroutine before reaching its destination)&lt;br&gt;
 &lt;code&gt;A special address space indicates input1&#39;s use as an internal reference encoding&lt;/code&gt;  simply means the Seqnum which indicates the sequence number of anyone pcode.&lt;/p&gt;
&lt;p&gt;if u print out above CALL pcode’s seqnum, u will find it exactly is  &lt;code&gt;0x15&lt;/code&gt;  (const, 0x15, 4).&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;(ram, &lt;span class=&#34;number&#34;&gt;0x114c8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;67&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, &lt;span class=&#34;number&#34;&gt;0x114d4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) INDIRECT (ram, &lt;span class=&#34;number&#34;&gt;0x114d4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) , (&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x15&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, &lt;span class=&#34;number&#34;&gt;0x114c8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;69&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, &lt;span class=&#34;number&#34;&gt;0x114d8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) INDIRECT (ram, &lt;span class=&#34;number&#34;&gt;0x114d8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) , (&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x15&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, &lt;span class=&#34;number&#34;&gt;0x114c8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)                                             &amp;lt;&amp;lt;- &lt;span class=&#34;number&#34;&gt;21&lt;/span&gt; = &lt;span class=&#34;number&#34;&gt;0x15&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ---  CALL (ram, &lt;span class=&#34;number&#34;&gt;0x10ba4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;) , (ram, &lt;span class=&#34;number&#34;&gt;0x114d8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) , (ram, &lt;span class=&#34;number&#34;&gt;0x114d4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) , (&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x7d&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) , (&lt;span class=&#34;keyword&#34;&gt;register&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x2c&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) , (&lt;span class=&#34;keyword&#34;&gt;register&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x2c&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, &lt;span class=&#34;number&#34;&gt;0x114cc&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;29&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;register&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) COPY (&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, &lt;span class=&#34;number&#34;&gt;0x114d0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;68&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, &lt;span class=&#34;number&#34;&gt;0x114d4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) COPY (ram, &lt;span class=&#34;number&#34;&gt;0x114d4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, &lt;span class=&#34;number&#34;&gt;0x114d0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;70&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, &lt;span class=&#34;number&#34;&gt;0x114d8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) COPY (ram, &lt;span class=&#34;number&#34;&gt;0x114d8&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;(ram, &lt;span class=&#34;number&#34;&gt;0x114d0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;44&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; ---  RETURN (&lt;span class=&#34;type&#34;&gt;const&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;) , (&lt;span class=&#34;keyword&#34;&gt;register&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0x20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Thanks M4tsuri for his help.&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://squirre17.github.io/2022/10/18/llvm-init/</guid>
            <title>llvm-init</title>
            <link>https://squirre17.github.io/2022/10/18/llvm-init/</link>
            <category>llvm</category>
            <pubDate>Tue, 18 Oct 2022 10:27:10 +0800</pubDate>
            <description><![CDATA[ &lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt install lld-12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo ln -s /lib/llvm-9/bin/llc /bin/llc&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo ln -s /lib/llvm-9/bin/opt /bin/opt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;官方文档：&lt;a href=&#34;https://llvm.org/docs/LangRef.html&#34;&gt;LLVM Language Reference Manual — LLVM 16.0.0git documentation&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;clang -Xclang -ast-dump -fsyntax-only test.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成 AST&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-S                      Only run preprocess and compilation steps&lt;/li&gt;
&lt;li&gt;-emit-llvm         Use the LLVM representation for assembler and object files&lt;/li&gt;
&lt;li&gt;-c                      Only run preprocess, compile, and assemble steps （生成字节码的 bc 文件）&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;clang -S -emit-llvm test.c &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成的 ir 中&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;define dso_local i32 @main() #&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; = alloca i32, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  store i32 &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, i32* %&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ret i32 &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果开启优化&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;clang -S -emit-llvm -O3 test.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;会直接变成&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;define dso_local i32 @main() local_unnamed_addr #&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ret i32 &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后用 llc 生成汇编&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;llc test.ll&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;ll 到 bc 文件可以用 llvm-as&lt;br&gt;
 反过来用 llvm-dis&lt;br&gt;
 注意，ll 和 bc 和内存中的形式是等价的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dso_local&lt;/code&gt;  是一个 Runtime Preemption 说明符，表明该函数会在同一个链接单元（即该函数所在的文件以及包含的头文件）内解析符号。&lt;/p&gt;
&lt;p&gt;对于&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;// main.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; first, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; second)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; first + second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; foo(a, b);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;alloca 就是在栈中分配空间&lt;/li&gt;
&lt;li&gt;先把传入的值放入栈中再拿出来（嫩麻烦&lt;/li&gt;
&lt;li&gt;nsw : no signed wrap&lt;/li&gt;
&lt;li&gt;所有的全局变量都以 @ 为前缀&lt;/li&gt;
&lt;li&gt;这里 &lt;code&gt;#0&lt;/code&gt;  与之后的 &lt;code&gt;attributes #0&lt;/code&gt;  相对应&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;; ModuleID = &lt;span class=&#34;string&#34;&gt;&amp;#x27;main.c&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;source_filename = &lt;span class=&#34;string&#34;&gt;&amp;quot;main.c&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;target datalayout = &lt;span class=&#34;string&#34;&gt;&amp;quot;e-m:e-i64:64-f80:128-n8:16:32:64-S128&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;target triple = &lt;span class=&#34;string&#34;&gt;&amp;quot;x86_64-pc-linux-gnu&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;@a = dso_local global i32 &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;; Function Attrs: noinline nounwind optnone uwtable&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;define dso_local i32 @foo(i32, i32) #&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; = alloca i32, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; = alloca i32, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  store i32 %&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, i32* %&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  store i32 %&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, i32* %&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; = load i32, i32* %&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; = load i32, i32* %&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; = add nsw i32 %&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, %&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ret i32 %&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;; Function Attrs: noinline nounwind optnone uwtable&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;define dso_local i32 @main() #&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; = alloca i32, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; = alloca i32, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  store i32 &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, i32* %&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  store i32 &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, i32* %&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; = load i32, i32* @a, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; = load i32, i32* %&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; = call i32 @foo(i32 %&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, i32 %&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ret i32 %&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;attributes #&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; = &amp;#123; noinline nounwind optnone uwtable &lt;span class=&#34;string&#34;&gt;&amp;quot;correctly-rounded-divide-sqrt-fp-math&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;disable-tail-calls&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;less-precise-fpmad&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;min-legal-vector-width&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;no-frame-pointer-elim&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;no-frame-pointer-elim-non-leaf&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;no-infs-fp-math&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;no-jump-tables&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;no-nans-fp-math&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;no-signed-zeros-fp-math&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;no-trapping-math&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;stack-protector-buffer-size&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;8&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;target-cpu&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;x86-64&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;target-features&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;+cx8,+fxsr,+mmx,+sse,+sse2,+x87&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;unsafe-fp-math&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span class=&#34;string&#34;&gt;&amp;quot;use-soft-float&amp;quot;&lt;/span&gt;=&lt;span class=&#34;string&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;!llvm.module.flags = !&amp;#123;!&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;!llvm.ident = !&amp;#123;!&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;!&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; = !&amp;#123;i32 &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, !&lt;span class=&#34;string&#34;&gt;&amp;quot;wchar_size&amp;quot;&lt;/span&gt;, i32 &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;!&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; = !&amp;#123;!&lt;span class=&#34;string&#34;&gt;&amp;quot;clang version 9.0.1-12 &amp;quot;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于库外函数 要使用就需要 declare 这个函数的签名&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;declare i32 @getint()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;条件分支&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#条件分支&#34;&gt;#&lt;/a&gt; 条件分支&lt;/h2&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//if.c&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a = getint();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b = getint();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; c = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (a == b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c = &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        c = &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    putint(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;define dso_local i32 @main() #&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; = alloca i32, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; = alloca i32, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; = alloca i32, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; = alloca i32, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  store i32 &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, i32* %&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt; = call i32 (...) @getint()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  store i32 %&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, i32* %&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt; = call i32 (...) @getint()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  store i32 %&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;, i32* %&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  store i32 &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, i32* %&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt; = load i32, i32* %&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt; = load i32, i32* %&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt; = icmp eq i32 %&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;, %&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  br i1 %&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;, label %&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, label %&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;:                                               ; preds = %&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  store i32 &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;, i32* %&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  br label %&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;:                                               ; preds = %&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  store i32 &lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, i32* %&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  br label %&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;12&lt;/span&gt;:                                               ; preds = %&lt;span class=&#34;number&#34;&gt;11&lt;/span&gt;, %&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt; = load i32, i32* %&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, align &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;14&lt;/span&gt; = call i32 (i32, ...) bitcast (i32 (...)* @putint to i32 (i32, ...)*)(i32 %&lt;span class=&#34;number&#34;&gt;13&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ret i32 &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;语法 &lt;code&gt;br + 标志位 + truelabel + falselabel&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;cfg图&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#cfg图&#34;&gt;#&lt;/a&gt; cfg 图&lt;/h1&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;max&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; a, &lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; b)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (a &amp;gt; b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; a;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125; &lt;span class=&#34;keyword&#34;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;()&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; max(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;opt -dot-cfg test.ll&lt;/code&gt;  生成&lt;/p&gt;
&lt;p&gt;为了可视化&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sudo apt-get install -y graphviz-doc libgraphviz-dev graphviz&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;dot .max.dot  -Tpng -o max.png&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&#34;/2022/10/18/llvm-init/image-20221018103046162.png&#34; alt=&#34;image-20221018103046162&#34;&gt;&lt;br&gt;
 如果在 clang 的时候用 O3 编译&lt;br&gt;
这里就变成了选择函数&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;define dso_local i32 @max(i32, i32) local_unnamed_addr #&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; = icmp sgt i32 %&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, %&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt; = select i1 %&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, i32 %&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, i32 %&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ret i32 %&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;sgt: signed greater than (&lt;a href=&#34;https://releases.llvm.org/2.7/docs/LangRef.html&#34;&gt;LLVM Assembly Language Reference Manual&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;The ‘select’ instruction is used to choose one value based on a condition, without branching.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;ssa-phi-node&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#ssa-phi-node&#34;&gt;#&lt;/a&gt; SSA &amp;amp; phi node&lt;/h1&gt;
&lt;p&gt;这个概念在 ghidra，南大静态分析，各种文章里都看过了。。&lt;br&gt;
SSA form enables and simplifies a vast number of compiler optimizations, and is the de-facto standard for intermediate representations in compilers of imperative programming languages.&lt;br&gt;
 看这个就行 &lt;a href=&#34;https://carstein.github.io/2020/10/22/ssa-explained.html&#34;&gt;SSA Explained&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;define i32 @max(i32 %a, i32 %b) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;entry:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt; = icmp sgt i32 %a, %b&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  br i1 %&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, label %btrue, label %bfalse&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;btrue:                                      ; preds = %&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  br label %end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;bfalse:                                     ; preds = %&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  br label %end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;end:                                     ; preds = %btrue, %bfalse&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  %retval = phi i32 [%a, %btrue], [%b, %bfalse]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  ret i32 %retval&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;依据控制流分支选择变量。&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;llc -O0 -filetype=asm test.ll&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight c&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;# %bb&lt;span class=&#34;number&#34;&gt;.0&lt;/span&gt;:                                # %entry&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	cmpl	%esi, %edi&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl	%edi, &lt;span class=&#34;number&#34;&gt;-4&lt;/span&gt;(%rsp)          # &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;-byte Spill&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl	%esi, &lt;span class=&#34;number&#34;&gt;-8&lt;/span&gt;(%rsp)          # &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;-byte Spill&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jle	.LBB0_2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;# %bb&lt;span class=&#34;number&#34;&gt;.1&lt;/span&gt;:                                # %btrue&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl	&lt;span class=&#34;number&#34;&gt;-4&lt;/span&gt;(%rsp), %eax          # &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;-byte Reload&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl	%eax, &lt;span class=&#34;number&#34;&gt;-12&lt;/span&gt;(%rsp)         # &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;-byte Spill&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jmp	.LBB0_3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.LBB0_2:                                # %bfalse&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl	&lt;span class=&#34;number&#34;&gt;-8&lt;/span&gt;(%rsp), %eax          # &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;-byte Reload&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl	%eax, &lt;span class=&#34;number&#34;&gt;-12&lt;/span&gt;(%rsp)         # &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;-byte Spill&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	jmp	.LBB0_3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;.LBB0_3:                                # %end&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	movl	&lt;span class=&#34;number&#34;&gt;-12&lt;/span&gt;(%rsp), %eax         # &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;-byte Reload&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	retq&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;汇编里是实现就是每一条分支都往 &lt;code&gt;-12(%rsp)&lt;/code&gt;  上放置数据，然后 end 分支读取。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
