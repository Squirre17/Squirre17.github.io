<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>Squirre17 Blog • Posts by &#34;tips&#34; category</title>
        <link>https://Squirre17.github.io</link>
        <description>萌豚即是正义</description>
        <language>en</language>
        <pubDate>Tue, 16 Aug 2022 16:42:50 +0800</pubDate>
        <lastBuildDate>Tue, 16 Aug 2022 16:42:50 +0800</lastBuildDate>
        <category>IoT</category>
        <category>Linux</category>
        <category>User state</category>
        <category>Tips</category>
        <category>Blockchain</category>
        <category>Kernel state</category>
        <category>writeup</category>
        <category>virtualization</category>
        <category>llvm</category>
        <category>Ghidra</category>
        <item>
            <guid isPermalink="true">https://squirre17.github.io/2022/08/16/pwn-in-WSL-Pwsh-and-Vscode/</guid>
            <title>pwn in WSL Pwsh and Vscode</title>
            <link>https://squirre17.github.io/2022/08/16/pwn-in-WSL-Pwsh-and-Vscode/</link>
            <category>Tips</category>
            <pubDate>Tue, 16 Aug 2022 16:42:50 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;背景提要&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#背景提要&#34;&gt;#&lt;/a&gt; 背景提要&lt;/h2&gt;
&lt;p&gt;回校后来到实验室 借用了下姚佬的 2k 大屏 发现确实舒服 但是有个致命的问题 键盘输入和显示器显示有明显的延迟&lt;br&gt;
但是在主机就没事&lt;br&gt;
加上之前也厌烦了在主机和虚拟机之间划来划去 怪麻烦的&lt;br&gt;
就想有没有可替代的方案 让我不需要进虚拟机（将其当个远程服务器）&lt;br&gt;
就能舒舒服服的做 pwn 题&lt;/p&gt;
&lt;p&gt;然后发现了&lt;a href=&#34;https://blog.csome.cc/p/2022CISCN-hn-wp/&#34;&gt; Csome&lt;/a&gt; 师傅的博客 是用 powershell 在 wsl 进行的&lt;br&gt;
然后我审计了一下 pwntools 的源码&lt;br&gt;
确实会启动一个 terminal 进程 将我们输入的参数进去执行&lt;br&gt;
在 window 下启动的进程是 &lt;code&gt;cmd.exe&lt;/code&gt;  是挂载在 &lt;code&gt;/mnt&lt;/code&gt;  目录下&lt;br&gt;
但是由于是跨文件系统 打开实在太慢 （window 的程序要访问 linux 进程内部的内存空间 得先从 Linux 切进 window&lt;br&gt;
 在 window 上打开 &lt;code&gt;cmd.exe&lt;/code&gt;  再切回 Linux）&lt;/p&gt;
&lt;p&gt;因此寻找别的替代方案&lt;br&gt;
正好也是 defcon 时期 无聊刷推的时候看到&lt;a href=&#34;https://www.youtube.com/watch?v=8QAGLdY6bDw&#34;&gt; DEF CON LiveCTF 2022 - Day 2 - YouTube&lt;/a&gt;&lt;br&gt;
 中间的 winpwn 玩家采取的方法&lt;br&gt;
其实也就是 pause 等待进程 attach 罢了 不过这个足以解决我的一切问题&lt;/p&gt;
&lt;h2 id=&#34;pwn脚本中定义个函数&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#pwn脚本中定义个函数&#34;&gt;#&lt;/a&gt; pwn 脚本中定义个函数&lt;/h2&gt;
&lt;p&gt;举例 这里定义了一个 dbg 函数 可以将我们传入的断点和 set 信息统统写入 &lt;code&gt;/tmp/gdbscript&lt;/code&gt;  作为 gdb 启动信息&lt;br&gt;
（pwntools 内部就是这么实现的 依葫芦画瓢&lt;br&gt;
 dft 是预定义的一些信息 比如 &lt;code&gt;set $a=0xdeedbeaf&lt;/code&gt;  这些需要每次都写入的就写到 dft 里面去&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; pwn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; *&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;context(os=&lt;span class=&#34;string&#34;&gt;&amp;quot;Linux&amp;quot;&lt;/span&gt;,arch=&lt;span class=&#34;string&#34;&gt;&amp;quot;amd64&amp;quot;&lt;/span&gt;,log_level=&lt;span class=&#34;string&#34;&gt;&amp;quot;debug&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;p = process(&lt;span class=&#34;string&#34;&gt;&amp;quot;./emulator&amp;quot;&lt;/span&gt;, env=&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;LD_PRELOAD&amp;quot;&lt;/span&gt;: &lt;span class=&#34;string&#34;&gt;&amp;quot;./libunicorn.so.1&amp;quot;&lt;/span&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;se      = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; data               :p.send(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sa      = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; delim,data         :p.sendafter(delim, data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sl      = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; data               :p.sendline(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sla     = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; delim,data         :p.sendlineafter(delim, data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sea     = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; delim,data         :p.sendafter(delim, data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rc      = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; numb=&lt;span class=&#34;number&#34;&gt;4096&lt;/span&gt;          :p.recv(numb)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rl      = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt;                    :p.recvline()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ru      = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; delims             :p.recvuntil(delims)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;uu32    = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; data               :u32(data.ljust(&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;b&amp;#x27;\x00&amp;#x27;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;uu64    = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; data               :u64(data.ljust(&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;b&amp;#x27;\x00&amp;#x27;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;info    = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; tag, addr          :p.info(&lt;span class=&#34;string&#34;&gt;&amp;#x27;======&amp;gt;&amp;#x27;&lt;/span&gt;+tag + &lt;span class=&#34;string&#34;&gt;&amp;#x27;: &amp;#123;:#x&amp;#125;&amp;#x27;&lt;/span&gt;.&lt;span class=&#34;built_in&#34;&gt;format&lt;/span&gt;(addr))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ir      = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt;                    :p.interactive()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sc      = &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; s, addr            :success(s + &lt;span class=&#34;string&#34;&gt;&amp;quot; =&amp;gt; &amp;quot;&lt;/span&gt; + &lt;span class=&#34;built_in&#34;&gt;hex&lt;/span&gt;(addr))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ps		= &lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; 					:pause()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;dft = [&lt;span class=&#34;string&#34;&gt;&amp;quot;b *0x1234&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;b *0x7890000&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;dbg&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;s=[&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;]&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	a = dft + s&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	f = &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;/tmp/gdbscript&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	a = &lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x:x + &lt;span class=&#34;string&#34;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;, a))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	f.writelines(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	f.close()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ps()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title function_&#34;&gt;exp&lt;/span&gt;():&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	libc = ELF(&lt;span class=&#34;string&#34;&gt;&amp;quot;/lib/x86_64-linux-gnu/libc.so.6&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	dbg([&lt;span class=&#34;string&#34;&gt;&amp;quot;b *0xdeedbeaf&amp;quot;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; __name__ == &lt;span class=&#34;string&#34;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	exp()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	ir()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&#34;gdb的启动方式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#gdb的启动方式&#34;&gt;#&lt;/a&gt; gdb 的启动方式&lt;/h2&gt;
&lt;p&gt;执行 py 脚本 pause 挂起后&lt;br&gt;
由我们的 powershell 去 attach&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;gdb attach $(pidof procname) -x /tmp/gdbscript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;procname 是程序名&lt;/p&gt;
&lt;p&gt;或者更直接点 写个脚本 &lt;code&gt;pgdb&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight shell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;!/bin/sh&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;meta prompt_&#34;&gt;#&lt;/span&gt;&lt;span class=&#34;language-bash&#34;&gt;gdb attach $(pidof procname) -x /tmp/gdbscript&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;if [ $# -ne 1 ];then&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	echo &amp;quot;usage : pgdb procname&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	exit 1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;fi&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;pid=`pidof $1`&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gdb attach $pid -x /tmp/gdbscript&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;只需要 &lt;code&gt;pgdb procname&lt;/code&gt;  就能 attach 了&lt;/p&gt;
&lt;h2 id=&#34;工作流&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#工作流&#34;&gt;#&lt;/a&gt; 工作流&lt;/h2&gt;
&lt;p&gt;vscode 写 exp&lt;br&gt;
vscode terminal 进行 exp 的执行（最喜欢的 terminal&lt;br&gt;
powershell 进行 gdb&lt;br&gt;
&lt;img src=&#34;/2022/08/16/pwn-in-WSL-Pwsh-and-Vscode/20220816164008.png&#34; alt=&#34;Pasted image 20220816164008&#34;&gt;&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
