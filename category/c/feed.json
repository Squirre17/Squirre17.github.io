{
    "version": "https://jsonfeed.org/version/1",
    "title": "Squirre17 Blog • All posts by \"c\" category",
    "description": "萌豚即是正义",
    "home_page_url": "https://Squirre17.github.io",
    "items": [
        {
            "id": "https://squirre17.github.io/2022/10/18/shared-memory-and-semaphore-machenism/",
            "url": "https://squirre17.github.io/2022/10/18/shared-memory-and-semaphore-machenism/",
            "title": "shared-memory-and-semaphore-machenism",
            "date_published": "2022-10-18T06:57:37.000Z",
            "content_html": "<h1 id=\"分类\"><a class=\"markdownIt-Anchor\" href=\"#分类\">#</a> 分类</h1>\n<ul>\n<li>管道</li>\n<li>消息队列</li>\n<li>信号</li>\n<li>共享内存</li>\n<li>信号量</li>\n<li>套接字</li>\n</ul>\n<h1 id=\"共享内存\"><a class=\"markdownIt-Anchor\" href=\"#共享内存\">#</a> 共享内存</h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">shmget</span><span class=\"params\">(<span class=\"type\">key_t</span> key, <span class=\"type\">size_t</span> size, <span class=\"type\">int</span> shmflg)</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">shmat</span><span class=\"params\">(<span class=\"type\">int</span> shmid, <span class=\"type\">const</span> <span class=\"type\">void</span> *shmaddr, <span class=\"type\">int</span> shmflg)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">shmdt</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">void</span> *shmaddr)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">shmctl</span><span class=\"params\">(<span class=\"type\">int</span> shmid, <span class=\"type\">int</span> cmd, <span class=\"keyword\">struct</span> shmid_ds *buf)</span>;</span><br></pre></td></tr></table></figure>\n<pre><code>   shmget()  returns  the identifier of the System V shared memory segment associated with the value of the argument key.  It may be used either to obtain the identifier of a previously created shared memory segment  (when shmflg is zero and key does not have the value IPC_PRIVATE), or to create a new set.\n</code></pre>\n<p>shmflg 和文件的控制权限一样。<br>\n注意到如果 key 是 <code>IPC_PRIVATE</code> ，那就相当于匿名 shm，只能用于有亲属关系的进程通信。</p>\n<pre><code>   shmat()  attaches  the  System V shared memory segment identified by shmid to the address space of the calling process.  The attaching address is specified by shmaddr with one of the following criteria:\n</code></pre>\n<p>shmaddr 一般为空 让操作系统决定</p>\n<pre><code>   shmdt() detaches the shared memory segment located at the address specified by shmaddr from the address  space of the calling process.\n\n   shmctl()  performs  the control operation specified by cmd on the System V shared memory segment whose identifier is given in shmid.\n</code></pre>\n<p>删除共享内存用 <code>PC_RMID</code></p>\n<h2 id=\"实操1\"><a class=\"markdownIt-Anchor\" href=\"#实操1\">#</a> 实操 1</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PATHNAME <span class=\"string\">&quot;.&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROJ_ID 0x6666</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PAGE_SIZE 0x1000</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> shmid;</span><br><span class=\"line\">    <span class=\"type\">key_t</span> key = ftok(PATHNAME, PROJ_ID);</span><br><span class=\"line\">    assert(key != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    shmid = shmget(key, PAGE_SIZE, <span class=\"number\">0640</span>|IPC_CREAT);</span><br><span class=\"line\">    assert(shmid != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">char</span> *shmptr = shmat(shmid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(</span><br><span class=\"line\">        <span class=\"string\">&quot;shmptr is %p\\n&quot;</span></span><br><span class=\"line\">        <span class=\"string\">&quot;procid is %d\\n&quot;</span></span><br><span class=\"line\">        ,shmptr, getpid()</span><br><span class=\"line\">    );</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(shmptr, <span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">0x10</span>);</span><br><span class=\"line\">    getchar();</span><br><span class=\"line\">    shmdt(shmptr);</span><br><span class=\"line\">    <span class=\"type\">int</span> res = shmctl(shmid, IPC_RMID, <span class=\"number\">0</span>);</span><br><span class=\"line\">    assert(res != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>利用一个可以访问的目录创建 shmid（proj 号和当前目录可以返回一个唯一的 shmid）<br>\n在当前路径下创建一次共享内存 不删除的话就一直存在。</p>\n<p>用命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ipcs -m # 查看所有共享内存</span><br><span class=\"line\">ipcrm -m &lt;shmid&gt; # 删除一个共享内存</span><br></pre></td></tr></table></figure>\n<h2 id=\"实操2\"><a class=\"markdownIt-Anchor\" href=\"#实操2\">#</a> 实操 2</h2>\n<p>server.c 用来创建共享内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PATHNAME <span class=\"string\">&quot;.&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROJ_ID 0x6666</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PAGE_SIZE 0x1000</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">key_t</span> key = ftok(PATHNAME, PROJ_ID);</span><br><span class=\"line\">    assert(key != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> shmid;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((shmid = shmget(key, PAGE_SIZE, IPC_CREAT | IPC_EXCL | <span class=\"number\">0666</span>)) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;shmget&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *shmptr = shmat(shmid, <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i++ &lt; <span class=\"number\">26</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;client# %s\\n&quot;</span>,shmptr);</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shmdt(shmptr);</span><br><span class=\"line\">    sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">    assert(shmctl(shmid,IPC_RMID,<span class=\"literal\">NULL</span>) != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>client.c 用来连上共享内存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PATHNAME <span class=\"string\">&quot;.&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PROJ_ID 0x6666</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PAGE_SIZE 0x1000</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">key_t</span> key = ftok(PATHNAME,PROJ_ID);</span><br><span class=\"line\">    assert(key != <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> shmid = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((shmid = shmget(key, PAGE_SIZE, <span class=\"number\">0</span>)) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;shmget&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">exit</span>(<span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *shmptr = shmat(shmid,<span class=\"literal\">NULL</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; <span class=\"number\">26</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        shmptr[i] = <span class=\"string\">&#x27;A&#x27;</span> + i;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        shmptr[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shmdt(shmptr);</span><br><span class=\"line\">    sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/10/18/shared-memory-and-semaphore-machenism/1.png\" alt=\"1\"></p>\n<h1 id=\"信号量\"><a class=\"markdownIt-Anchor\" href=\"#信号量\">#</a> 信号量</h1>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">semget</span><span class=\"params\">(<span class=\"type\">key_t</span> key, <span class=\"type\">int</span> nsems, <span class=\"type\">int</span> semflg)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">semop</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"keyword\">struct</span> sembuf *sops, <span class=\"type\">size_t</span> nsops)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">semctl</span><span class=\"params\">(<span class=\"type\">int</span> semid, <span class=\"type\">int</span> semnum, <span class=\"type\">int</span> cmd, ...)</span>;</span><br></pre></td></tr></table></figure>\n<pre><code>   The  semget()  system  call  returns the System V semaphore set identifier associated with the argument key.\n</code></pre>\n<p>创建方法两种 一种用 key 里的 <code>IPC_PRIVATE</code> ，一种用 semflg 里的 <code>IPC_CREAT</code> <br>\nnsems 是信号量个数。</p>\n<p>semop 就是等待锁和释放锁<br>\n在 semctl 中 需要用到 <code>semun</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">semun</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span>              val;    <span class=\"comment\">/* Value for SETVAL */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">semid_ds</span> *<span class=\"title\">buf</span>;</span>    <span class=\"comment\">/* Buffer for IPC_STAT, IPC_SET */</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span>  *<span class=\"built_in\">array</span>;  <span class=\"comment\">/* Array for GETALL, SETALL */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">seminfo</span>  *__<span class=\"title\">buf</span>;</span>  <span class=\"comment\">/* Buffer for IPC_INFO</span></span><br><span class=\"line\"><span class=\"comment\">                                (Linux-specific) */</span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>semop 中 需要用到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span>&#123;</span></span><br><span class=\"line\">         <span class=\"type\">unsigned</span> <span class=\"type\">short</span> sem_num;  <span class=\"comment\">/* semaphore number */</span></span><br><span class=\"line\">         <span class=\"type\">short</span>          sem_op;   <span class=\"comment\">/* semaphore operation */</span></span><br><span class=\"line\">         <span class=\"type\">short</span>          sem_flg;  <span class=\"comment\">/* operation flags */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>sem_op 参数</strong>：</p>\n<ul>\n<li>sem_op &gt; 0          信号加上 sem_op 的值，表示进程释放控制的资源；</li>\n<li>sem_op = 0          如果没有设置 IPC_NOWAIT，则调用进程进入睡眠状态，直到信号量的值为 0；否则进程不回睡眠，直接返回 EAGAIN</li>\n<li>sem_op &lt; 0          信号加上 sem_op 的值。若没有设置 IPC_NOWAIT ，则调用进程阻塞，直到资源可用；否则进程直接返回 EAGAIN</li>\n</ul>\n</li>\n<li>\n<p><strong>sem_flg 参数</strong>：</p>\n<ul>\n<li>该参数可设置为 IPC_NOWAIT 或 SEM_UNDO 两种状态。只有将 sem_flg 指定为 SEM_UNDO 标志后，semadj （所指定信号量针对调用进程的调整值）才会更新。   此外，如果此操作指定 SEM_UNDO，系统更新过程中会撤消此信号灯的计数（semadj）。此操作可以随时进行 — 它永远不会强制等待的过程。调用进程必须有改变信号量集的权限。</li>\n</ul>\n</li>\n<li></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sys/shm.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;sys/sem.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ipc.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/sem.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CSEM</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">private:</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">semun</span>  // 用于信号灯操作的共同体。</span></span><br><span class=\"line\"><span class=\"class\">  &#123;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">semid_ds</span> *<span class=\"title\">buf</span>;</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">short</span> *arry;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"type\">int</span>  sem_id;  <span class=\"comment\">// 信号灯描述符。</span></span><br><span class=\"line\">public:</span><br><span class=\"line\">  <span class=\"type\">bool</span> <span class=\"title function_\">init</span><span class=\"params\">(<span class=\"type\">key_t</span> key)</span>; <span class=\"comment\">// 如果信号灯已存在，获取信号灯；如果信号灯不存在，则创建信号灯并初始化。</span></span><br><span class=\"line\">  <span class=\"type\">bool</span> <span class=\"title function_\">wait</span><span class=\"params\">()</span>;          <span class=\"comment\">// 等待信号灯挂出。</span></span><br><span class=\"line\">  <span class=\"type\">bool</span> <span class=\"title function_\">post</span><span class=\"params\">()</span>;          <span class=\"comment\">// 挂出信号灯。</span></span><br><span class=\"line\">  <span class=\"type\">bool</span> <span class=\"title function_\">destroy</span><span class=\"params\">()</span>;       <span class=\"comment\">// 销毁信号灯。</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">   CSEM sem;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// 用key值0x5000 初始信号灯。</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sem.init(<span class=\"number\">0x5000</span>)==<span class=\"literal\">false</span>) </span><br><span class=\"line\">    &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.init failed.\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.init ok\\n&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">// 等待信信号挂出，等待成功后，将持有锁。</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sem.wait() == <span class=\"literal\">false</span>) </span><br><span class=\"line\">    &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.wait failed.\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.wait ok\\n&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   sleep(<span class=\"number\">10</span>);  <span class=\"comment\">// 在sleep的过程中，运行其它的book259程序将等待锁。</span></span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">// 挂出信号灯，释放锁。</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sem.post() == <span class=\"literal\">false</span>) </span><br><span class=\"line\">    &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.post failed.\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.post ok\\n&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">// 销毁信号灯。</span></span><br><span class=\"line\">   <span class=\"comment\">// if (sem.destroy()==false) &#123; printf(&quot;sem.destroy failed.\\n&quot;); return -1; &#125;</span></span><br><span class=\"line\">   <span class=\"comment\">// printf(&quot;sem.destroy ok\\n&quot;);</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">CSEM::init</span><span class=\"params\">(<span class=\"type\">key_t</span> key)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取信号灯。</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (sem_id=semget(key,<span class=\"number\">1</span>,<span class=\"number\">0640</span>)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果信号灯不存在，创建它。</span></span><br><span class=\"line\">    <span class=\"comment\">// No semaphore set exists for key and semflg did not specify IPC_CREAT.</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (errno == ENOENT) </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( (sem_id=semget(key,<span class=\"number\">1</span>,<span class=\"number\">0640</span>|IPC_CREAT)) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">        &#123; perror(<span class=\"string\">&quot;init 1 semget()&quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"comment\">// 信号灯创建成功后，还需要把它初始化成可用的状态。</span></span><br><span class=\"line\">      <span class=\"class\"><span class=\"keyword\">union</span> <span class=\"title\">semun</span> <span class=\"title\">sem_union</span>;</span></span><br><span class=\"line\">      <span class=\"comment\">// 就是设置值为1</span></span><br><span class=\"line\">      sem_union.val = <span class=\"number\">1</span>;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (semctl(sem_id,<span class=\"number\">0</span>,SETVAL,sem_union) &lt;  <span class=\"number\">0</span>) </span><br><span class=\"line\">        &#123; perror(<span class=\"string\">&quot;init semctl()&quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123; perror(<span class=\"string\">&quot;init 2 semget()&quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">CSEM::destroy</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (semctl(sem_id,<span class=\"number\">0</span>,IPC_RMID) == <span class=\"number\">-1</span>) </span><br><span class=\"line\">    &#123; perror(<span class=\"string\">&quot;destroy semctl()&quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">CSEM::wait</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">sem_b</span>;</span></span><br><span class=\"line\">  sem_b.sem_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  sem_b.sem_op = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  sem_b.sem_flg = SEM_UNDO;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (semop(sem_id, &amp;sem_b, <span class=\"number\">1</span>) == <span class=\"number\">-1</span>) &#123; perror(<span class=\"string\">&quot;wait semop()&quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">CSEM::post</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">sem_b</span>;</span></span><br><span class=\"line\">  sem_b.sem_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  sem_b.sem_op = <span class=\"number\">1</span>;  </span><br><span class=\"line\">  sem_b.sem_flg = SEM_UNDO;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (semop(sem_id, &amp;sem_b, <span class=\"number\">1</span>) == <span class=\"number\">-1</span>) &#123; perror(<span class=\"string\">&quot;post semop()&quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个代码最重要的一点是，在 semop 为 - 1 这里<br>\n等待一个其他进程执行 <code>(semop(sem_id, &amp;sem_b, 1)</code>  ，其中 <code>sem_b.sem_op = 1</code> , 也就是释放一个资源.<br>\n 而最初的资源数量是 <code>SETVAL</code>  所创建的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">bool</span> <span class=\"title function_\">CSEM::wait</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">sembuf</span> <span class=\"title\">sem_b</span>;</span></span><br><span class=\"line\">  sem_b.sem_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">  sem_b.sem_op = <span class=\"number\">-1</span>;</span><br><span class=\"line\">  sem_b.sem_flg = SEM_UNDO;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (semop(sem_id, &amp;sem_b, <span class=\"number\">1</span>) == <span class=\"number\">-1</span>) &#123; perror(<span class=\"string\">&quot;wait semop()&quot;</span>); <span class=\"keyword\">return</span> <span class=\"literal\">false</span>; &#125;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"信号量对共享内存加锁\"><a class=\"markdownIt-Anchor\" href=\"#信号量对共享内存加锁\">#</a> 信号量对共享内存加锁</h1>\n<p>就是在共享内存操作之中使用上文提到的 wait 和 post，这其实就是个 P-V 操作，搞这么神神叨叨的。<br>\n然后这 PV 之间才对共享内存操作.<br>\n 部分代码再上文。<br>\nclient.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *shmptr = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">shm_register</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> shmid = <span class=\"built_in\">shmget</span>( (<span class=\"type\">key_t</span>)<span class=\"number\">0x5005</span>, <span class=\"number\">1024</span>, <span class=\"number\">0640</span>|IPC_CREAT);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( shmid == <span class=\"number\">-1</span> )</span><br><span class=\"line\">      &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;shmget() failed\\n&quot;</span>);  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">    shmptr = (<span class=\"type\">char</span> *)<span class=\"built_in\">shmat</span>(shmid, <span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> shmid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   CSEM sem;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// 用key值0x5000 初始信号灯。</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sem.<span class=\"built_in\">init</span>(<span class=\"number\">0x5000</span>)==<span class=\"literal\">false</span>) </span><br><span class=\"line\">    &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.init failed.\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.init ok\\n&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">// 等待信信号挂出，等待成功后，将持有锁。</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sem.<span class=\"built_in\">wait</span>() == <span class=\"literal\">false</span>) </span><br><span class=\"line\">    &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.wait failed.\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.wait ok\\n&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// 申请一个共享内存并将shmptr指过去</span></span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Proc1 write 0x10 A to shm&quot;</span>);</span><br><span class=\"line\">   <span class=\"type\">int</span> shmid = <span class=\"built_in\">shm_register</span>();</span><br><span class=\"line\">   <span class=\"built_in\">memset</span>(shmptr, <span class=\"string\">&#x27;A&#x27;</span>, <span class=\"number\">0x10</span>);</span><br><span class=\"line\">   <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">// 挂出信号灯，释放锁。</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sem.<span class=\"built_in\">post</span>() == <span class=\"literal\">false</span>) </span><br><span class=\"line\">    &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.post failed.\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.post ok\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Proc1 shm contents: %s\\n&quot;</span>, shmptr);</span><br><span class=\"line\">   <span class=\"comment\">//detach shared memory</span></span><br><span class=\"line\">   <span class=\"built_in\">shmdt</span>(shmptr);</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">// 销毁信号灯。</span></span><br><span class=\"line\">   <span class=\"comment\">// if (sem.destroy()==false) &#123; printf(&quot;sem.destroy failed.\\n&quot;); return -1; &#125;</span></span><br><span class=\"line\">   <span class=\"comment\">// printf(&quot;sem.destroy ok\\n&quot;);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>server.cpp</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">char</span> *shmptr = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">shm_attach</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> shmid = <span class=\"built_in\">shmget</span>( (<span class=\"type\">key_t</span>)<span class=\"number\">0x5005</span>, <span class=\"number\">1024</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( shmid == <span class=\"number\">-1</span> )</span><br><span class=\"line\">      &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;shmget() failed\\n&quot;</span>);  <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">    shmptr = (<span class=\"type\">char</span> *)<span class=\"built_in\">shmat</span>(shmid, <span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> shmid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">   CSEM sem;</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// 用key值0x5000 初始信号灯。</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sem.<span class=\"built_in\">init</span>(<span class=\"number\">0x5000</span>)==<span class=\"literal\">false</span>) </span><br><span class=\"line\">    &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.init failed.\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.init ok\\n&quot;</span>);</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">// 等待信信号挂出，等待成功后，将持有锁。</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sem.<span class=\"built_in\">wait</span>() == <span class=\"literal\">false</span>) </span><br><span class=\"line\">    &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.wait failed.\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.wait ok\\n&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"comment\">// 申请一个共享内存并将shmptr指过去</span></span><br><span class=\"line\">   <span class=\"type\">int</span> shmid = <span class=\"built_in\">shm_attach</span>();</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Proc2 contents is %s\\n&quot;</span>, shmptr);</span><br><span class=\"line\">   <span class=\"built_in\">memset</span>(shmptr, <span class=\"string\">&#x27;B&#x27;</span>, <span class=\"number\">0x10</span>);</span><br><span class=\"line\">   <span class=\"built_in\">getchar</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// 挂出信号灯，释放锁。</span></span><br><span class=\"line\">   <span class=\"keyword\">if</span> (sem.<span class=\"built_in\">post</span>() == <span class=\"literal\">false</span>) </span><br><span class=\"line\">    &#123; <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.post failed.\\n&quot;</span>); <span class=\"keyword\">return</span> <span class=\"number\">-1</span>; &#125;</span><br><span class=\"line\">   <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;sem.post ok\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">//detach shared memory</span></span><br><span class=\"line\">   <span class=\"built_in\">shmdt</span>(shmptr);</span><br><span class=\"line\">  </span><br><span class=\"line\">   <span class=\"comment\">// 销毁信号灯。</span></span><br><span class=\"line\">   <span class=\"comment\">// if (sem.destroy()==false) &#123; printf(&quot;sem.destroy failed.\\n&quot;); return -1; &#125;</span></span><br><span class=\"line\">   <span class=\"comment\">// printf(&quot;sem.destroy ok\\n&quot;);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>client 先初始化信号量，然后获取资源，申请到共享内存，写入’A’，释放资源</li>\n<li>server 连上这个信号量，连上这个 shm，打印出 client 写入的’A’，获取资源，写入’B’</li>\n<li>client 释放资源之后再看内存，已经变成’B’的形状了</li>\n</ul>\n<p><img src=\"/2022/10/18/shared-memory-and-semaphore-machenism/2.png\" alt=\"2\"></p>\n",
            "tags": [
                "Linux"
            ]
        }
    ]
}