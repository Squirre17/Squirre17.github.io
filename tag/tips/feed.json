{
    "version": "https://jsonfeed.org/version/1",
    "title": "Squirre17 Blog • All posts by \"tips\" tag",
    "description": "Nothing more than a rookie",
    "home_page_url": "https://Squirre17.github.io",
    "items": [
        {
            "id": "https://squirre17.github.io/2022/08/16/pwn-in-WSL-Pwsh-and-Vscode/",
            "url": "https://squirre17.github.io/2022/08/16/pwn-in-WSL-Pwsh-and-Vscode/",
            "title": "pwn in WSL Pwsh and Vscode",
            "date_published": "2022-08-16T08:42:50.000Z",
            "content_html": "<h2 id=\"背景提要\"><a class=\"markdownIt-Anchor\" href=\"#背景提要\">#</a> 背景提要</h2>\n<p>回校后来到实验室 借用了下姚佬的 2k 大屏 发现确实舒服 但是有个致命的问题 键盘输入和显示器显示有明显的延迟<br>\n但是在主机就没事<br>\n加上之前也厌烦了在主机和虚拟机之间划来划去 怪麻烦的<br>\n就想有没有可替代的方案 让我不需要进虚拟机（将其当个远程服务器）<br>\n就能舒舒服服的做 pwn 题</p>\n<p>然后发现了<a href=\"https://blog.csome.cc/p/2022CISCN-hn-wp/\"> Csome</a> 师傅的博客 是用 powershell 在 wsl 进行的<br>\n然后我审计了一下 pwntools 的源码<br>\n确实会启动一个 terminal 进程 将我们输入的参数进去执行<br>\n在 window 下启动的进程是 <code>cmd.exe</code>  是挂载在 <code>/mnt</code>  目录下<br>\n但是由于是跨文件系统 打开实在太慢 （window 的程序要访问 linux 进程内部的内存空间 得先从 Linux 切进 window<br>\n 在 window 上打开 <code>cmd.exe</code>  再切回 Linux）</p>\n<p>因此寻找别的替代方案<br>\n正好也是 defcon 时期 无聊刷推的时候看到<a href=\"https://www.youtube.com/watch?v=8QAGLdY6bDw\"> DEF CON LiveCTF 2022 - Day 2 - YouTube</a><br>\n 中间的 winpwn 玩家采取的方法<br>\n其实也就是 pause 等待进程 attach 罢了 不过这个足以解决我的一切问题</p>\n<h2 id=\"pwn脚本中定义个函数\"><a class=\"markdownIt-Anchor\" href=\"#pwn脚本中定义个函数\">#</a> pwn 脚本中定义个函数</h2>\n<p>举例 这里定义了一个 dbg 函数 可以将我们传入的断点和 set 信息统统写入 <code>/tmp/gdbscript</code>  作为 gdb 启动信息<br>\n（pwntools 内部就是这么实现的 依葫芦画瓢<br>\n dft 是预定义的一些信息 比如 <code>set $a=0xdeedbeaf</code>  这些需要每次都写入的就写到 dft 里面去</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pwn <span class=\"keyword\">import</span> *</span><br><span class=\"line\">context(os=<span class=\"string\">&quot;Linux&quot;</span>,arch=<span class=\"string\">&quot;amd64&quot;</span>,log_level=<span class=\"string\">&quot;debug&quot;</span>)</span><br><span class=\"line\">p = process(<span class=\"string\">&quot;./emulator&quot;</span>, env=&#123;<span class=\"string\">&quot;LD_PRELOAD&quot;</span>: <span class=\"string\">&quot;./libunicorn.so.1&quot;</span>&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">se      = <span class=\"keyword\">lambda</span> data               :p.send(data)</span><br><span class=\"line\">sa      = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class=\"line\">sl      = <span class=\"keyword\">lambda</span> data               :p.sendline(data)</span><br><span class=\"line\">sla     = <span class=\"keyword\">lambda</span> delim,data         :p.sendlineafter(delim, data)</span><br><span class=\"line\">sea     = <span class=\"keyword\">lambda</span> delim,data         :p.sendafter(delim, data)</span><br><span class=\"line\">rc      = <span class=\"keyword\">lambda</span> numb=<span class=\"number\">4096</span>          :p.recv(numb)</span><br><span class=\"line\">rl      = <span class=\"keyword\">lambda</span>                    :p.recvline()</span><br><span class=\"line\">ru      = <span class=\"keyword\">lambda</span> delims             :p.recvuntil(delims)</span><br><span class=\"line\">uu32    = <span class=\"keyword\">lambda</span> data               :u32(data.ljust(<span class=\"number\">4</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">uu64    = <span class=\"keyword\">lambda</span> data               :u64(data.ljust(<span class=\"number\">8</span>, <span class=\"string\">b&#x27;\\x00&#x27;</span>))</span><br><span class=\"line\">info    = <span class=\"keyword\">lambda</span> tag, addr          :p.info(<span class=\"string\">&#x27;======&gt;&#x27;</span>+tag + <span class=\"string\">&#x27;: &#123;:#x&#125;&#x27;</span>.<span class=\"built_in\">format</span>(addr))</span><br><span class=\"line\">ir      = <span class=\"keyword\">lambda</span>                    :p.interactive()</span><br><span class=\"line\">sc\t\t  = <span class=\"keyword\">lambda</span> s, addr\t\t\t   :success(s + <span class=\"string\">&quot; =&gt; &quot;</span> + <span class=\"built_in\">hex</span>(addr))</span><br><span class=\"line\">ps\t\t  = <span class=\"keyword\">lambda</span> \t\t\t\t\t      :pause()</span><br><span class=\"line\"></span><br><span class=\"line\">dft = [<span class=\"string\">&quot;b *0x1234&quot;</span>, <span class=\"string\">&quot;b *0x7890000&quot;</span>]</span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">dbg</span>(<span class=\"params\">s=[<span class=\"string\">&quot;&quot;</span>]</span>):</span><br><span class=\"line\">\ta = dft + s</span><br><span class=\"line\">\tf = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;/tmp/gdbscript&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">\ta = <span class=\"built_in\">list</span>(<span class=\"built_in\">map</span>(<span class=\"keyword\">lambda</span> x:x + <span class=\"string\">&#x27;\\n&#x27;</span>, a))</span><br><span class=\"line\">\tf.writelines(a)</span><br><span class=\"line\">\tf.close()</span><br><span class=\"line\">\tps()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">exp</span>():</span><br><span class=\"line\">\tlibc = ELF(<span class=\"string\">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)</span><br><span class=\"line\">\tdbg([<span class=\"string\">&quot;b *0xdeedbeaf&quot;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">\texp()</span><br><span class=\"line\">\tir()</span><br></pre></td></tr></table></figure>\n<h2 id=\"gdb的启动方式\"><a class=\"markdownIt-Anchor\" href=\"#gdb的启动方式\">#</a> gdb 的启动方式</h2>\n<p>执行 py 脚本 pause 挂起后<br>\n由我们的 powershell 去 attach</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gdb attach $(pidof procname) -x /tmp/gdbscript</span><br></pre></td></tr></table></figure>\n<p>procname 是程序名</p>\n<p>或者更直接点 写个脚本 <code>pgdb</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">gdb attach $(pidof procname) -x /tmp/gdbscript</span></span><br><span class=\"line\">if [ $# -ne 1 ];then</span><br><span class=\"line\">\techo &quot;usage : pgdb procname&quot;</span><br><span class=\"line\">\texit 1</span><br><span class=\"line\">fi</span><br><span class=\"line\">pid=`pidof $1`</span><br><span class=\"line\">gdb attach $pid -x /tmp/gdbscript</span><br></pre></td></tr></table></figure>\n<p>只需要 <code>pgdb procname</code>  就能 attach 了</p>\n<h2 id=\"工作流\"><a class=\"markdownIt-Anchor\" href=\"#工作流\">#</a> 工作流</h2>\n<p>vscode 写 exp<br>\nvscode terminal 进行 exp 的执行（最喜欢的 terminal<br>\npowershell 进行 gdb<br>\n<img src=\"/2022/08/16/pwn-in-WSL-Pwsh-and-Vscode/20220816164008.png\" alt=\"Pasted image 20220816164008\"></p>\n",
            "tags": [
                "Tips"
            ]
        }
    ]
}