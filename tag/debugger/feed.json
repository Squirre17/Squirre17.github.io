{
    "version": "https://jsonfeed.org/version/1",
    "title": "Squirre17 Blog • All posts by \"debugger\" tag",
    "description": "萌豚贴贴即是正义",
    "home_page_url": "https://Squirre17.github.io",
    "items": [
        {
            "id": "https://squirre17.github.io/2022/10/30/debugger-impl/",
            "url": "https://squirre17.github.io/2022/10/30/debugger-impl/",
            "title": "debugger-impl",
            "date_published": "2022-10-30T06:46:09.000Z",
            "content_html": "<p><a href=\"https://eli.thegreenplace.net/2011/01/23/how-debuggers-work-part-1/\">How debuggers work: Part 1 - Basics - Eli Bendersky’s website</a><br>\n 单纯的复现此文章。</p>\n<h1 id=\"single-step\"><a class=\"markdownIt-Anchor\" href=\"#single-step\">#</a> single step</h1>\n<p>首先是 ptrace</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">long</span> <span class=\"title function_\">ptrace</span><span class=\"params\">(<span class=\"keyword\">enum</span> __ptrace_request request, <span class=\"type\">pid_t</span> pid,</span></span><br><span class=\"line\"><span class=\"params\">                 <span class=\"type\">void</span> *addr, <span class=\"type\">void</span> *data)</span>;</span><br></pre></td></tr></table></figure>\n<p>对于第一个 request 的参数</p>\n<ul>\n<li><code>PTRACE_TRACEME</code>  request, which means that this child process asks the OS kernel to let its parent trace it.</li>\n<li>这个参数只用于子进程，所以这里是在 fork 之后</li>\n</ul>\n<p>第三个对地址进行和第四个是地址操作相关，根据 request 的类型，是对这个 addr 进行 poke，或者 peek 这个数据到 data 里（或者直接 peek 到返回值）。</p>\n<blockquote>\n<p>Indicates that this process is to be traced by its parent. Any signal (except SIGKILL) delivered to this process will cause it to stop and its parent to be notified via wait(). <strong>Also, all subsequent calls to exec() by this process will cause a SIGTRAP to be sent to it, giving the parent a chance to gain control before the new program begins execution</strong>. A process probably shouldn’t make this request if its parent isn’t expecting to trace it. (pid, addr, and data are ignored.)</p>\n</blockquote>\n<p>wait () 函数等待子进程终止，并设置相应的状态码。（不过这里貌似不是终止，而是 STOP）感觉是英文的 terminate 包括 stop、<br>\nWIFSTOPPED (sstatus) 判读是不是被信号传递而停止</p>\n<blockquote>\n<pre><code>   WIFSTOPPED(wstatus)\n</code></pre>\n</blockquote>\n<pre><code>          returns true if the child process was stopped by delivery of a signal; this is possible only if the call was done using WUNTRACED or\n          when the child is being traced (see ptrace(2)).\n</code></pre>\n<p>子进程利用 <code>(ptrace(PTRACE_TRACEME, 0, 0, 0)</code>  向 OS 发送请求要求父进程 watch 自己，然后 execl 的时候发送 SIGTRAP 给父进程。<br>\n然后父进程里就不断发送单步信号和 wait 等待。<br>\n父进程中循环结束的条件是子进程发送 exit 的信号，WIFEXITED。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdio.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;stdlib.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;unistd.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&quot;sys/types.h&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;sys/ptrace.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> procmsg(s...) printf(s)</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">define</span> TODO do &#123;\\</span></span><br><span class=\"line\"><span class=\"meta\">    printf(<span class=\"string\">&quot;TODO: %s\\n&quot;</span>, __FUNCTION__); \\</span></span><br><span class=\"line\"><span class=\"meta\">    exit(1); \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125; while (0);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">run_target</span><span class=\"params\">(<span class=\"type\">char</span> * programname)</span>&#123;</span><br><span class=\"line\">    procmsg(<span class=\"string\">&quot;target started. will run &#x27;%s&#x27;\\n&quot;</span>, programname);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Allow tracing of this process */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptrace(PTRACE_TRACEME, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;ptrace&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Replace this process&#x27;s image with the given program */</span></span><br><span class=\"line\">    execl(programname, programname, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">run_debugger</span><span class=\"params\">(<span class=\"type\">pid_t</span> child_pid)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> wait_status;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> icounter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    procmsg(<span class=\"string\">&quot;debugger started\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Wait for child to stop on its first instruction after execl */</span></span><br><span class=\"line\">    wait(&amp;wait_status);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (WIFSTOPPED(wait_status)) &#123;</span><br><span class=\"line\">        icounter++;</span><br><span class=\"line\">        <span class=\"comment\">/* Make the child execute another instruction */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ptrace(PTRACE_SINGLESTEP, child_pid, <span class=\"number\">0</span>, <span class=\"number\">0</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            perror(<span class=\"string\">&quot;ptrace&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Wait for child to stop on its next instruction */</span></span><br><span class=\"line\">        wait(&amp;wait_status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    procmsg(<span class=\"string\">&quot;the child executed %u instructions\\n&quot;</span>, icounter);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">char</span>** argv)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">pid_t</span> pid;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (argc &lt; <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">fprintf</span>(<span class=\"built_in\">stderr</span>, <span class=\"string\">&quot;Expected a program name as argument\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pid = fork();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (pid == <span class=\"number\">0</span>)     <span class=\"comment\">/* child process */</span></span><br><span class=\"line\">        run_target(argv[<span class=\"number\">1</span>]);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (pid &gt; <span class=\"number\">0</span>) <span class=\"comment\">/* parent process */</span></span><br><span class=\"line\">        run_debugger(pid);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;fork&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对于它监听的 victim</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.intel_syntax noprefix</span><br><span class=\"line\">.section .text</span><br><span class=\"line\">.global _start</span><br><span class=\"line\"></span><br><span class=\"line\">_start:</span><br><span class=\"line\">    mov rdi, <span class=\"number\">1</span></span><br><span class=\"line\">    lea rsi, .msg[rip]</span><br><span class=\"line\">    mov rdx, <span class=\"number\">20</span></span><br><span class=\"line\">    mov rax, <span class=\"number\">1</span>    <span class=\"comment\">// sys_write callno</span></span><br><span class=\"line\">    syscall      </span><br><span class=\"line\"></span><br><span class=\"line\">    mov rax, <span class=\"number\">60</span></span><br><span class=\"line\">    syscall</span><br><span class=\"line\"></span><br><span class=\"line\">.section .data</span><br><span class=\"line\">.msg:</span><br><span class=\"line\">    .<span class=\"built_in\">string</span> <span class=\"string\">&quot;hello debugger\\n\\0&quot;</span> </span><br><span class=\"line\"><span class=\"comment\">// as -o victim.o -s victim.S</span></span><br><span class=\"line\"><span class=\"comment\">// ld -o victim victim.o</span></span><br></pre></td></tr></table></figure>\n<p>然后引入一个 <code>sys/user.h</code>  的 header 用于调试。</p>\n<blockquote>\n<p>/* The whole purpose of this file is for GDB and GDB only.<br>\nDon’t read too much into it. Don’t use it for<br>\nanything other than GDB unless know what you are<br>\ndoing.  */</p>\n</blockquote>\n<p>用 <code>PTRACE_PEEKTEXT</code>  进行指定地址的内存获取</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">run_debugger</span><span class=\"params\">(<span class=\"type\">pid_t</span> child_pid)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> wait_status;</span><br><span class=\"line\">    <span class=\"type\">unsigned</span> icounter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    pntmsg(<span class=\"string\">&quot;debugger started\\n&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Wait for child to stop on its first instruction after execl */</span></span><br><span class=\"line\">    wait(&amp;wait_status);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (WIFSTOPPED(wait_status)) &#123;</span><br><span class=\"line\">        icounter++;</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">user_regs_struct</span> <span class=\"title\">regs</span>;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        ptrace(PTRACE_GETREGS, child_pid, <span class=\"number\">0</span>, &amp;regs);</span><br><span class=\"line\">        <span class=\"type\">unsigned</span> instr = ptrace(PTRACE_PEEKTEXT, child_pid, regs.rip, <span class=\"number\">0</span>);</span><br><span class=\"line\">        pntmsg(<span class=\"string\">&quot;icounter = %u, instr = 0x%08x, rip = 0x%08x, rax = 0x%08x\\n&quot;</span>,</span><br><span class=\"line\">            icounter, instr, regs.rip, regs.rax</span><br><span class=\"line\">        );</span><br><span class=\"line\">        <span class=\"comment\">/* Make the child execute another instruction */</span></span><br><span class=\"line\">        Ptrace(PTRACE_SINGLESTEP, child_pid, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* Wait for child to stop on its next instruction */</span></span><br><span class=\"line\">        wait(&amp;wait_status);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    pntmsg(<span class=\"string\">&quot;the child executed %u instructions\\n&quot;</span>, icounter);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一次返回值是 4 字节</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[PNT] debugger started</span><br><span class=\"line\">[CHD] target started. will run &#x27;./victim&#x27;</span><br><span class=\"line\">[PNT] icounter = 1, instr = 0x01c7c748, rip = 0x00401000, rax = 0x00000000</span><br><span class=\"line\">[PNT] icounter = 2, instr = 0xf2358d48, rip = 0x00401007, rax = 0x00000000</span><br><span class=\"line\">[PNT] icounter = 3, instr = 0x14c2c748, rip = 0x0040100e, rax = 0x00000000</span><br><span class=\"line\">[PNT] icounter = 4, instr = 0x01c0c748, rip = 0x00401015, rax = 0x00000000</span><br><span class=\"line\">[PNT] icounter = 5, instr = 0xc748050f, rip = 0x0040101c, rax = 0x00000001</span><br><span class=\"line\">hello debugger</span><br><span class=\"line\">[PNT] icounter = 6, instr = 0x3cc0c748, rip = 0x0040101e, rax = 0x00000014</span><br><span class=\"line\">[PNT] icounter = 7, instr = 0x0000050f, rip = 0x00401025, rax = 0x0000003c</span><br><span class=\"line\">[PNT] the child executed 7 instructions</span><br></pre></td></tr></table></figure>\n<h1 id=\"breakpoint\"><a class=\"markdownIt-Anchor\" href=\"#breakpoint\">#</a> breakpoint</h1>\n<p>中断分为软中断和硬中断.<br>\n 硬中断有专门的电器设备去处理。<br>\n对于一条指令，debugger 会把它的首指令替换为 <code>int 3</code> (0xcc).</p>\n<p>objdump 出指令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">objdump -d victim</span>      </span><br><span class=\"line\"></span><br><span class=\"line\">victim:     file format elf64-x86-64</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disassembly of section .text:</span><br><span class=\"line\"></span><br><span class=\"line\">0000000000401000 &lt;_start&gt;:</span><br><span class=\"line\">  401000:       48 c7 c7 01 00 00 00    mov    $0x1,%rdi</span><br><span class=\"line\">  401007:       48 8d 35 f2 0f 00 00    lea    0xff2(%rip),%rsi        # 402000 &lt;.msg&gt;</span><br><span class=\"line\">  40100e:       48 c7 c2 14 00 00 00    mov    $0x14,%rdx</span><br><span class=\"line\">  401015:       48 c7 c0 01 00 00 00    mov    $0x1,%rax</span><br><span class=\"line\">  40101c:       0f 05                   syscall </span><br><span class=\"line\">  40101e:       48 c7 c0 3c 00 00 00    mov    $0x3c,%rax</span><br><span class=\"line\">  401025:       0f 05                   syscall </span><br></pre></td></tr></table></figure>\n<p>获取第一条指令地址 <code>401000</code></p>\n<p>在这条地址上取出指令 设置为 0xcc 然后写回</p>\n<ul>\n<li>PTRACE_CONT  : Restart  the stopped tracee process.</li>\n<li>PTRACE_POKETEXT, PTRACE_POKEDATA 这两个是 equivalent 的</li>\n<li>strsignal 一定要包含头文件 string.h 否则会引用到内核头文件中去。</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Ptrace(PTRACE_GETREGS, child_pid, <span class=\"number\">0</span>, &amp;regs);</span><br><span class=\"line\"><span class=\"type\">unsigned</span> instr = Ptrace(PTRACE_PEEKTEXT, child_pid,(<span class=\"type\">void</span> *)addr,(<span class=\"type\">void</span> *)<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* modify instruction in addr 0x401000 to 0xcc */</span></span><br><span class=\"line\"><span class=\"type\">unsigned</span> trap_instr = (instr &amp; <span class=\"number\">0xffffff00</span>) | <span class=\"number\">0xcc</span>;</span><br><span class=\"line\">Ptrace(PTRACE_POKETEXT, child_pid, (<span class=\"type\">void</span> *)addr, trap_instr);</span><br><span class=\"line\"><span class=\"type\">unsigned</span> readback = Ptrace(PTRACE_PEEKTEXT, child_pid,(<span class=\"type\">void</span> *)addr,(<span class=\"type\">void</span> *)<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">pntmsg(<span class=\"string\">&quot;instruction 0x%08x in addr 0x%08x\\n&quot;</span>, readback, addr);</span><br><span class=\"line\"><span class=\"comment\">// pause();</span></span><br><span class=\"line\"></span><br><span class=\"line\">Ptrace(PTRACE_CONT, child_pid, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">wait(&amp;wait_status);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (WIFSTOPPED(wait_status)) &#123;</span><br><span class=\"line\">    pntmsg(<span class=\"string\">&quot;Child got a signal: %s\\n&quot;</span>, strsignal(WSTOPSIG(wait_status)));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    perror(<span class=\"string\">&quot;wait&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* See where the child is now */</span></span><br><span class=\"line\">Ptrace(PTRACE_GETREGS, child_pid, <span class=\"number\">0</span>, &amp;regs);</span><br><span class=\"line\">pntmsg(<span class=\"string\">&quot;Child stopped at RIP = 0x%08x\\n&quot;</span>, regs.rip);</span><br><span class=\"line\">pause();</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[PNT] debugger started</span><br><span class=\"line\">[CHD] target started. will run &#x27;./victim&#x27;</span><br><span class=\"line\">[PNT] instruction 0x01c7c7cc in addr 0x00401000</span><br><span class=\"line\">[PNT] Child got a signal: Trace/breakpoint trap</span><br><span class=\"line\">[PNT] Child stopped at RIP = 0x00401001</span><br></pre></td></tr></table></figure>\n<p>可以看到 rip 移动了一位，需要移动回去，然后覆写这原来的位置，就能继续运行了</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">regs.rip -= <span class=\"number\">1</span>;</span><br><span class=\"line\">Ptrace(PTRACE_SETREGS, child_pid, <span class=\"number\">0</span>, &amp;regs);</span><br><span class=\"line\">Ptrace(PTRACE_POKETEXT, child_pid, regs.rip, instr);</span><br><span class=\"line\">pntmsg(<span class=\"string\">&quot;icounter = %u, instr = 0x%08x, rip = 0x%08x\\n&quot;</span>,</span><br><span class=\"line\">    icounter, instr, regs.rip</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"comment\">// pause();</span></span><br><span class=\"line\"><span class=\"comment\">/* Make the child execute another instruction */</span></span><br><span class=\"line\">Ptrace(PTRACE_SINGLESTEP, child_pid, <span class=\"number\">0</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">pause();</span><br><span class=\"line\"><span class=\"comment\">/* Wait for child to stop on its next instruction */</span></span><br><span class=\"line\">wait(&amp;wait_status);</span><br></pre></td></tr></table></figure>\n<p>另外 这个提取 rip 然后加减写的操作可以被封装好</p>\n<ul>\n<li>create_breakpoint</li>\n<li>resume_from_breakpoint<br>\n 对于 ptrace 很坑的一点在于，有的时候返回值为负数不正常，有的时候却正常。需要区别对待<br>\n现在写一个新的 victim 实例</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"type\">void</span> <span class=\"title function_\">do_stuff</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;Hello, &quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">main</span><span class=\"params\">()</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">4</span>; ++i)</span><br><span class=\"line\">        do_stuff();</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;world!\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// gcc -o victim victim.c -no-pie</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000000000401156 &lt;do_stuff&gt;:</span><br><span class=\"line\">  401156:       f3 0f 1e fa             endbr64 </span><br><span class=\"line\">  40115a:       55                      push   %rbp</span><br><span class=\"line\">  40115b:       48 89 e5                mov    %rsp,%rbp</span><br><span class=\"line\">  40115e:       48 8d 3d 9f 0e 00 00    lea    0xe9f(%rip),%rdi        # 402004 &lt;_IO_stdin_used+0x4&gt;</span><br><span class=\"line\">  401165:       b8 00 00 00 00          mov    $0x0,%eax</span><br><span class=\"line\">  40116a:       e8 f1 fe ff ff          callq  401060 &lt;printf@plt&gt;</span><br><span class=\"line\">  40116f:       90                      nop</span><br><span class=\"line\">  401170:       5d                      pop    %rbp</span><br><span class=\"line\">  401171:       c3                      retq</span><br></pre></td></tr></table></figure>\n<p>如果要命中一个断点多次，就是先清除这个断点，然后让它回滚，再单步，再写回这个断点</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    1. get regs</span></span><br><span class=\"line\"><span class=\"comment\">    2. rollback rip and write back</span></span><br><span class=\"line\"><span class=\"comment\">    3. single step</span></span><br><span class=\"line\"><span class=\"comment\">    4. re-enable breakpoint</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"title function_\">resume_from_breakpoint</span><span class=\"params\">(<span class=\"type\">pid_t</span> pid, debug_breakpoint* dbp)</span>&#123;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">user_regs_struct</span> <span class=\"title\">regs</span>;</span></span><br><span class=\"line\">    <span class=\"type\">int</span> wait_status;</span><br><span class=\"line\"></span><br><span class=\"line\">    ptrace(PTRACE_GETREGS, pid, <span class=\"number\">0</span>, &amp;regs);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[DBG] 0x%08x 0x%08x\\n&quot;</span>, dbp-&gt;addr, regs.rip);</span><br><span class=\"line\">    assert(dbp-&gt;addr + <span class=\"number\">1</span> == regs.rip);</span><br><span class=\"line\"></span><br><span class=\"line\">    regs.rip -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    ptrace(PTRACE_SETREGS, pid, <span class=\"number\">0</span>, &amp;regs);</span><br><span class=\"line\">    disable_breakpoint(pid, dbp);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[DBG] before single step %p\\n&quot;</span>, get_child_rip(pid));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptrace(PTRACE_SINGLESTEP, pid, <span class=\"number\">0</span>, <span class=\"number\">0</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;ptrace&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    wait(&amp;wait_status);</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;[DBG] %s at (%s:%u)\\n&quot;</span>, strsignal(WSTOPSIG(wait_status)), __FILE__, __LINE__);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (WIFEXITED(wait_status)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    enable_breakpoint(pid, dbp);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (ptrace(PTRACE_CONT, pid, <span class=\"number\">0</span>, <span class=\"number\">0</span>) &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        perror(<span class=\"string\">&quot;ptrace&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    wait(&amp;wait_status);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(WIFEXITED(wait_status)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (WIFSTOPPED(wait_status)) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">-1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">while</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    pntmsg(<span class=\"string\">&quot;child stopped at breakpoint. RIP = %p\\n&quot;</span>, get_child_rip(child_pid));</span><br><span class=\"line\">    pntmsg(<span class=\"string\">&quot;resuming\\n&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> rc = resume_from_breakpoint(child_pid, dbp);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (rc == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        pntmsg(<span class=\"string\">&quot;child exited\\n&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rc == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        pntmsg(<span class=\"string\">&quot;unexpected: %d\\n&quot;</span>, rc);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"debug-info\"><a class=\"markdownIt-Anchor\" href=\"#debug-info\">#</a> debug info</h1>\n<p>ELF 中用的 debug 信息格式是 DWARF<br>\n 其中类似 <code>DW_TAG_compile_unit</code>  的是 dwarf 的 tag<br>\nps: readelf 也能看到 <code>readelf --debug-dump ./traceproc2 &gt; readelf</code> <br>\nps: gcc 产生 dwarf  <code>gcc -gdwarf-4 -no-pie -o traceproc2 traceproc2.c</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">objdump --dwarf=info ./traceproc2</span> </span><br><span class=\"line\"></span><br><span class=\"line\">./traceproc2:     file format elf64-x86-64</span><br><span class=\"line\"></span><br><span class=\"line\">Contents of the .debug_info section:</span><br><span class=\"line\"></span><br><span class=\"line\">  Compilation Unit @ offset 0x0:</span><br><span class=\"line\">   Length:        0x343 (32-bit)</span><br><span class=\"line\">   Version:       4</span><br><span class=\"line\">   Abbrev Offset: 0x0</span><br><span class=\"line\">   Pointer Size:  8</span><br><span class=\"line\"> &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)</span><br><span class=\"line\">    &lt;c&gt;   DW_AT_producer    : (indirect string, offset: 0x18): GNU C17 9.4.0 -mtune=generic -march=x86-64 -g -fasynchronous-unwind-tables -fstack-protector-strong -fstack-clash-protection -fcf-protection</span><br><span class=\"line\">    &lt;10&gt;   DW_AT_language    : 12       (ANSI C99)</span><br><span class=\"line\">    &lt;11&gt;   DW_AT_name        : (indirect string, offset: 0x143): traceproc2.c</span><br><span class=\"line\">    &lt;15&gt;   DW_AT_comp_dir    : (indirect string, offset: 0x1bd): /home/squ/proj/debugger-impl/debugger-impl/subject</span><br><span class=\"line\">    &lt;19&gt;   DW_AT_low_pc      : 0x401136               &lt;-&lt; do_stuff</span><br><span class=\"line\">    &lt;21&gt;   DW_AT_high_pc     : 0x60</span><br><span class=\"line\">    &lt;29&gt;   DW_AT_stmt_list   : 0x0</span><br><span class=\"line\"> &lt;1&gt;&lt;2d&gt;: Abbrev Number: 2 (DW_TAG_typedef)</span><br><span class=\"line\">    &lt;2e&gt;   DW_AT_name        : (indirect string, offset: 0xc5): size_t</span><br><span class=\"line\">    &lt;32&gt;   DW_AT_decl_file   : 2</span><br><span class=\"line\">    &lt;33&gt;   DW_AT_decl_line   : 209</span><br><span class=\"line\">    &lt;34&gt;   DW_AT_decl_column : 23</span><br><span class=\"line\">    &lt;35&gt;   DW_AT_type        : &lt;0x39&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000000000401136 &lt;do_stuff&gt;:</span><br><span class=\"line\">  401136:       f3 0f 1e fa             endbr64 </span><br><span class=\"line\">  40113a:       55                      push   %rbp</span><br><span class=\"line\">  40113b:       48 89 e5                mov    %rsp,%rbp</span><br><span class=\"line\">  </span><br><span class=\"line\">  (···)</span><br><span class=\"line\">  </span><br><span class=\"line\">  40117b:\tc9                   \tleaveq </span><br><span class=\"line\">  40117c:\tc3                   \tretq   </span><br><span class=\"line\"></span><br><span class=\"line\">000000000040117d &lt;main&gt;:</span><br><span class=\"line\">  40117d:       f3 0f 1e fa             endbr64 </span><br><span class=\"line\">  401181:       55                      push   %rbp</span><br><span class=\"line\">  </span><br><span class=\"line\">  (···)</span><br><span class=\"line\">  </span><br><span class=\"line\">  401195:       c3                      retq   </span><br><span class=\"line\">  401196:       66 2e 0f 1f 84 00 00    nopw   %cs:0x0(%rax,%rax,1)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>再往下能看到两个 subprogram tab 的，记录了函数名 函数长度 和函数起始地址</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;1&gt;&lt;2e2&gt;: Abbrev Number: 16 (DW_TAG_subprogram)</span><br><span class=\"line\">   &lt;2e3&gt;   DW_AT_external    : 1</span><br><span class=\"line\">   &lt;2e3&gt;   DW_AT_name        : (indirect string, offset: 0x1f0): main      &lt;&lt;- name</span><br><span class=\"line\">   &lt;2e7&gt;   DW_AT_decl_file   : 1</span><br><span class=\"line\">   &lt;2e8&gt;   DW_AT_decl_line   : 14</span><br><span class=\"line\">   &lt;2e9&gt;   DW_AT_decl_column : 5</span><br><span class=\"line\">   &lt;2ea&gt;   DW_AT_type        : &lt;0x65&gt;</span><br><span class=\"line\">   &lt;2ee&gt;   DW_AT_low_pc      : 0x40117d                                    &lt;&lt;- addr</span><br><span class=\"line\">   &lt;2f6&gt;   DW_AT_high_pc     : 0x19                                        &lt;&lt;- offset of end</span><br><span class=\"line\">   &lt;2fe&gt;   DW_AT_frame_base  : 1 byte block: 9c \t(DW_OP_call_frame_cfa)</span><br><span class=\"line\">   &lt;300&gt;   DW_AT_GNU_all_tail_call_sites: 1</span><br><span class=\"line\">&lt;1&gt;&lt;300&gt;: Abbrev Number: 17 (DW_TAG_subprogram)</span><br><span class=\"line\">   &lt;301&gt;   DW_AT_external    : 1</span><br><span class=\"line\">   &lt;301&gt;   DW_AT_name        : (indirect string, offset: 0x1a1): do_stuff</span><br><span class=\"line\">   &lt;305&gt;   DW_AT_decl_file   : 1</span><br><span class=\"line\">   &lt;306&gt;   DW_AT_decl_line   : 4</span><br><span class=\"line\">   &lt;307&gt;   DW_AT_decl_column : 6</span><br><span class=\"line\">   &lt;308&gt;   DW_AT_prototyped  : 1</span><br><span class=\"line\">   &lt;308&gt;   DW_AT_low_pc      : 0x401136</span><br><span class=\"line\">   &lt;310&gt;   DW_AT_high_pc     : 0x47</span><br><span class=\"line\">   &lt;318&gt;   DW_AT_frame_base  : 1 byte block: 9c \t(DW_OP_call_frame_cfa)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>第一个 <code>&lt;&gt;</code>  为嵌套深度</li>\n<li>对于标记了 DW_TAG_variable tab 的变量。DW_AT_type 能根据第二列 <code>&lt; &gt;</code>  里的数字找到对应的定义（大小类型）</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;1&gt;&lt;300&gt;: Abbrev Number: 17 (DW_TAG_subprogram)</span><br><span class=\"line\">   &lt;301&gt;   DW_AT_external    : 1</span><br><span class=\"line\">   &lt;301&gt;   DW_AT_name        : (indirect string, offset: 0x1a1): do_stuff</span><br><span class=\"line\">   &lt;305&gt;   DW_AT_decl_file   : 1</span><br><span class=\"line\">   &lt;306&gt;   DW_AT_decl_line   : 4</span><br><span class=\"line\">   &lt;307&gt;   DW_AT_decl_column : 6</span><br><span class=\"line\">   &lt;308&gt;   DW_AT_prototyped  : 1</span><br><span class=\"line\">   &lt;308&gt;   DW_AT_low_pc      : 0x401136</span><br><span class=\"line\">   &lt;310&gt;   DW_AT_high_pc     : 0x47</span><br><span class=\"line\">   &lt;318&gt;   DW_AT_frame_base  : 1 byte block: 9c \t(DW_OP_call_frame_cfa)</span><br><span class=\"line\">   &lt;31a&gt;   DW_AT_GNU_all_tail_call_sites: 1</span><br><span class=\"line\">&lt;2&gt;&lt;31a&gt;: Abbrev Number: 18 (DW_TAG_formal_parameter)</span><br><span class=\"line\">   &lt;31b&gt;   DW_AT_name        : (indirect string, offset: 0x11a): my_arg</span><br><span class=\"line\">   &lt;31f&gt;   DW_AT_decl_file   : 1</span><br><span class=\"line\">   &lt;320&gt;   DW_AT_decl_line   : 4</span><br><span class=\"line\">   &lt;321&gt;   DW_AT_decl_column : 19</span><br><span class=\"line\">   &lt;322&gt;   DW_AT_type        : &lt;0x65&gt;</span><br><span class=\"line\">   &lt;326&gt;   DW_AT_location    : 2 byte block: 91 5c \t(DW_OP_fbreg: -36)</span><br><span class=\"line\">&lt;2&gt;&lt;329&gt;: Abbrev Number: 19 (DW_TAG_variable)</span><br><span class=\"line\">   &lt;32a&gt;   DW_AT_name        : (indirect string, offset: 0xcc): my_local</span><br><span class=\"line\">   &lt;32e&gt;   DW_AT_decl_file   : 1</span><br><span class=\"line\">   &lt;32f&gt;   DW_AT_decl_line   : 6</span><br><span class=\"line\">   &lt;330&gt;   DW_AT_decl_column : 9</span><br><span class=\"line\">   &lt;331&gt;   DW_AT_type        : &lt;0x65&gt;</span><br><span class=\"line\">   &lt;335&gt;   DW_AT_location    : 2 byte block: 91 6c \t(DW_OP_fbreg: -20)</span><br><span class=\"line\">&lt;2&gt;&lt;338&gt;: Abbrev Number: 20 (DW_TAG_variable)</span><br><span class=\"line\">   &lt;339&gt;   DW_AT_name        : i</span><br><span class=\"line\">   &lt;33b&gt;   DW_AT_decl_file   : 1</span><br><span class=\"line\">   &lt;33c&gt;   DW_AT_decl_line   : 7</span><br><span class=\"line\">   &lt;33d&gt;   DW_AT_decl_column : 9</span><br><span class=\"line\">   &lt;33e&gt;   DW_AT_type        : &lt;0x65&gt;</span><br><span class=\"line\">   &lt;342&gt;   DW_AT_location    : 2 byte block: 91 68 \t(DW_OP_fbreg: -24)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;1&gt;&lt;65&gt;: Abbrev Number: 5 (DW_TAG_base_type)      &lt;- 65</span><br><span class=\"line\">   &lt;66&gt;   DW_AT_byte_size   : 4</span><br><span class=\"line\">   &lt;67&gt;   DW_AT_encoding    : 5\t(signed)</span><br><span class=\"line\">   &lt;68&gt;   DW_AT_name        : int</span><br></pre></td></tr></table></figure>\n<p>在 <code>DW_AT_location</code>  处  <code>DW_OP_fbreg</code>  记录了相对某个给定的 stack frame 的偏移 (说是就是 rbp 然后 ± 一点 offset，但是我没找到)</p>\n<blockquote>\n<p>The DW_OP_fbreg operation provides a signed LEB128 offset from the address specified by the location description in the DW_AT_frame_base attribute of the current function. (This is typically a “stack pointer” register plus or minus some offset. On more sophisticated systems it might be a location list that adjusts the offset according to changes in the stack pointer as the PC changes.)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0000000000401136 &lt;do_stuff&gt;:</span><br><span class=\"line\">  401136:\tf3 0f 1e fa          \tendbr64 </span><br><span class=\"line\">  40113a:\t55                   \tpush   %rbp</span><br><span class=\"line\">  40113b:\t48 89 e5             \tmov    %rsp,%rbp</span><br><span class=\"line\">  40113e:\t48 83 ec 20          \tsub    $0x20,%rsp</span><br><span class=\"line\">  401142:\t89 7d ec             \tmov    %edi,-0x14(%rbp)</span><br><span class=\"line\">  401145:\t8b 45 ec             \tmov    -0x14(%rbp),%eax</span><br><span class=\"line\">  401148:\t83 c0 02             \tadd    $0x2,%eax</span><br><span class=\"line\">  40114b:\t89 45 fc             \tmov    %eax,-0x4(%rbp)</span><br><span class=\"line\">  40114e:\tc7 45 f8 00 00 00 00 \tmovl   $0x0,-0x8(%rbp)</span><br><span class=\"line\">  401155:\teb 1a                \tjmp    401171 &lt;do_stuff+0x3b&gt;</span><br><span class=\"line\">  401157:\t8b 45 f8             \tmov    -0x8(%rbp),%eax</span><br><span class=\"line\">  40115a:\t89 c6                \tmov    %eax,%esi</span><br><span class=\"line\">  40115c:\t48 8d 3d a1 0e 00 00 \tlea    0xea1(%rip),%rdi        # 402004 &lt;_IO_stdin_used+0x4&gt;</span><br><span class=\"line\">  401163:\tb8 00 00 00 00       \tmov    $0x0,%eax</span><br><span class=\"line\">  401168:\te8 d3 fe ff ff       \tcallq  401040 &lt;printf@plt&gt;</span><br><span class=\"line\">  40116d:\t83 45 f8 01          \taddl   $0x1,-0x8(%rbp)</span><br><span class=\"line\">  401171:\t8b 45 f8             \tmov    -0x8(%rbp),%eax</span><br><span class=\"line\">  401174:\t3b 45 fc             \tcmp    -0x4(%rbp),%eax</span><br><span class=\"line\">  401177:\t7c de                \tjl     401157 &lt;do_stuff+0x21&gt;</span><br><span class=\"line\">  401179:\t90                   \tnop</span><br><span class=\"line\">  40117a:\t90                   \tnop</span><br><span class=\"line\">  40117b:\tc9                   \tleaveq </span><br><span class=\"line\">  40117c:\tc3                   \tretq  </span><br></pre></td></tr></table></figure>\n<p>c 行数与汇编的映射关系通过以下得到</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt; </span><span class=\"language-bash\">objdump --dwarf=decodedline ./traceproc2</span> </span><br><span class=\"line\"></span><br><span class=\"line\">./traceproc2:     file format elf64-x86-64</span><br><span class=\"line\"></span><br><span class=\"line\">Contents of the .debug_line section:</span><br><span class=\"line\"></span><br><span class=\"line\">CU: ./traceproc2.c:</span><br><span class=\"line\">File name                            Line number    Starting address    View    Stmt</span><br><span class=\"line\">traceproc2.c                                   5            0x401136               x</span><br><span class=\"line\">traceproc2.c                                   6            0x401145               x</span><br><span class=\"line\">traceproc2.c                                   9            0x40114e               x</span><br><span class=\"line\">\t(··· ··· ···)</span><br><span class=\"line\">traceproc2.c                                  18            0x401196               x</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "debugger"
            ]
        }
    ]
}